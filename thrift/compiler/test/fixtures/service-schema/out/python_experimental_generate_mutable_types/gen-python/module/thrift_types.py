#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations

import folly.iobuf as _fbthrift_iobuf
import thrift.python.types as _fbthrift_python_types
import thrift.python.exceptions as _fbthrift_python_exceptions


import apache.thrift.type.schema.thrift_types


class CustomException(metaclass=_fbthrift_python_exceptions.GeneratedErrorMeta):
    _fbthrift_SPEC = (
        _fbthrift_python_types.FieldInfo(
            1,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "name",  # name
            "name",  # python name (from @python.Name annotation)
            _fbthrift_python_types.typeinfo_string,  # typeinfo
            None,  # default value
            None,  # adapter info
            False, # field type is primitive
        ),
        _fbthrift_python_types.FieldInfo(
            2,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "result",  # name
            "result",  # python name (from @python.Name annotation)
            lambda: _fbthrift_python_types.EnumTypeInfo(Result),  # typeinfo
            lambda: Result.SO_SO,  # default value
            None,  # adapter info
            False, # field type is primitive
        ),
    )

    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.CustomException"

    @staticmethod
    def __get_thrift_uri__():
        return None

    @staticmethod
    def __get_metadata__():
        return _fbthrift_metadata__exception_CustomException()

    def _to_python(self):
        return self

    def _to_mutable_python(self):
        import thrift.python.mutable_converter
        import importlib
        mutable_types = importlib.import_module("module.thrift_mutable_types")
        return thrift.python.mutable_converter.to_mutable_python_struct_or_union(mutable_types.CustomException, self)

    def _to_py3(self):
        import importlib
        py3_types = importlib.import_module("module.types")
        import thrift.py3.converter
        return thrift.py3.converter.to_py3_struct(py3_types.CustomException, self)

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        try:
            py_deprecated_types = importlib.import_module("module.ttypes")
            return thrift.util.converter.to_py_struct(py_deprecated_types.CustomException, self)
        except ModuleNotFoundError:
            py_asyncio_types = importlib.import_module("module.ttypes")
            return thrift.util.converter.to_py_struct(py_asyncio_types.CustomException, self)

# This unfortunately has to be down here to prevent circular imports
import module.thrift_metadata


class Result(_fbthrift_python_types.Enum, int):
    OK = 0
    SO_SO = 1
    GOOD = 2
    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.Result"

    @staticmethod
    def __get_thrift_uri__():
        return None

    @staticmethod
    def __get_metadata__():
        return module.thrift_metadata.gen_metadata_enum_Result()

    def _to_python(self):
        return self

    def _to_py3(self):
        import importlib
        py3_types = importlib.import_module("module.types")
        return py3_types.Result(self.value)

    def _to_py_deprecated(self):
        return self.value


_fbthrift_all_enums = [
    Result,
]

def _fbthrift_metadata__exception_CustomException():
    return module.thrift_metadata.gen_metadata_exception_CustomException()


_fbthrift_all_structs = [
    CustomException,
]
_fbthrift_python_types.fill_specs(*_fbthrift_all_structs)


_fbthrift_schema_3bd6b8a55f23bc3b = b"(\265/\375`\355 \255\202\000z\321\3403/\020P{\306\314\264a\364)\246\\\367\240\213\275\366\336fC\306\355C\200\3024\r\245,xr_\300\001X\025\245\2466\017n\366\365k\234\344\006\312.\0036\0034\003\242+ix\027&h-\262$\010e@\230\302;\3447\347|e\377\254\224hg\033_\314\31636F\377\217\034\365\301\026\357-\212I5\rP\013\300Y\373]#i\004S\340\032s\335\210\025@\025\244\354y\237\372\352\002\254I\224\005I1SBP\352\216\001\235\317\332\003\000\314X\220GR\023.\336W\306:\332\361\014T\237T\350\370\014\006\006\323\270\032\317\rGf\370\277DIL_\021\261\265\005\322?\314?8h\353\257\273\315\013\376\344P\223(\"\352\001X\2139\024\370\213\205`\301D\207\222\203kAs\313\212\363x\234}\252\001\2656\036\234\334\213kd#\221\301Q\335\311\357\002\266\303p\353\030I\307,\354\266\000!\354]z#J\273mRK\320\265+ \"\024miT\342\257\251*\000\027=x\353\324\303/\224e\212\361\202\315\357\r\030\223R$\333\345\224\022\362\200\214\201\341\016\324\347\332\014\231}P\240\017\230|\207\233\244~-\304\374\305\316\036\271E\002hk}{28\344|\254(\261w\370[-\007`f\006\364f\253\335q\3624Q\034|%\016n\"\277\200b~\257\231\244\355\363\264z\217\303\36743\"\2404\366;\236\346N\253\354\245\340\254\220\207\326B\232t$<`D\002\270Sb!\323\011\376\241\275\026\271\037\241\272\223\031\016\264f\034\233\306\265\217\000k&\210\257\3521\204\010I\022s\330\026\323\375s\303\340\036\330\312\222\372\306\210\n\345\230:\021;\341#@-qFHj\243\302\340\372\246\027\312~\342}\026\312%\027\306\036\311_\3223\3156\024\011Q\260\377\314\262\203K\276\314P6G\334W\267)\313\345\253l\256\230R\020V\023\234c$q\263\346\222\223\3535wYa,\031\254\327\017\3109.e,\n\260\274\243\223\250\023\345\\\216\242\334\037@2(\345\347\347\343\242\036\353q\372^\301\365I\241\230\233\205\261k\370k),\257\225\024b.\2057\231\234\255\272S\212/\321R\233\325\2668S \275Z\3347\273\267\326\371H_\210\367De,b\305\257\324\363F\011\215\246W\213\205\n\023\231\001\211\331\223\352\006BC\214Z\031O\014#\n\204f\220(\024\362\320\2335\222Z\r\374\037\3356\333\302e\265'\036Aq6\036\030\261%\377E8\254$\225\026E\022H\307\\\276\323\362\271\254\273\337\354yz\376v\273\323EDl\3577\332\256N\253\335\230u3\"\"\364\233\234(\355\226\276\260\262W\022DT\244\216\313\213\322m\373Z-\037\332\325l\267\370./\222\357\361\014s8\266Z\321\\\276\317\213\342{\233\ro{\253\213\346j\354\370z\336\264B\356\371\333\201\235U\360f\3633\344\221\027A\261\016\30673\200\203\223\307\374\275g\031bH\036\025\270C\377\252\007\214\332Lr|\347\027\311\250n\266\353\216\356\027\204\225$&Y1\343\223\025H\r\032Z\264\246\225\212\215z\247\225=\3477\325V\025\221\274\212\272\300e}ogH{\267\245\230\321F\316\001?x\262\265\016\024)\374b\255Y\351\336x\262\026\322G\335{f\354\330L\353\257\027\255\362Qe\273\324\215\333\335\3171\200\030\257n\032J\030\377h\270-\3279\314\247\312\2272\373\373C\024n\347\361&\331F;(\332\225\013=U\r\003SOy\236\264j\007c\253\007\234\325\013\r\034\011@\n\242\355\376-\010\232\370\231\210\017\003\311\204X\300\242-\211\275\245\247,V\210=\300]\035\212\351b7f\227\370\342\031\030\03798R\334\016P\363\303\321\331\\=zF\025\024Y\300#T\320\271b\230\277]\265Y\272~\027\271\217N\000\332qV\220\241\314\325\\\364+\345\0255@\252d\245\374\324\252\275\214\030\232A\023\034\275\203\027E\374\250\204Y\031(\250!\354U<\321i\370/2y\013\3546\317\306\210\377|\334H\346\257\033\376\261*RRQB\222ihVd\232\010\324Q\033\017,\327\3024\216Fo\215\232\207jSIp\326?\036\223\233\225Bi\331\214\254fY\233\0050\274\271o\251}\261j\033\245\033i\234\200\362p\016\254\305\376\033l\007\2700N$\3061\223\2640l\302v\255\337\240u\177\000#dD\261a \215\013\266\026\014\300O\306\202H\307mB\303\226\214\225v\327z\264\263|\323\024\0058\333P\010V\236t\034\312hR\205Ex28j#\213bJ6r\002\226\034\262\245:\300\036(\011\r\014\235\031x\267\270\210\2119\271X\253\272\177\250\204\346\022\310Z\226\346\011\265~\303I\350\314=m\022\026\177\253v\200\260\300\244\277>\010\304\241\336|\340m\017\315\240\254K^$\035[\022d\257\301\257\307\215k\233<\002s\034S\2476\002\230\353\254\264\364e\034Op\241\241yv\343\233[\344\3625\263\305\304\037\352\031\247\016\233\304\234Y\332m\016r\000\265p\362\020f(\227f\241X\327\010\217\306\026\244\265\344(x\336\306\022\247\375\020\364Ji\330\206o\365\307u\356\333?\324AG\244\300\346fh\314\210\037\200-s^\200\006P\233\0347\234\035t\3111\034\010\220\021\270\341[;\360\2311\034\035\363\322\234\200\021\343\360\004F\344o\257\200\016\307\\c|\320x\271\0278\340\316\215>\221?\303\034F\257\301v\016\200\320\212\230\243=\366\3771\351\342\313\025\341#\032Sz%\333\366\326 \374y6\260\251Ej\321\254-;\2619PC\316\025^M\017\007\214mF\013\332\0329\240BU\nA\346]=\205)\020\376x\021B9\201c\310U\244%\207_d]\265\324\031.>\3261\313\274\200\363\364\226\373\033Ac\2544\302>\271\300\nq\316:\317\013\371!\311\325V\310H\024\255\252\037\274d7\221Dv\336\230\001Y\362a5G\242\361p\360`\255\317\240\356\215\335W\025\266\237n(~H\226\236\032/\276\226\224\340\274L\334\201\347\347\230\247\305\3022\217v\367v2\207\207sY\327\3679;\016\266\313\343{\027\220\336N\317\335{\033;\276\303\341\246\212\202\374L\330vx\334\334l\376\241\271Y!\007Uq\221\3570\2376K\345\323\000I\215\232\305\221\243k\246R\373\261+\353\366\365\036\320\210\325N\321.1\223\213\222:T\345h.~\035vS\207j\333\027\332\353\247B\351\034O\317\345d\363\014|\3156\263Ic\313\004\260Y\267\331\351\371\236F\200\257\304\306f\205\334\342\233G.\374\245\005M\321\000\211\252\351e\204\212\017\021\306\352\326\2039y:\2064\306`\324\333\204~ 1\242!R\362\266\010\334\032 f\311^\350\342x\020\215)\220\226\252V\253VT\210\036<0\346\331x\333\022\011\212AL+y#\234\261Ky\374B\200\375S\032\271\025\275rK\n\031\035>\256r\260\264\227\037\033I\334{\254\227\024[0\321\2222?r\344}\027[\2134I\004\220\344\3250\332\"v<\307\322\374\013-\262\315;\225R\014&*\340.\307t\025\366\033\206\365\234\323\330&=\362\0133C\350\025\262\201=\032\3670\017\034)\254\311\211\222{+V\345\327\202\203BO6\336\324\227\272\247LH\021B\177\037\005\365E\227\253\313\213\360J\2536\212\037\271\005=m\n\342\223\222I^F3\022\320\335\341\201C\232\357\321\336\323\023.\262[\231\340\001u\212)\261F\333\307\276\265\345<\031hi\205\360\267\343\353A\252r\304?\275\214\260\321\365<{;\235\242B=9G0?\2418\226\313D\355k\302\312I\330-&\245#\346s1\020k\320d\331\343h0\254U\351\204\013\007\256G\231\340\351\310\332\303\340,\214\240\022\000\342i\214\332\213\371\270\341\240\202!N.\321\351\210\032\022+x$\375*\215\014C\261\007\037\216L\031\375\212k;S$\275\374\005i\220\223\250\014d\227\rAR\255.\312\003O$aM4\252\267\023q+U\203\202'\035\210\227\257\022[c\312\3633=C1v\347\253\322T8\346\033\0206\336\310A#\321\005\205DR\254\3547\311\357\373\250\325\352\210\305\365\214|\231\3201\336#E\353\376\220R\252\020:\247\027\205\213\301\260\335\013W\361\221g*S\203y\235Q\205\340\255\224S\006\353\260{\371\030\341\260\236sY/`>\361\301A _\237\224\211\210\010\254\220q\333]\270q;:H\344@!\216\342\241\201\203\177L\234\336\263\343I\003\344\206:4\360\314\311\241\330?\231\221\301W7$XA6\307\245$\343gB\374X0\032F\354\203\253\227\222i\025\323h\220\361\343\227\350\274\021z\365\241\017\376\370z[\n\260J`\363r\251\237EFCxtI\205\204M3l_\254\177t\310%\0070\252\013\3574\020\000qr\337K\257Oja%\366\002\370T\204S\354\210\016\320LC\373Bd\240x\350)D\3423\026\014l$\0364\003\361G:\214\306P\277\362\255\215\002\352\342\246\034\263 x\310\262\276cfS\247\327(Hq\360\023s\032\236\206A\000\207\253Q\366P\320\330m\011r\310C\272`\267c\304-\235\257\330\030\335\345c]o\263T\357\034\370\022O.2.\246ah\374\032\303%\230\272\256\353\345\370\336\226v\243\344\301w5\334T\333{.\317\020\345\2026s3s\357\361\037I\364^\362\323\212\006\322\345o\357y:mo\20313\351G(2\272n\324\226\216\247Y\274\320B&2Bg\264>g\273\331(f&\256\271;\003\205\275*\311\257d\003\227|wc\317\331Z/f\264\234\256\353(3\272TVV\225\311\214\236\305e\226\305\245_e1\235\365y;\203|\247\200\345w2\246\233L\225,\322\2620\364\355#\314\005\322.\0112\002\340\200n\007\004Z\346\003TM\262\261\2042?\247\016/\267$\014j\010\263\326\023CW\377\304`X|\372>\023!\304\206\034\343\205\225\330Z\021\204\323\245\010\345\307\201\365\212\033\324j\355(\205\277\320\033s\001\203\3728\302\004\2046\262\001\332\352X\020Z\200'\273UZ\326y\314\356\367z\036\007O)\223\203^\035 \005\372e?]\206)\224\r\361\222e}\235R\370_\014\016\262E\005\011[\272[Kr\377\017\325\031\276\307\311507e\002ZM\353\256]\236\206*b\322q\333}\233\032>\360h\363\030\344\006\364\325\323\014\374j\235.En\037vn\r\340L(Tn}!\376\232\217\025\036\001@\354\300\0234aUA\312\006w}v\257\221\364\237\026\220\0267\271L\211'\266\274\376\031\264\004r\2526W\240\251\245\014\223as\324`\031\273\\\304\025\3017\362d\251\316<\004\200t\210\010\314w\256\365\316\202\237\025rk\353!h\213\332\370\357\245/\363\207\260\247\023\343\233\036\022\226}!\332\342\005\312c\274\320\230\270(\236\206\325\374\223\007,\276d,\232%8\204B\227\341\017@\352\014\335\322\361\031C\232\230\225\2338\353\340\343!\204Q\235\213\\\312f\005\312*k\"xZB\322\021\225\233\375V\233\337T\233\314E5\254\266\366\315,\251\227\363\347\332\263\230\335a\201D\302:*|rmG\351]\275o\210\373\371\256{\322Q\006\321\342,\376A\026\325\306\023\"\251\334Z\250<\266S\001\"%6\350)E\360\377<\211\034'\217H\360F@\034\204\361\261\242\201\365\025r\201\377\210\003#3\031Q\335\316%lhs\373\255~\317\337q8\331\005\263\212\302*\021\275\241\261\037\275\243p\026[I\376\316\2157\n\230\307\205\325\205XU\210\323\0110\300\2071\307\022\304\301sG\246\356)\355\031\000\336\371\357}\\\264\210\221\205 Q\225r\013\274\213\010\272\232?\224\034\314L\203\335\223P^\011\264X\200i\365\343\237F\236Y\203\360U\035\252\341\346\")59\017\376\010\330\236\246`\233\005[Dh\036\351\230:\327\371\303\225\365\033\033\235\23257;>\347\202\242jZ\023\251e\200\312\262*z\263\213\342\332\355\267\032\023\314\217\316\ny\257M\310\225+\333\030\303\204\354a\026\"\320\035\215\277)\0044\251\335\235\371\340C\301VE\320s\001\350/h\222\323\001\032\330\360\207D\300|\216E\362\304\354c\035\275\350iBH\014\201v\250\26113\"\"\"\"\242 IQ\n\351\241\010!H2\306\260\354\0062I\014\305P\220#\021\202\0101\222\020\342\220\221\021\011\306\024\024\245\2065\334\233^\317wXq<\ne\225\341\234\251\r<\376\347+\212n\0228\036|3\250\352\225\243\033\245\177\220\310Z\224\263&(\006\003M@.\276\003\203I\010b\203\312\373Ai\311q Q\345\377\356\375\331<\000\304\217\261yyN_A\255\364\027@\340/|-\207SG\n\342I\334\277J\301\342\375 \200\232\211\240\021\330\317?\016a|\226\034\000/\373\2771\0270\212\371ak\262\364[\315\341\250\335i\263\370\r\003\337KE\315l\320]\251\304\372\364\226\356be\364=\016e\213Q\355\3358\241\361B54_5\214\207\027j\305\032\002I\207\206\351\307\\\3667\002\317=\306\355\365>\214\253\310\373%(\\\0328\207\314\311\177\236H\312\373\203v\276\366\326\201\240t\010\205\221\232#\021\371I8\017?)\203V\011\014\305\211\254\317c\274b\301c\205(B\205\002\305\025\241\n\000\356\340\213J\367\245\262\201\357\352*\023\201.\246\367iF\334Qm\002\265\323\357\000\200l\250\230\r\363\\\226\2263\340O\215\270fE\262\320Of\304\354B\267\313\014\314L\314`ehL\303\026\n4\036\340\001\370\r\271\352\367B\002\243\001\205w\341d\304!\014\025\33560\357E\337\000\2759!\006\301\362I\007\nt4% [\020\255\2170\260\242&\210\263\203\360\315\303\325\274X\206U\320\000\n\206h\241*\310\224U7\301\307\376\222A8\001R\007\337\345\201\265\203$\354\203\021\333\315<iV\364\244\343NW\202\213\022\n\354\001.\303t\336\332\336\216\255\314\331\177\341\374\360\373\355#\352\023\263\203\224wd$\243c\251W\274,\223\211\2511\314#~\306\014\011f\331\200J\215CA=\263*\372\323\351\361^V\252\233\243 H$\275\254\205f\3608\035n1\303k\007\261\337Z\256L\376\356\n\203\247 \005\226\216\320X\213 \252\237;\306\"j\343\342\310%\271\314k\337\020#\344\n\247\335\224\246\301\007N\261\226\354\244\263\264\226\021\253\226A\024\236\217\\\005\227\2224\352\270\247N\357\343\223\247\021l~\255\007Nt=A\222\232#\367\221:$\255\323C\025\323\354\351\023\326|\352<\362<\276\207z\376\250c\305\2029\372[\315\366M\022\244vCIqx\017\306\317%\026p\363\243\030@Xqb\346\371\305EO+\251CA*d1\260#\003\332\314\235\347\337\216\346\212\313\365\005pRr\215`<\222\035H\340|\243S\326\372\006\274\246\0211\023\376\030Z?\000\230\331B?\373$=`\011i\316~\323\016\373r\177M\353\225\343\262\245\235\202\233\014\334\234P\2664\010\352\203]r\322\265\361r\211\222\237\031\314\316\321\220\254\011;M\371Z\016\266\251f\364m\324`\004\213q\315G\314\016\352\035\001\314\301>r\251\260h\343/o\312\033\307\233\001E\252\211l4\331U\251\330\216\346\022\030\264\226=\331y\355\214T\230:~\304\202\354\351[\034\230\023\225Yr9\003\344\224\320\332\0135E\"U\376"



class _fbthrift_PrimitivesService_init_args(metaclass=_fbthrift_python_types.StructMeta):
    _fbthrift_SPEC = (
        _fbthrift_python_types.FieldInfo(
            1,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "param0",  # name
            "param0",  # python name (from @python.Name annotation)
            _fbthrift_python_types.typeinfo_i64,  # typeinfo
            None,  # default value
            None,  # adapter info
            True, # field type is primitive
        ),
        _fbthrift_python_types.FieldInfo(
            2,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "param1",  # name
            "param1",  # python name (from @python.Name annotation)
            _fbthrift_python_types.typeinfo_i64,  # typeinfo
            None,  # default value
            None,  # adapter info
            True, # field type is primitive
        ),
    )


class _fbthrift_PrimitivesService_init_result(metaclass=_fbthrift_python_types.StructMeta):
    _fbthrift_SPEC = (
        _fbthrift_python_types.FieldInfo(
            0,  # id
            _fbthrift_python_types.FieldQualifier.Optional, # qualifier
            "success",  # name
            "success", # name
            _fbthrift_python_types.typeinfo_i64,  # typeinfo
            None,  # default value
            None,  # adapter info
            False, # field type is primitive
        ),
    )


class _fbthrift_PrimitivesService_method_that_throws_args(metaclass=_fbthrift_python_types.StructMeta):
    _fbthrift_SPEC = (
    )


class _fbthrift_PrimitivesService_method_that_throws_result(metaclass=_fbthrift_python_types.StructMeta):
    _fbthrift_SPEC = (
        _fbthrift_python_types.FieldInfo(
            0,  # id
            _fbthrift_python_types.FieldQualifier.Optional, # qualifier
            "success",  # name
            "success", # name
            lambda: _fbthrift_python_types.EnumTypeInfo(Result),  # typeinfo
            None,  # default value
            None,  # adapter info
            False, # field type is primitive
        ),
        _fbthrift_python_types.FieldInfo(
            1,  # id
            _fbthrift_python_types.FieldQualifier.Optional, # qualifier
            "e",  # name
            "e",  # python name (from @python.Name annotation)
            lambda: _fbthrift_python_types.StructTypeInfo(CustomException),  # typeinfo
            None,  # default value
            None,  # adapter info
            False, # field type is primitive
        ),
    )


class _fbthrift_PrimitivesService_return_void_method_args(metaclass=_fbthrift_python_types.StructMeta):
    _fbthrift_SPEC = (
        _fbthrift_python_types.FieldInfo(
            1,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "id",  # name
            "id",  # python name (from @python.Name annotation)
            _fbthrift_python_types.typeinfo_i64,  # typeinfo
            None,  # default value
            None,  # adapter info
            True, # field type is primitive
        ),
    )


class _fbthrift_PrimitivesService_return_void_method_result(metaclass=_fbthrift_python_types.StructMeta):
    _fbthrift_SPEC = (
    )



_fbthrift_python_types.fill_specs(
    _fbthrift_PrimitivesService_init_args,
    _fbthrift_PrimitivesService_init_result,
    _fbthrift_PrimitivesService_method_that_throws_args,
    _fbthrift_PrimitivesService_method_that_throws_result,
    _fbthrift_PrimitivesService_return_void_method_args,
    _fbthrift_PrimitivesService_return_void_method_result,
    
)
