<?hh
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

enum apache_thrift_protocol_MaskedDataEnum: int {
  _EMPTY_ = 0;
  full = 1;
  fields = 2;
  values = 3;
}

/**
 * Original thrift union:-
 * MaskedData
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/protocol/MaskedData'))>>
class apache_thrift_protocol_MaskedData implements \IThriftSyncStruct, \IThriftStructMetadata, \IThriftUnion<apache_thrift_protocol_MaskedDataEnum> {
  use \ThriftUnionSerializationTrait;

  const \ThriftStructTypes::TSpec SPEC = dict[
    1 => shape(
      'var' => 'full',
      'union' => true,
      'type' => \TType::I64,
    ),
    2 => shape(
      'var' => 'fields',
      'union' => true,
      'type' => \TType::MAP,
      'ktype' => \TType::I16,
      'vtype' => \TType::STRUCT,
      'key' => shape(
        'type' => \TType::I16,
      ),
      'val' => shape(
        'type' => \TType::STRUCT,
        'class' => apache_thrift_protocol_MaskedData::class,
      ),
      'format' => 'collection',
    ),
    3 => shape(
      'var' => 'values',
      'union' => true,
      'type' => \TType::MAP,
      'ktype' => \TType::I64,
      'vtype' => \TType::STRUCT,
      'key' => shape(
        'type' => \TType::I64,
      ),
      'val' => shape(
        'type' => \TType::STRUCT,
        'class' => apache_thrift_protocol_MaskedData::class,
      ),
      'format' => 'collection',
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'full' => 1,
    'fields' => 2,
    'values' => 3,
  ];

  const type TConstructorShape = shape(
    ?'full' => ?int,
    ?'fields' => ?Map<int, apache_thrift_protocol_MaskedData>,
    ?'values' => ?Map<int, apache_thrift_protocol_MaskedData>,
  );

  const int STRUCTURAL_ID = 2393062229782895949;
  /**
   * Original thrift field:-
   * 1: id.ValueId full
   */
  public ?int $full;
  /**
   * Original thrift field:-
   * 2: map<id.FieldId, protocol.MaskedData> fields
   */
  public ?Map<int, apache_thrift_protocol_MaskedData> $fields;
  /**
   * Original thrift field:-
   * 3: map<id.ValueId, protocol.MaskedData> values
   */
  public ?Map<int, apache_thrift_protocol_MaskedData> $values;
  protected apache_thrift_protocol_MaskedDataEnum $_type = apache_thrift_protocol_MaskedDataEnum::_EMPTY_;

  public function __construct(?int $full = null, ?Map<int, apache_thrift_protocol_MaskedData> $fields = null, ?Map<int, apache_thrift_protocol_MaskedData> $values = null)[] {
    $this->_type = apache_thrift_protocol_MaskedDataEnum::_EMPTY_;
    if ($full !== null) {
      $this->full = $full;
      $this->_type = apache_thrift_protocol_MaskedDataEnum::full;
    }
    if ($fields !== null) {
      $this->fields = $fields;
      $this->_type = apache_thrift_protocol_MaskedDataEnum::fields;
    }
    if ($values !== null) {
      $this->values = $values;
      $this->_type = apache_thrift_protocol_MaskedDataEnum::values;
    }
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'full'),
      Shapes::idx($shape, 'fields'),
      Shapes::idx($shape, 'values'),
    );
  }

  public function getName()[]: string {
    return 'MaskedData';
  }

  public function getType()[]: apache_thrift_protocol_MaskedDataEnum {
    return $this->_type;
  }

  public function reset()[write_props]: void {
    switch ($this->_type) {
      case apache_thrift_protocol_MaskedDataEnum::full:
        $this->full = null;
        break;
      case apache_thrift_protocol_MaskedDataEnum::fields:
        $this->fields = null;
        break;
      case apache_thrift_protocol_MaskedDataEnum::values:
        $this->values = null;
        break;
      case apache_thrift_protocol_MaskedDataEnum::_EMPTY_:
        break;
    }
    $this->_type = apache_thrift_protocol_MaskedDataEnum::_EMPTY_;
  }

  public function set_full(int $full)[write_props]: this {
    $this->reset();
    $this->_type = apache_thrift_protocol_MaskedDataEnum::full;
    $this->full = $full;
    return $this;
  }

  public function get_full()[]: ?int {
    return $this->full;
  }

  public function getx_full()[]: int {
    invariant(
      $this->_type === apache_thrift_protocol_MaskedDataEnum::full,
      'get_full called on an instance of MaskedData whose current type is %s',
      (string)$this->_type,
    );
    return $this->full as nonnull;
  }

  public function set_fields(Map<int, apache_thrift_protocol_MaskedData> $fields)[write_props]: this {
    $this->reset();
    $this->_type = apache_thrift_protocol_MaskedDataEnum::fields;
    $this->fields = $fields;
    return $this;
  }

  public function get_fields()[]: ?Map<int, apache_thrift_protocol_MaskedData> {
    return $this->fields;
  }

  public function getx_fields()[]: Map<int, apache_thrift_protocol_MaskedData> {
    invariant(
      $this->_type === apache_thrift_protocol_MaskedDataEnum::fields,
      'get_fields called on an instance of MaskedData whose current type is %s',
      (string)$this->_type,
    );
    return $this->fields as nonnull;
  }

  public function set_values(Map<int, apache_thrift_protocol_MaskedData> $values)[write_props]: this {
    $this->reset();
    $this->_type = apache_thrift_protocol_MaskedDataEnum::values;
    $this->values = $values;
    return $this;
  }

  public function get_values()[]: ?Map<int, apache_thrift_protocol_MaskedData> {
    return $this->values;
  }

  public function getx_values()[]: Map<int, apache_thrift_protocol_MaskedData> {
    invariant(
      $this->_type === apache_thrift_protocol_MaskedDataEnum::values,
      'get_values called on an instance of MaskedData whose current type is %s',
      (string)$this->_type,
    );
    return $this->values as nonnull;
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "protocol.MaskedData",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "id.ValueId",
                      "underlyingType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                            shape(
                              "name" => "id.ExternId",
                              "underlyingType" => tmeta_ThriftType::fromShape(
                                shape(
                                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                                )
                              ),
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "full",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_map" => tmeta_ThriftMapType::fromShape(
                    shape(
                      "keyType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                            shape(
                              "name" => "id.FieldId",
                              "underlyingType" => tmeta_ThriftType::fromShape(
                                shape(
                                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I16_TYPE,
                                )
                              ),
                            )
                          ),
                        )
                      ),
                      "valueType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "protocol.MaskedData",
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "fields",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_map" => tmeta_ThriftMapType::fromShape(
                    shape(
                      "keyType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                            shape(
                              "name" => "id.ValueId",
                              "underlyingType" => tmeta_ThriftType::fromShape(
                                shape(
                                  "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                                    shape(
                                      "name" => "id.ExternId",
                                      "underlyingType" => tmeta_ThriftType::fromShape(
                                        shape(
                                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                                        )
                                      ),
                                    )
                                  ),
                                )
                              ),
                            )
                          ),
                        )
                      ),
                      "valueType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "protocol.MaskedData",
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "values",
            )
          ),
        ],
        "is_union" => true,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[
        '\facebook\thrift\annotation\python\Py3Hidden' => \facebook\thrift\annotation\python\Py3Hidden::fromShape(
          shape(
          )
        ),
      ],
      'fields' => dict[
        'full' => shape(
          'field' => dict[],
          'type' => dict[
            '\facebook\thrift\annotation\cpp\Adapter' => \facebook\thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>",
              )
            ),
          ],
        ),
        'fields' => shape(
          'field' => dict[
            '\facebook\thrift\annotation\cpp\Ref' => \facebook\thrift\annotation\cpp\Ref::fromShape(
              shape(
                "type" => \facebook\thrift\annotation\cpp\RefType::Unique,
              )
            ),
            '\facebook\thrift\annotation\cpp\Type' => \facebook\thrift\annotation\cpp\Type::fromShape(
              shape(
                "template" => "folly::F14VectorMap",
              )
            ),
          ],
          'type' => dict[],
        ),
        'values' => shape(
          'field' => dict[
            '\facebook\thrift\annotation\cpp\Ref' => \facebook\thrift\annotation\cpp\Ref::fromShape(
              shape(
                "type" => \facebook\thrift\annotation\cpp\RefType::Unique,
              )
            ),
            '\facebook\thrift\annotation\cpp\Type' => \facebook\thrift\annotation\cpp\Type::fromShape(
              shape(
                "template" => "folly::F14VectorMap",
              )
            ),
          ],
          'type' => dict[],
        ),
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

/**
 * Original thrift struct:-
 * EncodedValue
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/protocol/EncodedValue'))>>
class apache_thrift_protocol_EncodedValue implements \IThriftSyncStruct, \IThriftStructMetadata {
  use \ThriftSerializationTrait;

  const \ThriftStructTypes::TSpec SPEC = dict[
    1 => shape(
      'var' => 'wireType',
      'type' => \TType::I32,
      'enum' => apache_thrift_type_BaseTypeEnum::class,
    ),
    2 => shape(
      'var' => 'data',
      'type' => \TType::STRING,
      'is_binary' => true,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'wireType' => 1,
    'data' => 2,
  ];

  const type TConstructorShape = shape(
    ?'wireType' => ?apache_thrift_type_BaseTypeEnum,
    ?'data' => ?string,
  );

  const int STRUCTURAL_ID = 8227659950135250614;
  /**
   * Original thrift field:-
   * 1: type.BaseType wireType
   */
  public ?apache_thrift_type_BaseTypeEnum $wireType;
  /**
   * Original thrift field:-
   * 2: standard.ByteBuffer data
   */
  public string $data;

  public function __construct(?apache_thrift_type_BaseTypeEnum $wireType = null, ?string $data = null)[] {
    $this->wireType = $wireType;
    $this->data = $data ?? '';
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'wireType'),
      Shapes::idx($shape, 'data'),
    );
  }

  public function getName()[]: string {
    return 'EncodedValue';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "protocol.EncodedValue",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "type.BaseType",
                      "underlyingType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_enum" => tmeta_ThriftEnumType::fromShape(
                            shape(
                              "name" => "type.BaseTypeEnum",
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "wireType",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "standard.ByteBuffer",
                      "underlyingType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BINARY_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "data",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[
        '\facebook\thrift\annotation\python\Py3Hidden' => \facebook\thrift\annotation\python\Py3Hidden::fromShape(
          shape(
          )
        ),
      ],
      'fields' => dict[
        'wireType' => shape(
          'field' => dict[],
          'type' => dict[
            '\facebook\thrift\annotation\cpp\Adapter' => \facebook\thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::apache::thrift::StaticCastAdapter<::apache::thrift::type::BaseType, ::apache::thrift::type::BaseTypeEnum>",
              )
            ),
          ],
        ),
        'data' => shape(
          'field' => dict[],
          'type' => dict[
            '\facebook\thrift\annotation\cpp\Type' => \facebook\thrift\annotation\cpp\Type::fromShape(
              shape(
                "name" => "folly::IOBuf",
              )
            ),
            '\facebook\thrift\annotation\java\Adapter' => \facebook\thrift\annotation\java\Adapter::fromShape(
              shape(
                "adapterClassName" => "com.facebook.thrift.adapter.common.UnpooledByteBufTypeAdapter",
                "typeClassName" => "io.netty.buffer.ByteBuf",
              )
            ),
          ],
        ),
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

/**
 * Original thrift struct:-
 * MaskedProtocolData
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/protocol/MaskedProtocolData'))>>
class apache_thrift_protocol_MaskedProtocolData implements \IThriftSyncStruct, \IThriftStructMetadata {
  use \ThriftSerializationTrait;

  const \ThriftStructTypes::TSpec SPEC = dict[
    1 => shape(
      'var' => 'protocol',
      'type' => \TType::STRUCT,
      'class' => apache_thrift_type_rep_ProtocolUnion::class,
    ),
    2 => shape(
      'var' => 'data',
      'type' => \TType::STRUCT,
      'class' => apache_thrift_protocol_MaskedData::class,
    ),
    3 => shape(
      'var' => 'values',
      'type' => \TType::LST,
      'etype' => \TType::STRUCT,
      'elem' => shape(
        'type' => \TType::STRUCT,
        'class' => apache_thrift_protocol_EncodedValue::class,
      ),
      'format' => 'collection',
    ),
    4 => shape(
      'var' => 'keys',
      'type' => \TType::LST,
      'etype' => \TType::STRUCT,
      'elem' => shape(
        'type' => \TType::STRUCT,
        'class' => apache_thrift_protocol_detail_Value::class,
      ),
      'format' => 'collection',
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'protocol' => 1,
    'data' => 2,
    'values' => 3,
    'keys' => 4,
  ];

  const type TConstructorShape = shape(
    ?'protocol' => ?apache_thrift_type_rep_ProtocolUnion,
    ?'data' => ?apache_thrift_protocol_MaskedData,
    ?'values' => ?Vector<apache_thrift_protocol_EncodedValue>,
    ?'keys' => ?Vector<apache_thrift_protocol_detail_Value>,
  );

  const int STRUCTURAL_ID = 3880788558013903325;
  /**
   * Original thrift field:-
   * 1: type.Protocol protocol
   */
  public ?apache_thrift_type_rep_ProtocolUnion $protocol;
  /**
   * Original thrift field:-
   * 2: protocol.MaskedData data
   */
  public ?apache_thrift_protocol_MaskedData $data;
  /**
   * Original thrift field:-
   * 3: list<protocol.EncodedValue> values
   */
  public Vector<apache_thrift_protocol_EncodedValue> $values;
  /**
   * Original thrift field:-
   * 4: list<protocol.Value> keys
   */
  public Vector<apache_thrift_protocol_detail_Value> $keys;

  public function __construct(?apache_thrift_type_rep_ProtocolUnion $protocol = null, ?apache_thrift_protocol_MaskedData $data = null, ?Vector<apache_thrift_protocol_EncodedValue> $values = null, ?Vector<apache_thrift_protocol_detail_Value> $keys = null)[] {
    $this->protocol = $protocol;
    $this->data = $data;
    $this->values = $values ?? Vector {};
    $this->keys = $keys ?? Vector {};
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'protocol'),
      Shapes::idx($shape, 'data'),
      Shapes::idx($shape, 'values'),
      Shapes::idx($shape, 'keys'),
    );
  }

  public function getName()[]: string {
    return 'MaskedProtocolData';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "protocol.MaskedProtocolData",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "type.Protocol",
                      "underlyingType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "type_rep.ProtocolUnion",
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "protocol",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "protocol.MaskedData",
                    )
                  ),
                )
              ),
              "name" => "data",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_list" => tmeta_ThriftListType::fromShape(
                    shape(
                      "valueType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "protocol.EncodedValue",
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "values",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_list" => tmeta_ThriftListType::fromShape(
                    shape(
                      "valueType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                            shape(
                              "name" => "protocol.Value",
                              "underlyingType" => tmeta_ThriftType::fromShape(
                                shape(
                                  "t_struct" => tmeta_ThriftStructType::fromShape(
                                    shape(
                                      "name" => "protocol_detail.Value",
                                    )
                                  ),
                                )
                              ),
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "keys",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[
        '\facebook\thrift\annotation\python\Py3Hidden' => \facebook\thrift\annotation\python\Py3Hidden::fromShape(
          shape(
          )
        ),
        '\facebook\thrift\annotation\cpp\UseOpEncode' => \facebook\thrift\annotation\cpp\UseOpEncode::fromShape(
          shape(
          )
        ),
      ],
      'fields' => dict[
        'protocol' => shape(
          'field' => dict[],
          'type' => dict[
            '\facebook\thrift\annotation\cpp\Adapter' => \facebook\thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::apache::thrift::InlineAdapter<::apache::thrift::type::Protocol>",
              )
            ),
          ],
        ),
        'data' => shape(
          'field' => dict[],
          'type' => dict[
            '\facebook\thrift\annotation\python\Py3Hidden' => \facebook\thrift\annotation\python\Py3Hidden::fromShape(
              shape(
              )
            ),
          ],
        ),
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

