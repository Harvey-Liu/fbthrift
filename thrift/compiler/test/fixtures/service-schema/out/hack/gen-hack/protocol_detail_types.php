<?hh
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/**
 * Original thrift struct:-
 * Object
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/protocol/Object'))>>
class apache_thrift_protocol_detail_Object implements \IThriftSyncStruct, \IThriftStructMetadata {
  use \ThriftSerializationTrait;

  const \ThriftStructTypes::TSpec SPEC = dict[
    1 => shape(
      'var' => 'type',
      'type' => \TType::STRING,
    ),
    2 => shape(
      'var' => 'members',
      'type' => \TType::MAP,
      'ktype' => \TType::I16,
      'vtype' => \TType::STRUCT,
      'key' => shape(
        'type' => \TType::I16,
      ),
      'val' => shape(
        'type' => \TType::STRUCT,
        'class' => apache_thrift_protocol_detail_Value::class,
      ),
      'format' => 'collection',
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'type' => 1,
    'members' => 2,
  ];

  const type TConstructorShape = shape(
    ?'type' => ?string,
    ?'members' => ?Map<int, apache_thrift_protocol_detail_Value>,
  );

  const int STRUCTURAL_ID = 1421629899611135485;
  /**
   * Original thrift field:-
   * 1: string type
   */
  public string $type;
  /**
   * Original thrift field:-
   * 2: map<i16, protocol_detail.Value> members
   */
  public Map<int, apache_thrift_protocol_detail_Value> $members;

  public function __construct(?string $type = null, ?Map<int, apache_thrift_protocol_detail_Value> $members = null)[] {
    $this->type = $type ?? '';
    $this->members = $members ?? Map {};
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'type'),
      Shapes::idx($shape, 'members'),
    );
  }

  public function getName()[]: string {
    return 'Object';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "protocol_detail.Object",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                )
              ),
              "name" => "type",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_map" => tmeta_ThriftMapType::fromShape(
                    shape(
                      "keyType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I16_TYPE,
                        )
                      ),
                      "valueType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "protocol_detail.Value",
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "members",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[
        '\facebook\thrift\annotation\cpp\Adapter' => \facebook\thrift\annotation\cpp\Adapter::fromShape(
          shape(
            "name" => "::apache::thrift::protocol::detail::ObjectAdapter",
            "adaptedType" => "::apache::thrift::protocol::detail::ObjectWrapper<::apache::thrift::protocol::detail::detail::Object>",
          )
        ),
        '\facebook\thrift\annotation\cpp\UseOpEncode' => \facebook\thrift\annotation\cpp\UseOpEncode::fromShape(
          shape(
          )
        ),
      ],
      'fields' => dict[
        'members' => shape(
          'field' => dict[
            '\facebook\thrift\annotation\cpp\Ref' => \facebook\thrift\annotation\cpp\Ref::fromShape(
              shape(
                "type" => \facebook\thrift\annotation\cpp\RefType::Unique,
              )
            ),
            '\facebook\thrift\annotation\cpp\Type' => \facebook\thrift\annotation\cpp\Type::fromShape(
              shape(
                "template" => "::folly::F14FastMap",
              )
            ),
          ],
          'type' => dict[],
        ),
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

enum apache_thrift_protocol_detail_ValueEnum: int {
  _EMPTY_ = 0;
  boolValue = 1;
  byteValue = 2;
  i16Value = 3;
  i32Value = 4;
  i64Value = 5;
  floatValue = 6;
  doubleValue = 7;
  stringValue = 8;
  binaryValue = 9;
  objectValue = 11;
  listValue = 14;
}

/**
 * Original thrift union:-
 * Value
 */
<<\ThriftTypeInfo(shape('uri' => 'facebook.com/thrift/protocol/Value'))>>
class apache_thrift_protocol_detail_Value implements \IThriftSyncStruct, \IThriftStructMetadata, \IThriftUnion<apache_thrift_protocol_detail_ValueEnum> {
  use \ThriftUnionSerializationTrait;

  const \ThriftStructTypes::TSpec SPEC = dict[
    1 => shape(
      'var' => 'boolValue',
      'union' => true,
      'type' => \TType::BOOL,
    ),
    2 => shape(
      'var' => 'byteValue',
      'union' => true,
      'type' => \TType::BYTE,
    ),
    3 => shape(
      'var' => 'i16Value',
      'union' => true,
      'type' => \TType::I16,
    ),
    4 => shape(
      'var' => 'i32Value',
      'union' => true,
      'type' => \TType::I32,
    ),
    5 => shape(
      'var' => 'i64Value',
      'union' => true,
      'type' => \TType::I64,
    ),
    6 => shape(
      'var' => 'floatValue',
      'union' => true,
      'type' => \TType::FLOAT,
    ),
    7 => shape(
      'var' => 'doubleValue',
      'union' => true,
      'type' => \TType::DOUBLE,
    ),
    8 => shape(
      'var' => 'stringValue',
      'union' => true,
      'type' => \TType::STRING,
      'is_binary' => true,
    ),
    9 => shape(
      'var' => 'binaryValue',
      'union' => true,
      'type' => \TType::STRING,
      'is_binary' => true,
    ),
    11 => shape(
      'var' => 'objectValue',
      'union' => true,
      'type' => \TType::STRUCT,
      'class' => apache_thrift_protocol_detail_Object::class,
    ),
    14 => shape(
      'var' => 'listValue',
      'union' => true,
      'type' => \TType::LST,
      'etype' => \TType::STRUCT,
      'elem' => shape(
        'type' => \TType::STRUCT,
        'class' => apache_thrift_protocol_detail_Value::class,
      ),
      'format' => 'collection',
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'boolValue' => 1,
    'byteValue' => 2,
    'i16Value' => 3,
    'i32Value' => 4,
    'i64Value' => 5,
    'floatValue' => 6,
    'doubleValue' => 7,
    'stringValue' => 8,
    'binaryValue' => 9,
    'objectValue' => 11,
    'listValue' => 14,
  ];

  const type TConstructorShape = shape(
    ?'boolValue' => ?bool,
    ?'byteValue' => ?int,
    ?'i16Value' => ?int,
    ?'i32Value' => ?int,
    ?'i64Value' => ?int,
    ?'floatValue' => ?float,
    ?'doubleValue' => ?float,
    ?'stringValue' => ?string,
    ?'binaryValue' => ?string,
    ?'objectValue' => ?apache_thrift_protocol_detail_Object,
    ?'listValue' => ?Vector<apache_thrift_protocol_detail_Value>,
  );

  const int STRUCTURAL_ID = 4575083680062031835;
  /**
   * Original thrift field:-
   * 1: bool boolValue
   */
  public ?bool $boolValue;
  /**
   * Original thrift field:-
   * 2: byte byteValue
   */
  public ?int $byteValue;
  /**
   * Original thrift field:-
   * 3: i16 i16Value
   */
  public ?int $i16Value;
  /**
   * Original thrift field:-
   * 4: i32 i32Value
   */
  public ?int $i32Value;
  /**
   * Original thrift field:-
   * 5: i64 i64Value
   */
  public ?int $i64Value;
  /**
   * Original thrift field:-
   * 6: protocol_detail.Float floatValue
   */
  public ?float $floatValue;
  /**
   * Original thrift field:-
   * 7: protocol_detail.Double doubleValue
   */
  public ?float $doubleValue;
  /**
   * Original thrift field:-
   * 8: binary stringValue
   */
  public ?string $stringValue;
  /**
   * Original thrift field:-
   * 9: standard.ByteBuffer binaryValue
   */
  public ?string $binaryValue;
  /**
   * Original thrift field:-
   * 11: protocol_detail.Object objectValue
   */
  public ?apache_thrift_protocol_detail_Object $objectValue;
  /**
   * Original thrift field:-
   * 14: list<protocol_detail.Value> listValue
   */
  public ?Vector<apache_thrift_protocol_detail_Value> $listValue;
  protected apache_thrift_protocol_detail_ValueEnum $_type = apache_thrift_protocol_detail_ValueEnum::_EMPTY_;

  public function __construct(?bool $boolValue = null, ?int $byteValue = null, ?int $i16Value = null, ?int $i32Value = null, ?int $i64Value = null, ?float $floatValue = null, ?float $doubleValue = null, ?string $stringValue = null, ?string $binaryValue = null, ?apache_thrift_protocol_detail_Object $objectValue = null, ?Vector<apache_thrift_protocol_detail_Value> $listValue = null)[] {
    $this->_type = apache_thrift_protocol_detail_ValueEnum::_EMPTY_;
    if ($boolValue !== null) {
      $this->boolValue = $boolValue;
      $this->_type = apache_thrift_protocol_detail_ValueEnum::boolValue;
    }
    if ($byteValue !== null) {
      $this->byteValue = $byteValue;
      $this->_type = apache_thrift_protocol_detail_ValueEnum::byteValue;
    }
    if ($i16Value !== null) {
      $this->i16Value = $i16Value;
      $this->_type = apache_thrift_protocol_detail_ValueEnum::i16Value;
    }
    if ($i32Value !== null) {
      $this->i32Value = $i32Value;
      $this->_type = apache_thrift_protocol_detail_ValueEnum::i32Value;
    }
    if ($i64Value !== null) {
      $this->i64Value = $i64Value;
      $this->_type = apache_thrift_protocol_detail_ValueEnum::i64Value;
    }
    if ($floatValue !== null) {
      $this->floatValue = $floatValue;
      $this->_type = apache_thrift_protocol_detail_ValueEnum::floatValue;
    }
    if ($doubleValue !== null) {
      $this->doubleValue = $doubleValue;
      $this->_type = apache_thrift_protocol_detail_ValueEnum::doubleValue;
    }
    if ($stringValue !== null) {
      $this->stringValue = $stringValue;
      $this->_type = apache_thrift_protocol_detail_ValueEnum::stringValue;
    }
    if ($binaryValue !== null) {
      $this->binaryValue = $binaryValue;
      $this->_type = apache_thrift_protocol_detail_ValueEnum::binaryValue;
    }
    if ($objectValue !== null) {
      $this->objectValue = $objectValue;
      $this->_type = apache_thrift_protocol_detail_ValueEnum::objectValue;
    }
    if ($listValue !== null) {
      $this->listValue = $listValue;
      $this->_type = apache_thrift_protocol_detail_ValueEnum::listValue;
    }
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'boolValue'),
      Shapes::idx($shape, 'byteValue'),
      Shapes::idx($shape, 'i16Value'),
      Shapes::idx($shape, 'i32Value'),
      Shapes::idx($shape, 'i64Value'),
      Shapes::idx($shape, 'floatValue'),
      Shapes::idx($shape, 'doubleValue'),
      Shapes::idx($shape, 'stringValue'),
      Shapes::idx($shape, 'binaryValue'),
      Shapes::idx($shape, 'objectValue'),
      Shapes::idx($shape, 'listValue'),
    );
  }

  public function getName()[]: string {
    return 'Value';
  }

  public function getType()[]: apache_thrift_protocol_detail_ValueEnum {
    return $this->_type;
  }

  public function reset()[write_props]: void {
    switch ($this->_type) {
      case apache_thrift_protocol_detail_ValueEnum::boolValue:
        $this->boolValue = null;
        break;
      case apache_thrift_protocol_detail_ValueEnum::byteValue:
        $this->byteValue = null;
        break;
      case apache_thrift_protocol_detail_ValueEnum::i16Value:
        $this->i16Value = null;
        break;
      case apache_thrift_protocol_detail_ValueEnum::i32Value:
        $this->i32Value = null;
        break;
      case apache_thrift_protocol_detail_ValueEnum::i64Value:
        $this->i64Value = null;
        break;
      case apache_thrift_protocol_detail_ValueEnum::floatValue:
        $this->floatValue = null;
        break;
      case apache_thrift_protocol_detail_ValueEnum::doubleValue:
        $this->doubleValue = null;
        break;
      case apache_thrift_protocol_detail_ValueEnum::stringValue:
        $this->stringValue = null;
        break;
      case apache_thrift_protocol_detail_ValueEnum::binaryValue:
        $this->binaryValue = null;
        break;
      case apache_thrift_protocol_detail_ValueEnum::objectValue:
        $this->objectValue = null;
        break;
      case apache_thrift_protocol_detail_ValueEnum::listValue:
        $this->listValue = null;
        break;
      case apache_thrift_protocol_detail_ValueEnum::_EMPTY_:
        break;
    }
    $this->_type = apache_thrift_protocol_detail_ValueEnum::_EMPTY_;
  }

  public function set_boolValue(bool $boolValue)[write_props]: this {
    $this->reset();
    $this->_type = apache_thrift_protocol_detail_ValueEnum::boolValue;
    $this->boolValue = $boolValue;
    return $this;
  }

  public function get_boolValue()[]: ?bool {
    return $this->boolValue;
  }

  public function getx_boolValue()[]: bool {
    invariant(
      $this->_type === apache_thrift_protocol_detail_ValueEnum::boolValue,
      'get_boolValue called on an instance of Value whose current type is %s',
      (string)$this->_type,
    );
    return $this->boolValue as nonnull;
  }

  public function set_byteValue(int $byteValue)[write_props]: this {
    $this->reset();
    $this->_type = apache_thrift_protocol_detail_ValueEnum::byteValue;
    $this->byteValue = $byteValue;
    return $this;
  }

  public function get_byteValue()[]: ?int {
    return $this->byteValue;
  }

  public function getx_byteValue()[]: int {
    invariant(
      $this->_type === apache_thrift_protocol_detail_ValueEnum::byteValue,
      'get_byteValue called on an instance of Value whose current type is %s',
      (string)$this->_type,
    );
    return $this->byteValue as nonnull;
  }

  public function set_i16Value(int $i16Value)[write_props]: this {
    $this->reset();
    $this->_type = apache_thrift_protocol_detail_ValueEnum::i16Value;
    $this->i16Value = $i16Value;
    return $this;
  }

  public function get_i16Value()[]: ?int {
    return $this->i16Value;
  }

  public function getx_i16Value()[]: int {
    invariant(
      $this->_type === apache_thrift_protocol_detail_ValueEnum::i16Value,
      'get_i16Value called on an instance of Value whose current type is %s',
      (string)$this->_type,
    );
    return $this->i16Value as nonnull;
  }

  public function set_i32Value(int $i32Value)[write_props]: this {
    $this->reset();
    $this->_type = apache_thrift_protocol_detail_ValueEnum::i32Value;
    $this->i32Value = $i32Value;
    return $this;
  }

  public function get_i32Value()[]: ?int {
    return $this->i32Value;
  }

  public function getx_i32Value()[]: int {
    invariant(
      $this->_type === apache_thrift_protocol_detail_ValueEnum::i32Value,
      'get_i32Value called on an instance of Value whose current type is %s',
      (string)$this->_type,
    );
    return $this->i32Value as nonnull;
  }

  public function set_i64Value(int $i64Value)[write_props]: this {
    $this->reset();
    $this->_type = apache_thrift_protocol_detail_ValueEnum::i64Value;
    $this->i64Value = $i64Value;
    return $this;
  }

  public function get_i64Value()[]: ?int {
    return $this->i64Value;
  }

  public function getx_i64Value()[]: int {
    invariant(
      $this->_type === apache_thrift_protocol_detail_ValueEnum::i64Value,
      'get_i64Value called on an instance of Value whose current type is %s',
      (string)$this->_type,
    );
    return $this->i64Value as nonnull;
  }

  public function set_floatValue(float $floatValue)[write_props]: this {
    $this->reset();
    $this->_type = apache_thrift_protocol_detail_ValueEnum::floatValue;
    $this->floatValue = $floatValue;
    return $this;
  }

  public function get_floatValue()[]: ?float {
    return $this->floatValue;
  }

  public function getx_floatValue()[]: float {
    invariant(
      $this->_type === apache_thrift_protocol_detail_ValueEnum::floatValue,
      'get_floatValue called on an instance of Value whose current type is %s',
      (string)$this->_type,
    );
    return $this->floatValue as nonnull;
  }

  public function set_doubleValue(float $doubleValue)[write_props]: this {
    $this->reset();
    $this->_type = apache_thrift_protocol_detail_ValueEnum::doubleValue;
    $this->doubleValue = $doubleValue;
    return $this;
  }

  public function get_doubleValue()[]: ?float {
    return $this->doubleValue;
  }

  public function getx_doubleValue()[]: float {
    invariant(
      $this->_type === apache_thrift_protocol_detail_ValueEnum::doubleValue,
      'get_doubleValue called on an instance of Value whose current type is %s',
      (string)$this->_type,
    );
    return $this->doubleValue as nonnull;
  }

  public function set_stringValue(string $stringValue)[write_props]: this {
    $this->reset();
    $this->_type = apache_thrift_protocol_detail_ValueEnum::stringValue;
    $this->stringValue = $stringValue;
    return $this;
  }

  public function get_stringValue()[]: ?string {
    return $this->stringValue;
  }

  public function getx_stringValue()[]: string {
    invariant(
      $this->_type === apache_thrift_protocol_detail_ValueEnum::stringValue,
      'get_stringValue called on an instance of Value whose current type is %s',
      (string)$this->_type,
    );
    return $this->stringValue as nonnull;
  }

  public function set_binaryValue(string $binaryValue)[write_props]: this {
    $this->reset();
    $this->_type = apache_thrift_protocol_detail_ValueEnum::binaryValue;
    $this->binaryValue = $binaryValue;
    return $this;
  }

  public function get_binaryValue()[]: ?string {
    return $this->binaryValue;
  }

  public function getx_binaryValue()[]: string {
    invariant(
      $this->_type === apache_thrift_protocol_detail_ValueEnum::binaryValue,
      'get_binaryValue called on an instance of Value whose current type is %s',
      (string)$this->_type,
    );
    return $this->binaryValue as nonnull;
  }

  public function set_objectValue(apache_thrift_protocol_detail_Object $objectValue)[write_props]: this {
    $this->reset();
    $this->_type = apache_thrift_protocol_detail_ValueEnum::objectValue;
    $this->objectValue = $objectValue;
    return $this;
  }

  public function get_objectValue()[]: ?apache_thrift_protocol_detail_Object {
    return $this->objectValue;
  }

  public function getx_objectValue()[]: apache_thrift_protocol_detail_Object {
    invariant(
      $this->_type === apache_thrift_protocol_detail_ValueEnum::objectValue,
      'get_objectValue called on an instance of Value whose current type is %s',
      (string)$this->_type,
    );
    return $this->objectValue as nonnull;
  }

  public function set_listValue(Vector<apache_thrift_protocol_detail_Value> $listValue)[write_props]: this {
    $this->reset();
    $this->_type = apache_thrift_protocol_detail_ValueEnum::listValue;
    $this->listValue = $listValue;
    return $this;
  }

  public function get_listValue()[]: ?Vector<apache_thrift_protocol_detail_Value> {
    return $this->listValue;
  }

  public function getx_listValue()[]: Vector<apache_thrift_protocol_detail_Value> {
    invariant(
      $this->_type === apache_thrift_protocol_detail_ValueEnum::listValue,
      'get_listValue called on an instance of Value whose current type is %s',
      (string)$this->_type,
    );
    return $this->listValue as nonnull;
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "protocol_detail.Value",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "boolValue",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BYTE_TYPE,
                )
              ),
              "name" => "byteValue",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I16_TYPE,
                )
              ),
              "name" => "i16Value",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "i32Value",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                )
              ),
              "name" => "i64Value",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 6,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "protocol_detail.Float",
                      "underlyingType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_FLOAT_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "floatValue",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 7,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "protocol_detail.Double",
                      "underlyingType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_DOUBLE_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "doubleValue",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 8,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BINARY_TYPE,
                )
              ),
              "name" => "stringValue",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 9,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "standard.ByteBuffer",
                      "underlyingType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BINARY_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "binaryValue",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 11,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "protocol_detail.Object",
                    )
                  ),
                )
              ),
              "name" => "objectValue",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 14,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_list" => tmeta_ThriftListType::fromShape(
                    shape(
                      "valueType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "protocol_detail.Value",
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "listValue",
            )
          ),
        ],
        "is_union" => true,
      )
    );
  }

  public static function getAllStructuredAnnotations()[write_props]: \TStructAnnotations {
    return shape(
      'struct' => dict[
        '\facebook\thrift\annotation\cpp\Adapter' => \facebook\thrift\annotation\cpp\Adapter::fromShape(
          shape(
            "name" => "::apache::thrift::protocol::detail::ValueAdapter",
            "adaptedType" => "::apache::thrift::protocol::detail::ValueWrapper<::apache::thrift::protocol::detail::detail::Value>",
          )
        ),
        '\facebook\thrift\annotation\cpp\ScopedEnumAsUnionType' => \facebook\thrift\annotation\cpp\ScopedEnumAsUnionType::fromShape(
          shape(
          )
        ),
        '\facebook\thrift\annotation\cpp\UseOpEncode' => \facebook\thrift\annotation\cpp\UseOpEncode::fromShape(
          shape(
          )
        ),
      ],
      'fields' => dict[
        'binaryValue' => shape(
          'field' => dict[],
          'type' => dict[
            '\facebook\thrift\annotation\cpp\Type' => \facebook\thrift\annotation\cpp\Type::fromShape(
              shape(
                "name" => "folly::IOBuf",
              )
            ),
            '\facebook\thrift\annotation\java\Adapter' => \facebook\thrift\annotation\java\Adapter::fromShape(
              shape(
                "adapterClassName" => "com.facebook.thrift.adapter.common.UnpooledByteBufTypeAdapter",
                "typeClassName" => "io.netty.buffer.ByteBuf",
              )
            ),
          ],
        ),
        'objectValue' => shape(
          'field' => dict[],
          'type' => dict[
            '\facebook\thrift\annotation\cpp\Adapter' => \facebook\thrift\annotation\cpp\Adapter::fromShape(
              shape(
                "name" => "::apache::thrift::protocol::detail::ObjectAdapter",
                "adaptedType" => "::apache::thrift::protocol::detail::ObjectWrapper<::apache::thrift::protocol::detail::detail::Object>",
              )
            ),
            '\facebook\thrift\annotation\cpp\UseOpEncode' => \facebook\thrift\annotation\cpp\UseOpEncode::fromShape(
              shape(
              )
            ),
          ],
        ),
      ],
    );
  }

  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

}

