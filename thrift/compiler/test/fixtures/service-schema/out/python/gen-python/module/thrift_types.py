#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations

import folly.iobuf as _fbthrift_iobuf
import thrift.python.types as _fbthrift_python_types
import thrift.python.exceptions as _fbthrift_python_exceptions


import apache.thrift.type.schema.thrift_types


class CustomException(metaclass=_fbthrift_python_exceptions.GeneratedErrorMeta):
    _fbthrift_SPEC = (
        _fbthrift_python_types.FieldInfo(
            1,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "name",  # name
            "name",  # python name (from @python.Name annotation)
            _fbthrift_python_types.typeinfo_string,  # typeinfo
            None,  # default value
            None,  # adapter info
            False, # field type is primitive
        ),
        _fbthrift_python_types.FieldInfo(
            2,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "result",  # name
            "result",  # python name (from @python.Name annotation)
            lambda: _fbthrift_python_types.EnumTypeInfo(Result),  # typeinfo
            lambda: Result.SO_SO,  # default value
            None,  # adapter info
            False, # field type is primitive
        ),
    )

    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.CustomException"

    @staticmethod
    def __get_thrift_uri__():
        return None

    @staticmethod
    def __get_metadata__():
        return _fbthrift_metadata__exception_CustomException()

    def _to_python(self):
        return self

    def _to_py3(self):
        import importlib
        py3_types = importlib.import_module("module.types")
        import thrift.py3.converter
        return thrift.py3.converter.to_py3_struct(py3_types.CustomException, self)

    def _to_py_deprecated(self):
        import importlib
        import thrift.util.converter
        try:
            py_deprecated_types = importlib.import_module("module.ttypes")
            return thrift.util.converter.to_py_struct(py_deprecated_types.CustomException, self)
        except ModuleNotFoundError:
            py_asyncio_types = importlib.import_module("module.ttypes")
            return thrift.util.converter.to_py_struct(py_asyncio_types.CustomException, self)

# This unfortunately has to be down here to prevent circular imports
import module.thrift_metadata


class Result(_fbthrift_python_types.Enum, int):
    OK = 0
    SO_SO = 1
    GOOD = 2
    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.Result"

    @staticmethod
    def __get_thrift_uri__():
        return None

    @staticmethod
    def __get_metadata__():
        return module.thrift_metadata.gen_metadata_enum_Result()

    def _to_python(self):
        return self

    def _to_py3(self):
        import importlib
        py3_types = importlib.import_module("module.types")
        return py3_types.Result(self.value)

    def _to_py_deprecated(self):
        return self.value


_fbthrift_all_enums = [
    Result,
]

def _fbthrift_metadata__exception_CustomException():
    return module.thrift_metadata.gen_metadata_exception_CustomException()


_fbthrift_all_structs = [
    CustomException,
]
_fbthrift_python_types.fill_specs(*_fbthrift_all_structs)


_fbthrift_schema_3bd6b8a55f23bc3b = b"(\265/\375`\376 M\203\000\312\322841\020P\272\306\334\014\207\353\375\027iY\037\034\017\264$\\Xc;\213\227\000\263\240jS\356\210\340r\017>L\300\177\037\210x\014{\225X#.(\210v4\003:\003:\003?59.bQ\2273\275\013\023\262\030\307\011B\027\030\262\344\016\371\315\271$\260\200VJ\262\261\2161dg2\215\321\007\024Om\240\325{\233j:=\013\314Z){?\353d\315 \013\234\343-\\\261\002\250\002\226}\357M[S|9\211\216\221\0261%\004\231\346\020`\343U{V\276\200\007y(5\341\346\177e\254\243\034\277\340\024JR\307\247P\220\267\206\025xn\311d\333\003\202\240\204\221\304\303\353l\201u\252\371g\200Y\373\357j\367x=\353l@x\230\212\372B1\247\"\177\260\016c\030\350P1\357,\350\355\330\357\336\216\26275\200\366\326\223\213um\215h\200Xpt\227\362\270\201o\265\355]\243\2160\013\270/@\014u\231\336\210\022\356[\307%h\332\025\020\017\213\2645-\363\327<\r`\213.\254}\352\301!t\374\240\361\302\315\367\011\010s\260(\206\313\351@H\224\330\002\304\035\251\277\275\031\022\033U\340oW\234g\233\304n=\204\361\2146z\344\030q\314\322\376\372hn\310\375pQr\357\3628\233\276BF\006\024w\263\341q\3645Q\234\334%N\216B\277\240b\216\247\241\234\355\3655{\237\313\36732\"\2403w|~\006_\267\364\261\014p\021\017\265\2058\205\231\354X1\271\222\2474\026\323\341\375\241\276\027\271\037\241\273\024r\235\254\371\306&\360\354#\300\"\007\371UAv\360@\031\242\356\372\302c\377[5\\\024-\254\216$3\242B\237\017H\274N\370\010RL\234\021\222\326\250\330X\337\370B\335P\271?n\301\004\323\330C\251DG\231\346[*\204\350\327?f\271\301\013?\314P5\023\266\255p\036\343\027\337\262y\342\201\002\265\r/\001# 6m^pr\275&\256\252\314\345\202v;JL\000f\254\262\300\370M<\211>\265\230\373,\272\375\011\024\203\266\360\364|\333\322`>\316$Wp\177\016J\314\305\256\300E\374\266\003\254.\227G0\230\303\034L\316\325\360\323\343\213x\231M\2571\222\013\254Q\177\377b\373\322l<\322\037\352AQ\001{p\341@\332Y\343$\323\351\331`\241\275DdD\302\3501u#\304\300b6\306\373\256\230\"\324\0142U\202\036\232\323FB\263\221?\244\333\346\273\267\214\006\265#(\216F\224\221\233\362cz\325'\246\262%\232D\232\270\365\363Q>\227\303\360\270\273\276\256\307\341\360u\021\221Z<n\266\263\327h9\3460\031\021\021\372\215N\264v[_p\351;\011\"*b\317\351E\353\265\275\315\246\017\355l\267\333|\247\027\321\367y[\035\316\215VT\247\357\365\242\371\376v\313\327\342\354\242:\232{\336\256;\271\210{\000w\\c\025\274\335\374\014\201\314E\360\213\243\361\311\014\334\340\3441\277\3569\006\030\023H\005\360\320\277\352\261b\026S<\337Q\202dt\027K!\217\356\227\324' \232\234\220\341\251\ndFf\226,\017\027\213\216|>\\\364\234\337NW%'s\027\221\354\226\303\373\273\355,\276\306bF\0339\007\215\214gl\216o\203\310$\363\243\007;\333`qK\011V[\225\356\201-g#\177\334\305\311a\301dY\200\272\350\226\237\032\333\035\344\270\345\375\004\257\260hu\303p\322\370GK\336r6\226\370\235\372\261\304*I\025\205\333y=K\265Q\273E\274\362a\347)\242\240\251\017\236\327Q\225\243qU\303\000\324\013\014L\340D\016\242\361\376-\010\332\367\233|\023\005\305\204*]\315\230\300\376\262\023\026\253C_\340\316\016\205\221b\007v\213\370_\262\314\017\0027\036k\005\240q\030\240\263\211z\364\215-%\322\273\037$\351X\331\352oWk\227\254OA\374G\027\300,8\035\204HsU\027\365b\371E\014\221-i\226\237Yv\227\021D3h\202\243o\240\242\010\007\252^\325\005\nl\014u\027I\330@\374\030\232\275%\274\315\2620_@\0378\223zk\206\207\254\232\244\\\224\220\304#4=y\346\241t\224\306\357\312\241\340\021\227\251k\303\336q\352t\302\233\376\327k\202\253n\221\216\221a5\307\326,|\351\315\375\313l\214\325\333h\355X\363\004\2647\340@\332\353\277\271\332\301\2519\231\000\317X\312\312\250\365\342\255>\203\325=JF\310\207_D\301\232\024j/l\273/VI\244\003G\311\244\025S\225\335\263 \361.\237\307c\001\316\267\024\002\027(\034\2114\232T\352\010/&/u\254\374m\241&N0\376\204%\305\361\365@MjV\350\310\320\253\265U\004A\340\026\013\025\311'*\231\301\010\252\216\235uJ\265\343\362\020:s/\333\244\022\020\025/\320uW\207\222\0378q\2459/X\333C3(\375\"\027I\2076\204\270\253\320\353m\343\326,\217\310\004\317\334\241}\330\345*#%\375\030\301\023`25\313r\222\334\026y\321\212\3712\342\023\371\200M\227\240\314\224]\342m\026\326\201ZHy\010\344\026L\261R\252i\206GaKg/\004\024|\256\343\311\323\236\010z\245\264\344\306\017\365\207u\356\337\251\354\240#\016\276\346\3105f\305\r\273\227\004>\000\006\320\233\317\034N;$b\026\r\002\304\020\314\360\253v~f\266\243\340\334\032\0222`uP_D\276\366\n(1\214u\306\007\255w{\241\316vn\364\211\000\"~\032\265\362\3425\000B/\302\030\355\261\377\017\n\005\277[\017>\2423\244W\260kq\014\275\277w\343jZd\026\255\372\262\363J@j\310\271\302\243\361\r\370r\233\321\203\264F\016\264P\221B\240y\326\316\336-\303\324\030!\025\0227\206\\M^\326=\243*\352\245\316\222\337`\0352\314\013\003\240\342r_#(L5S\355\311\365u8\340\034\346y!?D\211\272\0329Yb\365tC\027\354&\223I\0335dD\236l@\375\004\001\274\204\267p\326\247\020I\r\334VIZO\267\022\251\224\244>\200\031[O`A(\022\002\263\376\242\270\313\252\274\334\223\305\255\265\374\324p.\207\303{\335=\377\332\351\363\235\002P\370\275\256\303\3675\367|\227\303=(\n\342\200\242\266\313\343\352fsj\237\367\330\305\327\0001\235\212\275A\000\211\231\n-\025\027\326\315\3535\230\371\242\371@\303\314X2R\3428\245\233\245\370\266:\347\256\224\366/T\227\203\244\322y\276\256\323\305f\262\274\355&\2739s\323\000\270i\277\335\353\372~\206\343wrs\343\"~I\262'>T\"\013\372\310\000\211\312)\346\203\344wP\253\302\371dR\240\202#\201\331\214t\235\320\017\004F4\304\001\375\355\301v\006a\254\230\n$7\236\320\221%\362\362\324\n\325\212JQ\203\206\306=\032O{\"a1\010\017\027\271\021\312\334\244;\224@p}\0375r.|\345\227G\032\034>\254r\256\262/\376u\322W78|\362ka\304\013K\375\310D\356\247\320b\254I\302a\2627\303H\313\327\304\371\265\346Ud\211m\346\265\220\262\241H\302\275\010\013\267\270\037Q\335s>s\243\364\320/\220\207\320.b\3030\225\035Y\215U\010|kux\367Y7\365\003\265e\304\325\265\371\216>\036`\275\263\223\324\341\375\000u\261\256\317\2453FR#qr;\370\326\204\336-s\223\307\265\\)$O!\302Bf\037o\342\003\261\032Rb\314\223\227$:\333\344C\2539\276\371G\254\3009D\227\366\257n\335\352[\317\324\214\322\017\362m\375BB\257\242\373#\242\204\357D$\006\032\357\303NF\220%\204\003\005\200H\370\341m-\370\342\375\035\337\005\006\030\2512\024\261\223\313\320<\002\001\026\303\263\330M\002\332$e\231*\242\263\213\276T\363\033\372J8\341s\2350FOB\211x\005X\211\361^\371(:\347\016\023\372\006#A\202\201\214QhEH?\016I\302\035\221#\030t\302~)8\2412\375\370\3605\237\354\264\327\001\266\032\370\030\360\003\246\312\210\301\357\341\002\350r\263\0030#\222\006'\302Dli\230?\011yX:d7\256\261\023C5w@\316\213\365t0\272-\236\376\264\354\304\000C]|\306\321d\376R+x\364\221\355\312\255\217<\266\202\363R\011\3628M\200\267i_W\3153\0063d5&\020\371\357R\205\254\332\344\331\300i\223@\220\246B\367\372<M\257\272\347\\\016\0270\247\370\304\311\007 \240\267S\312DD8.b\3337\005\333\270\035\034!>U|\247xj\340\344?\023\027\356\311\001\205!2\303\035z\227\234\222\010\366Pdbr\324\014\011N\210\315q)\305xr\207\017\343E\313\200m`\355R\342Q\3254\032\004\014\371\"l\344\010\265\376\010\027\246z\305/\003X%\270y9S\317\"\243!=\272\244CC'\031\264*\332?:\344E\335\027\325\205\370\032\310J\034=\311\213\256OBa\005\026\023\010U\204\023\354\210.\320\\#\373Bb\250h\3509D\362\003\036\024t\364-$#\374#v\243,\330\255~i\243\201HlY\202\307\010>\262\034\3361\253\261\327m\025\2448y\212y-_\313 \220\313\331*}*f\356\267\004zd\"\035\257[\260\242\226\216\327\353L\030\346_Yk\323\247y\r\222\370Z2\006\341p8\\\236\357kk\270\312\236|g\303=X\213\327\351mS0h272\370>\377\241D\357'?\253h\2400\375-^_\237\355k2\346\246\360\221\nM8l\264\266\236\257\307]h!\024\032\2413:\\w\303\335*\346&\256:\274mk\257J\342p\222\201\213\276\273\271\353\356\254\0303Z.\034\016\253\220\303\016\322\351*\024r8\315E\226\346\n_\245\233\316\341\372\273\215\276oaqH\011\013\243<8a\224\255DL\362gx\013\344}\022d\264\322\200n\207\320\0143\252TS\014,a\214\303\223\335\3131\365\202\"\312\244\365\260\010\263\177f\330\030\241\376oD\007\260!\301zj\021Z'\202p\302\024i\361\363]\276_\006\263Y9H\345*\370\302R\310\224\376\ru\200PG\265@Z\035\013BKz\260Z\244\3450\217\031\036o\327\343\344,eq\320\263\001<\242\037\326\023f\311\326\330\220.X\325\017\267\350}\025\205\205jSA\324LyiI\360\377\241:\313\367\271\330F&\247\214\223\345\324\246\260\323\327REM:n\270o\017\226\034\200\274\201\014\222\003\332\332i\336}4\0330E\360\037xn\014\340P\266\\hy)~\332\017\227\035\000\010s\350\r\242\250J\352P\223\263\276[\327\310\0320\013\310\013\\<\246\304\363Zn?\331,\001\235j\215\025\350\001S\233\245\272^\312K\203w\253x\202\267\306\036,\325\231\007\007H\207\010\247\276s\265w\226~\\\304\253\253\211\240/l`\300\230?\314\324\336\316\247\306\347\221h8\346\245H\253'H\237\351B\303\260-\361\231VuO\236\2579\023\260hzpH\205\256\355\017D\352\014\325\322\371\001G\216\210\245\217(\263\373\361\020\324T\347\"\2302Y\201rK\233H\276\226\220tD\005w\307\331\346\267S's\321\014+\255}3\355 \346\354\231\366\225\261;\343H$\254\243C(\326\367T\230\202\356#\332z\306\357\240p\224\011Q\224\3157\300\226\322xC\244\226Z\013.\202\361$\011Y^\203\240X\006\037\260\223\310\204\345Q\210\334\010\212\2052>V\231X_\341v\027\320Wp\022\263\261\324\355\\\016\237\250\241\315\3578;^\217\317\345b\030\030U[\250D\370\206\302RuG\345\225ZM>\317-wj\227\007F\025\306\367T\310\023\211\257\300_17\016\252\353\314\201\211\304\207\354yE\357\014\370>)^\300\304:\204\250b\251\335\335=\004]\325_JN\206\314\0007%4W\202,V\340\232\r\371>&\317\252A\374\252\022\321lo\231\220\242\234\013\377\203k\217\023\357\315\222\026\021z\307z\346\216\265\376p\345p\316\215\216M\032\334=\257sIQ9\265\211\320\332\244\322VEqwQ\334\373\035Gk\222\371\321q\021\367\275\r\271na\035Y\214\200ML+\002\345e~\316a \312,.y\203\317\026m\313`\347\022\350/9\321\351\002\rd\000d\022\240>7\246$\021\373XG1|\232\020@T\305M\306\003\201t\250\26113\"\"\"\"\242 IQ\n\351\261\010!H2\306\254\354\0062I\014\305X\020#\021\202\0101\222\020\342\014\031\022\011\306\024\024\245\2065\334\234^\317\357\017p\010\010\345\322\206\234U\036\232\\\305W|\335\304H\030\2773\226\353\025\225\263\0224\310\306Z\344\360*\250\001\003J@\316\276?\300 1\323A\345\375\240\264\3448\020\251\362_\36746*\007Qcl\\\236\323WPK\377\005\0208\024^\226\303\245#\205\366d\362K\245`\350~2@\315D\320\010t\350\037\2070>K\026\200\267\377\337\230\023\030\326\374\320\201,\377V<>j?\353,~\303\260\367R1B6@\254\224f\035zSd\2612\372^\224j\213Q\371n|j\351q\207\215W=\340\225\362S\254\214\2214\320\220\357\230k>\"\020\266c\334B\357\303\273\212\334_\002\321\245\201;d \372#\212Q\021\374l\247\230\2754P\202\016q`D\343T\014~\222\315\301O\312@\253\n\003cF\350\363\034\257\344\361\030$\212\2422\204j\216P\006\000w\366E\245\353R\331\300w\205*\023\225.F\366iF\330Qu\002\025\323\357\003@1T\230&\363T\330\226\003\340\247\306\270\006%\327\231'Sh6&\263\013\014& \202`\005&~\303\026<4U\340A\370\r\272\352{!\201\221\240\304v\341P\305\361\205\212\3506\010\356e\272\005A8\201\r\201\360\223\rJ\3024/\"\233\002\253\2070\210\242\202\344\331\301\370F\341\212\336X\006Wh\003\305M4+\017\313\312\252q\360dj\311\023\234\240,\300wx`\355\200\n\376`\354vU\357\300\235\275\253\021\274'2\024]A\022\361\264^\332\332\016\266\314\261_\302\003\220\3567\200\310O\014\017Z\276\221\221l\216\245^q\273L&L\215\001\036\355sjH0\313\002\212k:\335\352i\256\250Og\3077\261\250nJ\202\374\220\020r-4\305c~~\212\011o;\210\225jAe\"pW\030#\005If\351PL[\234Q\375\240clc,+\316\242<>G\373f\030!+\234tS4\215\001\220\254\215e\263\235%V\275\364\352O\246\300|\004$ \324\250Q\307-u\370^\200\363\224\222N\256\365\004j\256\257H\322{\344>\322\217\244\271B\250\303\224_\225\204\033X\230\277<\017\027S\316\037\351z\255\340\216}_\265}\265&\243\335\020\0054\275\007\207G&\026\214\363\363\030\210X=\232\347i\006%W\357B\312\207e\234F\314\264y=\367y:\232!.\327W\301I\3315\002\333\250h \341\363\rLY\313\r|M\303b&\3767\3647\210\230Y\216~\371I\304\300\276\310\232=\244\035\356\345\376\232V+\307eN;\005:\0318pB\215\322\240\021\n|\311Y\327\246\313\325\311\363L\257v5\032\0275,N3a\255\200\265T\003\37264\030\251u\\\3236f\347zG\000\313`\213l*l^\374\265d\026q\266\0310\244\226\310\006\223M 1\331\221\\\002o\326\312%\013\274\235\221\212\244\216\027X({\272\0273\346\264\"\313\0265\000V\011M\233\247\246HJ\312\037"



class _fbthrift_PrimitivesService_init_args(metaclass=_fbthrift_python_types.StructMeta):
    _fbthrift_SPEC = (
        _fbthrift_python_types.FieldInfo(
            1,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "param0",  # name
            "param0",  # python name (from @python.Name annotation)
            _fbthrift_python_types.typeinfo_i64,  # typeinfo
            None,  # default value
            None,  # adapter info
            True, # field type is primitive
        ),
        _fbthrift_python_types.FieldInfo(
            2,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "param1",  # name
            "param1",  # python name (from @python.Name annotation)
            _fbthrift_python_types.typeinfo_i64,  # typeinfo
            None,  # default value
            None,  # adapter info
            True, # field type is primitive
        ),
    )


class _fbthrift_PrimitivesService_init_result(metaclass=_fbthrift_python_types.StructMeta):
    _fbthrift_SPEC = (
        _fbthrift_python_types.FieldInfo(
            0,  # id
            _fbthrift_python_types.FieldQualifier.Optional, # qualifier
            "success",  # name
            "success", # name
            _fbthrift_python_types.typeinfo_i64,  # typeinfo
            None,  # default value
            None,  # adapter info
            False, # field type is primitive
        ),
    )


class _fbthrift_PrimitivesService_method_that_throws_args(metaclass=_fbthrift_python_types.StructMeta):
    _fbthrift_SPEC = (
    )


class _fbthrift_PrimitivesService_method_that_throws_result(metaclass=_fbthrift_python_types.StructMeta):
    _fbthrift_SPEC = (
        _fbthrift_python_types.FieldInfo(
            0,  # id
            _fbthrift_python_types.FieldQualifier.Optional, # qualifier
            "success",  # name
            "success", # name
            lambda: _fbthrift_python_types.EnumTypeInfo(Result),  # typeinfo
            None,  # default value
            None,  # adapter info
            False, # field type is primitive
        ),
        _fbthrift_python_types.FieldInfo(
            1,  # id
            _fbthrift_python_types.FieldQualifier.Optional, # qualifier
            "e",  # name
            "e",  # python name (from @python.Name annotation)
            lambda: _fbthrift_python_types.StructTypeInfo(CustomException),  # typeinfo
            None,  # default value
            None,  # adapter info
            False, # field type is primitive
        ),
    )


class _fbthrift_PrimitivesService_return_void_method_args(metaclass=_fbthrift_python_types.StructMeta):
    _fbthrift_SPEC = (
        _fbthrift_python_types.FieldInfo(
            1,  # id
            _fbthrift_python_types.FieldQualifier.Unqualified, # qualifier
            "id",  # name
            "id",  # python name (from @python.Name annotation)
            _fbthrift_python_types.typeinfo_i64,  # typeinfo
            None,  # default value
            None,  # adapter info
            True, # field type is primitive
        ),
    )


class _fbthrift_PrimitivesService_return_void_method_result(metaclass=_fbthrift_python_types.StructMeta):
    _fbthrift_SPEC = (
    )



_fbthrift_python_types.fill_specs(
    _fbthrift_PrimitivesService_init_args,
    _fbthrift_PrimitivesService_init_result,
    _fbthrift_PrimitivesService_method_that_throws_args,
    _fbthrift_PrimitivesService_method_that_throws_result,
    _fbthrift_PrimitivesService_return_void_method_args,
    _fbthrift_PrimitivesService_return_void_method_result,
    
)
