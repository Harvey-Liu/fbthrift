#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations


import typing as _typing

import folly.iobuf as _fbthrift_iobuf
import thrift.python.types as _fbthrift_python_types
import thrift.python.exceptions as _fbthrift_python_exceptions


class _fbthrift_compatible_with_TemplateLists:
    pass


class TemplateLists(_fbthrift_python_types.Struct, _fbthrift_compatible_with_TemplateLists):
    std_string: _typing.Final[_typing.Optional[_typing.Sequence[str]]] = ...
    deque_string: _typing.Final[_typing.Sequence[bytes]] = ...
    small_vector_iobuf: _typing.Final[_typing.Sequence[_fbthrift_iobuf.IOBuf]] = ...
    nested_small_vector: _typing.Final[_typing.Sequence[_typing.Sequence[str]]] = ...
    small_vector_tensor: _typing.Final[_typing.Sequence[_typing.Sequence[_typing.Sequence[str]]]] = ...
    def __init__(
        self, *,
        std_string: _typing.Optional[_typing.Sequence[str]]=...,
        deque_string: _typing.Optional[_typing.Sequence[bytes]]=...,
        small_vector_iobuf: _typing.Optional[_typing.Sequence[_fbthrift_iobuf.IOBuf]]=...,
        nested_small_vector: _typing.Optional[_typing.Sequence[_typing.Sequence[str]]]=...,
        small_vector_tensor: _typing.Optional[_typing.Sequence[_typing.Sequence[_typing.Sequence[str]]]]=...
    ) -> None: ...

    def __call__(
        self, *,
        std_string: _typing.Optional[_typing.Sequence[str]]=...,
        deque_string: _typing.Optional[_typing.Sequence[bytes]]=...,
        small_vector_iobuf: _typing.Optional[_typing.Sequence[_fbthrift_iobuf.IOBuf]]=...,
        nested_small_vector: _typing.Optional[_typing.Sequence[_typing.Sequence[str]]]=...,
        small_vector_tensor: _typing.Optional[_typing.Sequence[_typing.Sequence[_typing.Sequence[str]]]]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[_typing.Sequence[str], _typing.Sequence[bytes], _typing.Sequence[_fbthrift_iobuf.IOBuf], _typing.Sequence[_typing.Sequence[str]], _typing.Sequence[_typing.Sequence[_typing.Sequence[str]]]]]]: ...
    def _to_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "test.fixtures.python_capi.containers.types.TemplateLists": ...  # type: ignore
    def _to_py_deprecated(self) -> "containers.ttypes.TemplateLists": ...  # type: ignore

IOBuf = _fbthrift_iobuf.IOBuf
small_vector_iobuf = _typing.List[_fbthrift_iobuf.IOBuf]
fbvector_string = _typing.List[str]
fbvector_fbvector_string = _typing.List[_typing.Sequence[str]]
