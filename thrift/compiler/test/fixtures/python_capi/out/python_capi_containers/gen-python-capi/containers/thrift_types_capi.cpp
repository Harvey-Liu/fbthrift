
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#include <folly/python/import.h>
#include <thrift/lib/python/capi/iobuf.h>
#include <thrift/lib/python/types.h>

#include <thrift/compiler/test/fixtures/python_capi/gen-python-capi/containers/thrift_types_api.h>
#include <thrift/compiler/test/fixtures/python_capi/gen-python-capi/containers/thrift_types_capi.h>


namespace apache {
namespace thrift {
namespace python {
namespace capi {
namespace {
bool ensure_module_imported() {
  static ::folly::python::import_cache_nocapture import((
      ::import_test__fixtures__python_capi__containers__thrift_types_capi));
  return import();
}
  static constexpr std::int16_t _fbthrift__TemplateLists__tuple_pos[5] = {
    1, 2, 3, 4, 5
  };
} // namespace

ExtractorResult<::test::fixtures::python_capi::TemplateLists>
Extractor<::test::fixtures::python_capi::TemplateLists>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a TemplateLists");
      }
      return extractorError<::test::fixtures::python_capi::TemplateLists>(
          "Marshal error: TemplateLists");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::python_capi::TemplateLists>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::python_capi::TemplateLists>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::python_capi::TemplateLists>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::python_capi::TemplateLists cpp;
  std::optional<std::string_view> error;
  Extractor<list<Bytes, std::vector<native_t<Bytes>>>>{}.extractInto(
      cpp.std_string_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__TemplateLists__tuple_pos[0]),
      error);
  Extractor<list<Bytes, std::deque<native_t<Bytes>>>>{}.extractInto(
      cpp.deque_string_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__TemplateLists__tuple_pos[1]),
      error);
  Extractor<list<folly::IOBuf, folly::small_vector<native_t<folly::IOBuf>>>>{}.extractInto(
      cpp.small_vector_iobuf_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__TemplateLists__tuple_pos[2]),
      error);
  Extractor<list<list<Bytes, folly::fbvector<native_t<Bytes>>>, folly::small_vector<native_t<list<Bytes, folly::fbvector<native_t<Bytes>>>>>>>{}.extractInto(
      cpp.nested_small_vector_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__TemplateLists__tuple_pos[3]),
      error);
  Extractor<list<list<list<Bytes, folly::fbvector<native_t<Bytes>>>, folly::fbvector<native_t<list<Bytes, folly::fbvector<native_t<Bytes>>>>>>, folly::fbvector<native_t<list<list<Bytes, folly::fbvector<native_t<Bytes>>>, folly::fbvector<native_t<list<Bytes, folly::fbvector<native_t<Bytes>>>>>>>>>>{}.extractInto(
      cpp.small_vector_tensor_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__TemplateLists__tuple_pos[4]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::python_capi::TemplateLists>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.python_capi.containers import error");
  }
  int result =
      can_extract__test__fixtures__python_capi__containers__TemplateLists(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: TemplateLists");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::python_capi::TemplateLists>::operator()(
    const ::test::fixtures::python_capi::TemplateLists& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TemplateLists>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__python_capi__containers__TemplateLists(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TemplateLists>>::operator()(
    [[maybe_unused]] const ::test::fixtures::python_capi::TemplateLists& val) {
  StrongRef fbthrift_data(createStructTuple(5));
  StrongRef _fbthrift__std_string(
    Constructor<list<Bytes, std::vector<native_t<Bytes>>>>{}
    .constructFrom(val.std_string_ref()));
  if (_fbthrift__std_string.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__TemplateLists__tuple_pos[0],
      Py_None);
  } else
  if (!_fbthrift__std_string ||
      setStructField(
          *fbthrift_data,
          _fbthrift__TemplateLists__tuple_pos[0],
          *_fbthrift__std_string) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__deque_string(
    Constructor<list<Bytes, std::deque<native_t<Bytes>>>>{}
    .constructFrom(val.deque_string_ref()));
  if (!_fbthrift__deque_string ||
      setStructField(
          *fbthrift_data,
          _fbthrift__TemplateLists__tuple_pos[1],
          *_fbthrift__deque_string) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__small_vector_iobuf(
    Constructor<list<folly::IOBuf, folly::small_vector<native_t<folly::IOBuf>>>>{}
    .constructFrom(val.small_vector_iobuf_ref()));
  if (!_fbthrift__small_vector_iobuf ||
      setStructField(
          *fbthrift_data,
          _fbthrift__TemplateLists__tuple_pos[2],
          *_fbthrift__small_vector_iobuf) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__nested_small_vector(
    Constructor<list<list<Bytes, folly::fbvector<native_t<Bytes>>>, folly::small_vector<native_t<list<Bytes, folly::fbvector<native_t<Bytes>>>>>>>{}
    .constructFrom(val.nested_small_vector_ref()));
  if (!_fbthrift__nested_small_vector ||
      setStructField(
          *fbthrift_data,
          _fbthrift__TemplateLists__tuple_pos[3],
          *_fbthrift__nested_small_vector) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__small_vector_tensor(
    Constructor<list<list<list<Bytes, folly::fbvector<native_t<Bytes>>>, folly::fbvector<native_t<list<Bytes, folly::fbvector<native_t<Bytes>>>>>>, folly::fbvector<native_t<list<list<Bytes, folly::fbvector<native_t<Bytes>>>, folly::fbvector<native_t<list<Bytes, folly::fbvector<native_t<Bytes>>>>>>>>>>{}
    .constructFrom(val.small_vector_tensor_ref()));
  if (!_fbthrift__small_vector_tensor ||
      setStructField(
          *fbthrift_data,
          _fbthrift__TemplateLists__tuple_pos[4],
          *_fbthrift__small_vector_tensor) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


} // namespace capi
} // namespace python
} // namespace thrift
} // namespace apache
