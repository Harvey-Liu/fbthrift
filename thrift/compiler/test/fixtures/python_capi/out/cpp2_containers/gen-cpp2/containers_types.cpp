/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/python_capi/src/containers.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/python_capi/gen-cpp2/containers_types.h"
#include "thrift/compiler/test/fixtures/python_capi/gen-cpp2/containers_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/python_capi/gen-cpp2/containers_data.h"


namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::python_capi::TemplateLists>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::python_capi::TemplateLists>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test::fixtures::python_capi {

const char* TemplateLists::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/TemplateLists";
}

std::string_view TemplateLists::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<TemplateLists>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view TemplateLists::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<TemplateLists>::name;
}

TemplateLists::TemplateLists(const TemplateLists&) = default;
TemplateLists& TemplateLists::operator=(const TemplateLists&) = default;
TemplateLists::TemplateLists() {
}


TemplateLists::~TemplateLists() {}

TemplateLists::TemplateLists([[maybe_unused]] TemplateLists&& other) noexcept :
    __fbthrift_field_std_string(std::move(other.__fbthrift_field_std_string)),
    __fbthrift_field_deque_string(std::move(other.__fbthrift_field_deque_string)),
    __fbthrift_field_small_vector_iobuf(std::move(other.__fbthrift_field_small_vector_iobuf)),
    __fbthrift_field_nested_small_vector(std::move(other.__fbthrift_field_nested_small_vector)),
    __fbthrift_field_small_vector_tensor(std::move(other.__fbthrift_field_small_vector_tensor)),
    __isset(other.__isset) {
}

TemplateLists& TemplateLists::operator=([[maybe_unused]] TemplateLists&& other) noexcept {
    this->__fbthrift_field_std_string = std::move(other.__fbthrift_field_std_string);
    this->__fbthrift_field_deque_string = std::move(other.__fbthrift_field_deque_string);
    this->__fbthrift_field_small_vector_iobuf = std::move(other.__fbthrift_field_small_vector_iobuf);
    this->__fbthrift_field_nested_small_vector = std::move(other.__fbthrift_field_nested_small_vector);
    this->__fbthrift_field_small_vector_tensor = std::move(other.__fbthrift_field_small_vector_tensor);
    __isset = other.__isset;
    return *this;
}


TemplateLists::TemplateLists(apache::thrift::FragileConstructor, std::vector<::std::string> std_string__arg, std::deque<::std::string> deque_string__arg, ::test::fixtures::python_capi::small_vector_iobuf small_vector_iobuf__arg, folly::small_vector<::test::fixtures::python_capi::fbvector_string> nested_small_vector__arg, folly::fbvector<::test::fixtures::python_capi::fbvector_fbvector_string> small_vector_tensor__arg) :
    __fbthrift_field_std_string(std::move(std_string__arg)),
    __fbthrift_field_deque_string(std::move(deque_string__arg)),
    __fbthrift_field_small_vector_iobuf(std::move(small_vector_iobuf__arg)),
    __fbthrift_field_nested_small_vector(std::move(nested_small_vector__arg)),
    __fbthrift_field_small_vector_tensor(std::move(small_vector_tensor__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
}


void TemplateLists::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_std_string.clear();
  this->__fbthrift_field_deque_string.clear();
  this->__fbthrift_field_small_vector_iobuf.clear();
  this->__fbthrift_field_nested_small_vector.clear();
  this->__fbthrift_field_small_vector_tensor.clear();
  __isset = {};
}

void TemplateLists::__fbthrift_clear_terse_fields() {
}

bool TemplateLists::__fbthrift_is_empty() const {
  return false;
}



const std::vector<::std::string>* TemplateLists::get_std_string() const& {
  return std_string_ref().has_value() ? std::addressof(__fbthrift_field_std_string) : nullptr;
}

std::vector<::std::string>* TemplateLists::get_std_string() & {
  return std_string_ref().has_value() ? std::addressof(__fbthrift_field_std_string) : nullptr;
}

const std::deque<::std::string>& TemplateLists::get_deque_string() const& {
  return __fbthrift_field_deque_string;
}

std::deque<::std::string> TemplateLists::get_deque_string() && {
  return std::move(__fbthrift_field_deque_string);
}

const ::test::fixtures::python_capi::small_vector_iobuf& TemplateLists::get_small_vector_iobuf() const& {
  return __fbthrift_field_small_vector_iobuf;
}

::test::fixtures::python_capi::small_vector_iobuf TemplateLists::get_small_vector_iobuf() && {
  return std::move(__fbthrift_field_small_vector_iobuf);
}

const folly::small_vector<::test::fixtures::python_capi::fbvector_string>& TemplateLists::get_nested_small_vector() const& {
  return __fbthrift_field_nested_small_vector;
}

folly::small_vector<::test::fixtures::python_capi::fbvector_string> TemplateLists::get_nested_small_vector() && {
  return std::move(__fbthrift_field_nested_small_vector);
}

const folly::fbvector<::test::fixtures::python_capi::fbvector_fbvector_string>& TemplateLists::get_small_vector_tensor() const& {
  return __fbthrift_field_small_vector_tensor;
}

folly::fbvector<::test::fixtures::python_capi::fbvector_fbvector_string> TemplateLists::get_small_vector_tensor() && {
  return std::move(__fbthrift_field_small_vector_tensor);
}


void swap([[maybe_unused]] TemplateLists& a, [[maybe_unused]] TemplateLists& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_std_string, b.__fbthrift_field_std_string);
  swap(a.__fbthrift_field_deque_string, b.__fbthrift_field_deque_string);
  swap(a.__fbthrift_field_small_vector_iobuf, b.__fbthrift_field_small_vector_iobuf);
  swap(a.__fbthrift_field_nested_small_vector, b.__fbthrift_field_nested_small_vector);
  swap(a.__fbthrift_field_small_vector_tensor, b.__fbthrift_field_small_vector_tensor);
  swap(a.__isset, b.__isset);
}

template void TemplateLists::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t TemplateLists::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t TemplateLists::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t TemplateLists::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void TemplateLists::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TemplateLists::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TemplateLists::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TemplateLists::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // namespace test::fixtures::python_capi

namespace test::fixtures::python_capi { namespace {
[[maybe_unused]] FOLLY_ERASE void validateAdapters() {
}
}} // namespace test::fixtures::python_capi
namespace apache::thrift::detail::annotation {
}
