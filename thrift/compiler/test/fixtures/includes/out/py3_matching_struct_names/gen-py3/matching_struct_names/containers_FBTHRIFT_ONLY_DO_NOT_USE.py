#
# Autogenerated by Thrift for thrift/compiler/test/fixtures/includes/src/matching_struct_names.thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

import thrift.py3.types
import importlib
from collections.abc import Sequence

"""
    This is a helper module to define py3 container types.
    All types defined here are re-exported in the parent `.types` module.
    Only `import` types defined here via the parent `.types` module.
    If you `import` them directly from here, you will get nasty import errors.
"""

import matching_struct_names.types as _matching_struct_names_types
import module.types as _module_types

def get_types_reflection():
    return importlib.import_module(
        "matching_struct_names.types_reflection"
    )

__all__ = []

class List__MyStruct(thrift.py3.types.List):
    def __init__(self, items=None, private_ctor_token=None) -> None:
        if private_ctor_token is thrift.py3.types._fbthrift_list_private_ctor:
            _py_obj = items
        elif isinstance(items, List__MyStruct):
            _py_obj = list(items)
        elif items:
            check_method = List__MyStruct.check_container_item
            _py_obj = [check_method(item) for item in items]
        else:
            _py_obj = []

        super().__init__(_py_obj, List__MyStruct)

    @staticmethod
    def check_container_item(item:object):
        if not (
            isinstance(item, _matching_struct_names_types.MyStruct)
        ):
            raise TypeError(f"{item!r} is not of type _matching_struct_names_types.MyStruct")
        return item

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__List__MyStruct()


Sequence.register(List__MyStruct)
__all__.append('List__MyStruct')

class List__List__MyStruct(thrift.py3.types.List):
    def __init__(self, items=None, private_ctor_token=None) -> None:
        if private_ctor_token is thrift.py3.types._fbthrift_list_private_ctor:
            _py_obj = items
        elif isinstance(items, List__List__MyStruct):
            _py_obj = list(items)
        elif items:
            check_method = List__List__MyStruct.check_container_item
            _py_obj = [check_method(item) for item in items]
        else:
            _py_obj = []

        super().__init__(_py_obj, List__List__MyStruct)

    @staticmethod
    def check_container_item(item:object):
        if item is None:
            raise TypeError("None is not of the type _typing.Sequence[_matching_struct_names_types.MyStruct]")
        if not isinstance(item, _matching_struct_names_types.List__MyStruct):
            item = _matching_struct_names_types.List__MyStruct(item)
        return item

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__List__List__MyStruct()


Sequence.register(List__List__MyStruct)
__all__.append('List__List__MyStruct')

class List__module_MyStruct(thrift.py3.types.List):
    def __init__(self, items=None, private_ctor_token=None) -> None:
        if private_ctor_token is thrift.py3.types._fbthrift_list_private_ctor:
            _py_obj = items
        elif isinstance(items, List__module_MyStruct):
            _py_obj = list(items)
        elif items:
            check_method = List__module_MyStruct.check_container_item
            _py_obj = [check_method(item) for item in items]
        else:
            _py_obj = []

        super().__init__(_py_obj, List__module_MyStruct)

    @staticmethod
    def check_container_item(item:object):
        if not (
            isinstance(item, _module_types.MyStruct)
        ):
            raise TypeError(f"{item!r} is not of type _module_types.MyStruct")
        return item

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__List__module_MyStruct()


Sequence.register(List__module_MyStruct)
__all__.append('List__module_MyStruct')

class List__List__module_MyStruct(thrift.py3.types.List):
    def __init__(self, items=None, private_ctor_token=None) -> None:
        if private_ctor_token is thrift.py3.types._fbthrift_list_private_ctor:
            _py_obj = items
        elif isinstance(items, List__List__module_MyStruct):
            _py_obj = list(items)
        elif items:
            check_method = List__List__module_MyStruct.check_container_item
            _py_obj = [check_method(item) for item in items]
        else:
            _py_obj = []

        super().__init__(_py_obj, List__List__module_MyStruct)

    @staticmethod
    def check_container_item(item:object):
        if item is None:
            raise TypeError("None is not of the type _typing.Sequence[_module_types.MyStruct]")
        if not isinstance(item, _matching_struct_names_types.List__module_MyStruct):
            item = _matching_struct_names_types.List__module_MyStruct(item)
        return item

    @staticmethod
    def __get_reflection__():
        return get_types_reflection().get_reflection__List__List__module_MyStruct()


Sequence.register(List__List__module_MyStruct)
__all__.append('List__List__module_MyStruct')

