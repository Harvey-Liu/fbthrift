/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/constants/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_constants_h.h>

#include "thrift/compiler/test/fixtures/constants/gen-cpp2/module_types.h"

namespace cpp2 {
namespace module_constants {

  constexpr ::std::int32_t const myInt_ = static_cast<::std::int32_t>(1337);
  constexpr ::std::int32_t myInt() {
    return myInt_;
  }

  constexpr char const * const name_ = "Mark Zuckerberg";
  constexpr char const * name() {
    return name_;
  }

  constexpr char const * const multi_line_string_ = "This\nis a\nmulti line string.\n";
  constexpr char const * multi_line_string() {
    return multi_line_string_;
  }

  ::std::vector<::std::map<::std::string, ::std::int32_t>> const& states();

  constexpr double const x_ = static_cast<double>(1);
  constexpr double x() {
    return x_;
  }

  constexpr double const y_ = static_cast<double>(1000000);
  constexpr double y() {
    return y_;
  }

  constexpr double const z_ = static_cast<double>(1000000000);
  constexpr double z() {
    return z_;
  }

  constexpr double const zeroDoubleValue_ = static_cast<double>(0);
  constexpr double zeroDoubleValue() {
    return zeroDoubleValue_;
  }

  constexpr double const longDoubleValue_ = static_cast<double>(2.59961000990301e-05);
  constexpr double longDoubleValue() {
    return longDoubleValue_;
  }

  constexpr std::string_view bin_{"a\000z", 3};
  constexpr std::string_view bin() {
    return bin_;
  }

  constexpr ::cpp2::MyCompany const my_company_ =  ::cpp2::MyCompany::FACEBOOK;
  constexpr ::cpp2::MyCompany my_company() {
    return my_company_;
  }

  constexpr char const * const foo_ = "foo";
  constexpr char const * foo() {
    return foo_;
  }

  constexpr ::cpp2::MyIntIdentifier const bar_ = static_cast<::cpp2::MyIntIdentifier>(42);
  constexpr ::cpp2::MyIntIdentifier bar() {
    return bar_;
  }

  ::cpp2::MyMapIdentifier const& mymap();

  ::cpp2::Internship const& instagram();

  ::cpp2::Internship const& partial_const();

  ::std::vector<::cpp2::Range> const& kRanges();

  ::std::vector<::cpp2::Internship> const& internList();

  ::cpp2::struct1 const& pod_0();

  ::cpp2::struct1 const& pod_s_0();

  ::cpp2::struct1 const& pod_1();

  ::cpp2::struct1 const& pod_s_1();

  ::cpp2::struct2 const& pod_2();

  ::cpp2::struct2 const& pod_trailing_commas();

  ::cpp2::struct2 const& pod_s_2();

  ::cpp2::struct3 const& pod_3();

  ::cpp2::struct3 const& pod_s_3();

  ::cpp2::struct4 const& pod_4();

  ::cpp2::union1 const& u_1_1();

  ::cpp2::union1 const& u_1_2();

  ::cpp2::union1 const& u_1_3();

  ::cpp2::union2 const& u_2_1();

  ::cpp2::union2 const& u_2_2();

  ::cpp2::union2 const& u_2_3();

  ::cpp2::union2 const& u_2_4();

  ::cpp2::union2 const& u_2_5();

  ::cpp2::union2 const& u_2_6();

  constexpr char const * const apostrophe_ = "'";
  constexpr char const * apostrophe() {
    return apostrophe_;
  }

  constexpr char const * const tripleApostrophe_ = "'''";
  constexpr char const * tripleApostrophe() {
    return tripleApostrophe_;
  }

  constexpr char const * const quotationMark_ = "\"";
  constexpr char const * quotationMark() {
    return quotationMark_;
  }

  constexpr char const * const backslash_ = "\\";
  constexpr char const * backslash() {
    return backslash_;
  }

  constexpr char const * const escaped_a_ = "a";
  constexpr char const * escaped_a() {
    return escaped_a_;
  }

  ::std::map<::std::string, ::std::int32_t> const& char2ascii();

  ::std::vector<::std::string> const& escaped_strings();

  constexpr bool const false_c_ = false;
  constexpr bool false_c() {
    return false_c_;
  }

  constexpr bool const true_c_ = true;
  constexpr bool true_c() {
    return true_c_;
  }

  constexpr ::std::int8_t const zero_byte_ = static_cast<::std::int8_t>(0);
  constexpr ::std::int8_t zero_byte() {
    return zero_byte_;
  }

  constexpr ::std::int16_t const zero16_ = static_cast<::std::int16_t>(0);
  constexpr ::std::int16_t zero16() {
    return zero16_;
  }

  constexpr ::std::int32_t const zero32_ = static_cast<::std::int32_t>(0);
  constexpr ::std::int32_t zero32() {
    return zero32_;
  }

  constexpr ::std::int64_t const zero64_ = static_cast<::std::int64_t>(0);
  constexpr ::std::int64_t zero64() {
    return zero64_;
  }

  constexpr double const zero_dot_zero_ = static_cast<double>(0);
  constexpr double zero_dot_zero() {
    return zero_dot_zero_;
  }

  constexpr char const * const empty_string_ = "";
  constexpr char const * empty_string() {
    return empty_string_;
  }

  ::std::vector<::std::int32_t> const& empty_int_list();

  ::std::vector<::std::string> const& empty_string_list();

  ::std::set<::std::int32_t> const& empty_int_set();

  ::std::set<::std::string> const& empty_string_set();

  ::std::map<::std::int32_t, ::std::int32_t> const& empty_int_int_map();

  ::std::map<::std::int32_t, ::std::string> const& empty_int_string_map();

  ::std::map<::std::string, ::std::int32_t> const& empty_string_int_map();

  ::std::map<::std::string, ::std::string> const& empty_string_string_map();

  constexpr ::std::int64_t const maxIntDec_ = static_cast<::std::int64_t>(9223372036854775807);
  constexpr ::std::int64_t maxIntDec() {
    return maxIntDec_;
  }

  constexpr ::std::int64_t const maxIntOct_ = static_cast<::std::int64_t>(9223372036854775807);
  constexpr ::std::int64_t maxIntOct() {
    return maxIntOct_;
  }

  constexpr ::std::int64_t const maxIntHex_ = static_cast<::std::int64_t>(9223372036854775807);
  constexpr ::std::int64_t maxIntHex() {
    return maxIntHex_;
  }

  constexpr ::std::int64_t const maxIntBin_ = static_cast<::std::int64_t>(9223372036854775807);
  constexpr ::std::int64_t maxIntBin() {
    return maxIntBin_;
  }

  constexpr double const maxDub_ = static_cast<double>(1.7976931348623157e+308);
  constexpr double maxDub() {
    return maxDub_;
  }

  constexpr double const minDub_ = static_cast<double>(2.2250738585072014e-308);
  constexpr double minDub() {
    return minDub_;
  }

  constexpr double const minSDub_ = static_cast<double>(5e-324);
  constexpr double minSDub() {
    return minSDub_;
  }

  constexpr ::std::int64_t const maxPIntDec_ = static_cast<::std::int64_t>(9223372036854775807);
  constexpr ::std::int64_t maxPIntDec() {
    return maxPIntDec_;
  }

  constexpr ::std::int64_t const maxPIntOct_ = static_cast<::std::int64_t>(9223372036854775807);
  constexpr ::std::int64_t maxPIntOct() {
    return maxPIntOct_;
  }

  constexpr ::std::int64_t const maxPIntHex_ = static_cast<::std::int64_t>(9223372036854775807);
  constexpr ::std::int64_t maxPIntHex() {
    return maxPIntHex_;
  }

  constexpr ::std::int64_t const maxPIntBin_ = static_cast<::std::int64_t>(9223372036854775807);
  constexpr ::std::int64_t maxPIntBin() {
    return maxPIntBin_;
  }

  constexpr double const maxPDub_ = static_cast<double>(1.7976931348623157e+308);
  constexpr double maxPDub() {
    return maxPDub_;
  }

  constexpr double const minPDub_ = static_cast<double>(2.2250738585072014e-308);
  constexpr double minPDub() {
    return minPDub_;
  }

  constexpr double const minPSDub_ = static_cast<double>(5e-324);
  constexpr double minPSDub() {
    return minPSDub_;
  }

  constexpr ::std::int64_t const minIntDec_ = static_cast<::std::int64_t>(-9223372036854775808);
  constexpr ::std::int64_t minIntDec() {
    return minIntDec_;
  }

  constexpr ::std::int64_t const minIntOct_ = static_cast<::std::int64_t>(-9223372036854775808);
  constexpr ::std::int64_t minIntOct() {
    return minIntOct_;
  }

  constexpr ::std::int64_t const minIntHex_ = static_cast<::std::int64_t>(-9223372036854775808);
  constexpr ::std::int64_t minIntHex() {
    return minIntHex_;
  }

  constexpr ::std::int64_t const minIntBin_ = static_cast<::std::int64_t>(-9223372036854775808);
  constexpr ::std::int64_t minIntBin() {
    return minIntBin_;
  }

  constexpr double const maxNDub_ = static_cast<double>(-1.7976931348623157e+308);
  constexpr double maxNDub() {
    return maxNDub_;
  }

  constexpr double const minNDub_ = static_cast<double>(-2.2250738585072014e-308);
  constexpr double minNDub() {
    return minNDub_;
  }

  constexpr double const minNSDub_ = static_cast<double>(-5e-324);
  constexpr double minNSDub() {
    return minNSDub_;
  }

  ::std::map<::std::int32_t, bool> const& I2B();

  ::std::map<::std::int32_t, bool> const& I2B_REF();


} // namespace module_constants
} // namespace cpp2
