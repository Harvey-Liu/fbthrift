// Autogenerated by Thrift for thrift/compiler/test/fixtures/patch/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module

import (
    "fmt"
    "strings"

    patch "thrift/lib/thrift/patch"
    standard "thrift/lib/thrift/standard"
    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

var _ = patch.GoUnusedProtection__
var _ = standard.GoUnusedProtection__
// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = strings.Split
var _ = thrift.ZERO


type MyEnum int32

const (
    MyEnum_MyValue0 MyEnum = 0
)

// Enum value maps for MyEnum
var (
    MyEnumToName = map[MyEnum]string {
        MyEnum_MyValue0: "MyValue0",
    }

    MyEnumToValue = map[string]MyEnum {
        "MyValue0": MyEnum_MyValue0,
    }
)

func (x MyEnum) String() string {
    if v, ok := MyEnumToName[x]; ok {
        return v
    }
    return "<UNSET>"
}

func (x MyEnum) Ptr() *MyEnum {
    return &x
}

// Deprecated: Use MyEnumToValue instead (e.g. `x, ok := MyEnumToValue["name"]`).
func MyEnumFromString(s string) (MyEnum, error) {
    if v, ok := MyEnumToValue[s]; ok {
        return v, nil
    }
    return MyEnum(0), fmt.Errorf("not a valid MyEnum string")
}


type MyData struct {
    Data1 string `thrift:"data1,1" json:"data1" db:"data1"`
    Data2 int32 `thrift:"data2,2" json:"data2" db:"data2"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyData)(nil)

func NewMyData() *MyData {
    return (&MyData{}).
        SetData1NonCompat("").
        SetData2NonCompat(0)
}

func (x *MyData) GetData1() string {
    return x.Data1
}

func (x *MyData) GetData2() int32 {
    return x.Data2
}

func (x *MyData) SetData1NonCompat(value string) *MyData {
    x.Data1 = value
    return x
}

func (x *MyData) SetData1(value string) *MyData {
    x.Data1 = value
    return x
}

func (x *MyData) SetData2NonCompat(value int32) *MyData {
    x.Data2 = value
    return x
}

func (x *MyData) SetData2(value int32) *MyData {
    x.Data2 = value
    return x
}

func (x *MyData) writeField1(p thrift.Format) error {  // Data1
    if err := p.WriteFieldBegin("data1", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Data1
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyData) writeField2(p thrift.Format) error {  // Data2
    if err := p.WriteFieldBegin("data2", thrift.I32, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Data2
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyData) readField1(p thrift.Format) error {  // Data1
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.Data1 = result
    return nil
}

func (x *MyData) readField2(p thrift.Format) error {  // Data2
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.Data2 = result
    return nil
}

func (x *MyData) toString1() string {  // Data1
    return fmt.Sprintf("%v", x.Data1)
}

func (x *MyData) toString2() string {  // Data2
    return fmt.Sprintf("%v", x.Data2)
}



func (x *MyData) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyData"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyData) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // data1
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.I32)):  // data2
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyData) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyData({")
    sb.WriteString(fmt.Sprintf("Data1:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Data2:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type MyDataWithCustomDefault struct {
    Data1 string `thrift:"data1,1" json:"data1" db:"data1"`
    Data2 int32 `thrift:"data2,2" json:"data2" db:"data2"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyDataWithCustomDefault)(nil)

func NewMyDataWithCustomDefault() *MyDataWithCustomDefault {
    return (&MyDataWithCustomDefault{}).
        SetData1NonCompat("1").
        SetData2NonCompat(2)
}

func (x *MyDataWithCustomDefault) GetData1() string {
    return x.Data1
}

func (x *MyDataWithCustomDefault) GetData2() int32 {
    return x.Data2
}

func (x *MyDataWithCustomDefault) SetData1NonCompat(value string) *MyDataWithCustomDefault {
    x.Data1 = value
    return x
}

func (x *MyDataWithCustomDefault) SetData1(value string) *MyDataWithCustomDefault {
    x.Data1 = value
    return x
}

func (x *MyDataWithCustomDefault) SetData2NonCompat(value int32) *MyDataWithCustomDefault {
    x.Data2 = value
    return x
}

func (x *MyDataWithCustomDefault) SetData2(value int32) *MyDataWithCustomDefault {
    x.Data2 = value
    return x
}

func (x *MyDataWithCustomDefault) writeField1(p thrift.Format) error {  // Data1
    if err := p.WriteFieldBegin("data1", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Data1
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefault) writeField2(p thrift.Format) error {  // Data2
    if err := p.WriteFieldBegin("data2", thrift.I32, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Data2
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefault) readField1(p thrift.Format) error {  // Data1
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.Data1 = result
    return nil
}

func (x *MyDataWithCustomDefault) readField2(p thrift.Format) error {  // Data2
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.Data2 = result
    return nil
}

func (x *MyDataWithCustomDefault) toString1() string {  // Data1
    return fmt.Sprintf("%v", x.Data1)
}

func (x *MyDataWithCustomDefault) toString2() string {  // Data2
    return fmt.Sprintf("%v", x.Data2)
}



func (x *MyDataWithCustomDefault) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyDataWithCustomDefault"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefault) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // data1
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.I32)):  // data2
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyDataWithCustomDefault) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyDataWithCustomDefault({")
    sb.WriteString(fmt.Sprintf("Data1:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Data2:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type InnerUnion struct {
    InnerOption []byte `thrift:"innerOption,1" json:"innerOption,omitempty" db:"innerOption"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*InnerUnion)(nil)

func NewInnerUnion() *InnerUnion {
    return (&InnerUnion{})
}

func (x *InnerUnion) GetInnerOption() []byte {
    if !x.IsSetInnerOption() {
        return []byte("")
    }

    return x.InnerOption
}

func (x *InnerUnion) SetInnerOptionNonCompat(value []byte) *InnerUnion {
    x.InnerOption = value
    return x
}

func (x *InnerUnion) SetInnerOption(value []byte) *InnerUnion {
    x.InnerOption = value
    return x
}

func (x *InnerUnion) IsSetInnerOption() bool {
    return x != nil && x.InnerOption != nil
}

func (x *InnerUnion) writeField1(p thrift.Format) error {  // InnerOption
    if !x.IsSetInnerOption() {
        return nil
    }

    if err := p.WriteFieldBegin("innerOption", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.InnerOption
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *InnerUnion) readField1(p thrift.Format) error {  // InnerOption
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.InnerOption = result
    return nil
}

func (x *InnerUnion) toString1() string {  // InnerOption
    return fmt.Sprintf("%v", x.InnerOption)
}

func (x *InnerUnion) countSetFields() int {
    count := int(0)
    if (x.IsSetInnerOption()) {
        count++
    }
    return count
}

func (x *InnerUnion) CountSetFieldsInnerUnion() int {
    return x.countSetFields()
}



func (x *InnerUnion) Write(p thrift.Format) error {
    if countSet := x.countSetFields(); countSet > 1 {
        return fmt.Errorf("%T write union: no more than one field must be set (%d set).", x, countSet)
    }
    if err := p.WriteStructBegin("InnerUnion"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *InnerUnion) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // innerOption
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *InnerUnion) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("InnerUnion({")
    sb.WriteString(fmt.Sprintf("InnerOption:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}

type MyUnion struct {
    Option1 *string `thrift:"option1,1" json:"option1,omitempty" db:"option1"`
    Option2 *int32 `thrift:"option2,2" json:"option2,omitempty" db:"option2"`
    Option3 *InnerUnion `thrift:"option3,3" json:"option3,omitempty" db:"option3"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyUnion)(nil)

func NewMyUnion() *MyUnion {
    return (&MyUnion{})
}

func (x *MyUnion) GetOption1() string {
    if !x.IsSetOption1() {
        return ""
    }

    return *x.Option1
}

func (x *MyUnion) GetOption2() int32 {
    if !x.IsSetOption2() {
        return 0
    }

    return *x.Option2
}

func (x *MyUnion) GetOption3() *InnerUnion {
    if !x.IsSetOption3() {
        return nil
    }

    return x.Option3
}

func (x *MyUnion) SetOption1NonCompat(value string) *MyUnion {
    x.Option1 = &value
    return x
}

func (x *MyUnion) SetOption1(value *string) *MyUnion {
    x.Option1 = value
    return x
}

func (x *MyUnion) SetOption2NonCompat(value int32) *MyUnion {
    x.Option2 = &value
    return x
}

func (x *MyUnion) SetOption2(value *int32) *MyUnion {
    x.Option2 = value
    return x
}

func (x *MyUnion) SetOption3NonCompat(value InnerUnion) *MyUnion {
    x.Option3 = &value
    return x
}

func (x *MyUnion) SetOption3(value *InnerUnion) *MyUnion {
    x.Option3 = value
    return x
}

func (x *MyUnion) IsSetOption1() bool {
    return x != nil && x.Option1 != nil
}

func (x *MyUnion) IsSetOption2() bool {
    return x != nil && x.Option2 != nil
}

func (x *MyUnion) IsSetOption3() bool {
    return x != nil && x.Option3 != nil
}

func (x *MyUnion) writeField1(p thrift.Format) error {  // Option1
    if !x.IsSetOption1() {
        return nil
    }

    if err := p.WriteFieldBegin("option1", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.Option1
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField2(p thrift.Format) error {  // Option2
    if !x.IsSetOption2() {
        return nil
    }

    if err := p.WriteFieldBegin("option2", thrift.I32, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.Option2
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField3(p thrift.Format) error {  // Option3
    if !x.IsSetOption3() {
        return nil
    }

    if err := p.WriteFieldBegin("option3", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Option3
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) readField1(p thrift.Format) error {  // Option1
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.Option1 = &result
    return nil
}

func (x *MyUnion) readField2(p thrift.Format) error {  // Option2
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.Option2 = &result
    return nil
}

func (x *MyUnion) readField3(p thrift.Format) error {  // Option3
    result := *NewInnerUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.Option3 = &result
    return nil
}

func (x *MyUnion) toString1() string {  // Option1
    if x.IsSetOption1() {
        return fmt.Sprintf("%v", *x.Option1)
    }
    return fmt.Sprintf("%v", x.Option1)
}

func (x *MyUnion) toString2() string {  // Option2
    if x.IsSetOption2() {
        return fmt.Sprintf("%v", *x.Option2)
    }
    return fmt.Sprintf("%v", x.Option2)
}

func (x *MyUnion) toString3() string {  // Option3
    return fmt.Sprintf("%v", x.Option3)
}



// Deprecated: Use NewMyUnion().GetOption3() instead.
func (x *MyUnion) DefaultGetOption3() *InnerUnion {
    if !x.IsSetOption3() {
        return NewInnerUnion()
    }
    return x.Option3
}

func (x *MyUnion) countSetFields() int {
    count := int(0)
    if (x.IsSetOption1()) {
        count++
    }
    if (x.IsSetOption2()) {
        count++
    }
    if (x.IsSetOption3()) {
        count++
    }
    return count
}

func (x *MyUnion) CountSetFieldsMyUnion() int {
    return x.countSetFields()
}



func (x *MyUnion) Write(p thrift.Format) error {
    if countSet := x.countSetFields(); countSet > 1 {
        return fmt.Errorf("%T write union: no more than one field must be set (%d set).", x, countSet)
    }
    if err := p.WriteStructBegin("MyUnion"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // option1
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.I32)):  // option2
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.STRUCT)):  // option3
            if err := x.readField3(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyUnion) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyUnion({")
    sb.WriteString(fmt.Sprintf("Option1:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Option2:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Option3:%s", x.toString3()))
    sb.WriteString("})")

    return sb.String()
}

type MyStruct struct {
    StructWithCustomDefault *MyDataWithCustomDefault `thrift:"structWithCustomDefault,-32" json:"structWithCustomDefault" db:"structWithCustomDefault"`
    I32WithCustomDefault int32 `thrift:"i32WithCustomDefault,-31" json:"i32WithCustomDefault" db:"i32WithCustomDefault"`
    MapMap map[string]map[string]int32 `thrift:"mapMap,-30" json:"mapMap" db:"mapMap"`
    ListMap []map[string]int32 `thrift:"listMap,-29" json:"listMap" db:"listMap"`
    OptMapVal map[string]string `thrift:"optMapVal,-28,optional" json:"optMapVal,omitempty" db:"optMapVal"`
    OptSetVal []string `thrift:"optSetVal,-27,optional" json:"optSetVal,omitempty" db:"optSetVal"`
    OptListVal []int16 `thrift:"optListVal,-26,optional" json:"optListVal,omitempty" db:"optListVal"`
    OptLateStructVal *LateDefStruct `thrift:"optLateStructVal,-25,optional" json:"optLateStructVal,omitempty" db:"optLateStructVal"`
    OptStructVal *MyData `thrift:"optStructVal,-24,optional" json:"optStructVal,omitempty" db:"optStructVal"`
    OptEnumVal *MyEnum `thrift:"optEnumVal,-23,optional" json:"optEnumVal,omitempty" db:"optEnumVal"`
    OptBinaryVal []byte `thrift:"optBinaryVal,-22,optional" json:"optBinaryVal,omitempty" db:"optBinaryVal"`
    OptStringVal *string `thrift:"optStringVal,-21,optional" json:"optStringVal,omitempty" db:"optStringVal"`
    OptDoubleVal *float64 `thrift:"optDoubleVal,-20,optional" json:"optDoubleVal,omitempty" db:"optDoubleVal"`
    OptFloatVal *float32 `thrift:"optFloatVal,-19,optional" json:"optFloatVal,omitempty" db:"optFloatVal"`
    OptI64Val *int64 `thrift:"optI64Val,-18,optional" json:"optI64Val,omitempty" db:"optI64Val"`
    OptI32Val *int32 `thrift:"optI32Val,-17,optional" json:"optI32Val,omitempty" db:"optI32Val"`
    OptI16Val *int16 `thrift:"optI16Val,-16,optional" json:"optI16Val,omitempty" db:"optI16Val"`
    OptByteVal *int8 `thrift:"optByteVal,-15,optional" json:"optByteVal,omitempty" db:"optByteVal"`
    OptBoolVal *bool `thrift:"optBoolVal,-14,optional" json:"optBoolVal,omitempty" db:"optBoolVal"`
    LateStructVal *LateDefStruct `thrift:"lateStructVal,-13" json:"lateStructVal" db:"lateStructVal"`
    UnionVal *MyUnion `thrift:"unionVal,-12" json:"unionVal" db:"unionVal"`
    StructVal *MyData `thrift:"structVal,-11" json:"structVal" db:"structVal"`
    EnumVal MyEnum `thrift:"enumVal,-10" json:"enumVal" db:"enumVal"`
    BinaryVal []byte `thrift:"binaryVal,-9" json:"binaryVal" db:"binaryVal"`
    StringVal string `thrift:"stringVal,-8" json:"stringVal" db:"stringVal"`
    DoubleVal float64 `thrift:"doubleVal,-7" json:"doubleVal" db:"doubleVal"`
    FloatVal float32 `thrift:"floatVal,-6" json:"floatVal" db:"floatVal"`
    I64Val int64 `thrift:"i64Val,-5" json:"i64Val" db:"i64Val"`
    I32Val int32 `thrift:"i32Val,-4" json:"i32Val" db:"i32Val"`
    I16Val int16 `thrift:"i16Val,-3" json:"i16Val" db:"i16Val"`
    ByteVal int8 `thrift:"byteVal,-2" json:"byteVal" db:"byteVal"`
    BoolVal bool `thrift:"boolVal,-1" json:"boolVal" db:"boolVal"`
    StructWithFieldCustomDefault *MyData `thrift:"structWithFieldCustomDefault,1" json:"structWithFieldCustomDefault" db:"structWithFieldCustomDefault"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyStruct)(nil)

func NewMyStruct() *MyStruct {
    return (&MyStruct{}).
        SetStructWithCustomDefaultNonCompat(*NewMyDataWithCustomDefault()).
        SetI32WithCustomDefaultNonCompat(1).
        SetMapMapNonCompat(make(map[string]map[string]int32)).
        SetListMapNonCompat(make([]map[string]int32, 0)).
        SetLateStructValNonCompat(*NewLateDefStruct()).
        SetUnionValNonCompat(*NewMyUnion()).
        SetStructValNonCompat(*NewMyData()).
        SetEnumValNonCompat(0).
        SetBinaryValNonCompat([]byte("")).
        SetStringValNonCompat("").
        SetDoubleValNonCompat(0.0).
        SetFloatValNonCompat(0.0).
        SetI64ValNonCompat(0).
        SetI32ValNonCompat(0).
        SetI16ValNonCompat(0).
        SetByteValNonCompat(0).
        SetBoolValNonCompat(false).
        SetStructWithFieldCustomDefaultNonCompat(
              *NewMyData().
    SetData1NonCompat("1").
    SetData2NonCompat(2),
          )
}

func (x *MyStruct) GetStructWithCustomDefault() *MyDataWithCustomDefault {
    if !x.IsSetStructWithCustomDefault() {
        return nil
    }

    return x.StructWithCustomDefault
}

func (x *MyStruct) GetI32WithCustomDefault() int32 {
    return x.I32WithCustomDefault
}

func (x *MyStruct) GetMapMap() map[string]map[string]int32 {
    if !x.IsSetMapMap() {
        return make(map[string]map[string]int32)
    }

    return x.MapMap
}

func (x *MyStruct) GetListMap() []map[string]int32 {
    if !x.IsSetListMap() {
        return make([]map[string]int32, 0)
    }

    return x.ListMap
}

func (x *MyStruct) GetOptMapVal() map[string]string {
    if !x.IsSetOptMapVal() {
        return make(map[string]string)
    }

    return x.OptMapVal
}

func (x *MyStruct) GetOptSetVal() []string {
    if !x.IsSetOptSetVal() {
        return make([]string, 0)
    }

    return x.OptSetVal
}

func (x *MyStruct) GetOptListVal() []int16 {
    if !x.IsSetOptListVal() {
        return make([]int16, 0)
    }

    return x.OptListVal
}

func (x *MyStruct) GetOptLateStructVal() *LateDefStruct {
    if !x.IsSetOptLateStructVal() {
        return nil
    }

    return x.OptLateStructVal
}

func (x *MyStruct) GetOptStructVal() *MyData {
    if !x.IsSetOptStructVal() {
        return nil
    }

    return x.OptStructVal
}

func (x *MyStruct) GetOptEnumVal() MyEnum {
    if !x.IsSetOptEnumVal() {
        return 0
    }

    return *x.OptEnumVal
}

func (x *MyStruct) GetOptBinaryVal() []byte {
    if !x.IsSetOptBinaryVal() {
        return []byte("")
    }

    return x.OptBinaryVal
}

func (x *MyStruct) GetOptStringVal() string {
    if !x.IsSetOptStringVal() {
        return ""
    }

    return *x.OptStringVal
}

func (x *MyStruct) GetOptDoubleVal() float64 {
    if !x.IsSetOptDoubleVal() {
        return 0.0
    }

    return *x.OptDoubleVal
}

func (x *MyStruct) GetOptFloatVal() float32 {
    if !x.IsSetOptFloatVal() {
        return 0.0
    }

    return *x.OptFloatVal
}

func (x *MyStruct) GetOptI64Val() int64 {
    if !x.IsSetOptI64Val() {
        return 0
    }

    return *x.OptI64Val
}

func (x *MyStruct) GetOptI32Val() int32 {
    if !x.IsSetOptI32Val() {
        return 0
    }

    return *x.OptI32Val
}

func (x *MyStruct) GetOptI16Val() int16 {
    if !x.IsSetOptI16Val() {
        return 0
    }

    return *x.OptI16Val
}

func (x *MyStruct) GetOptByteVal() int8 {
    if !x.IsSetOptByteVal() {
        return 0
    }

    return *x.OptByteVal
}

func (x *MyStruct) GetOptBoolVal() bool {
    if !x.IsSetOptBoolVal() {
        return false
    }

    return *x.OptBoolVal
}

func (x *MyStruct) GetLateStructVal() *LateDefStruct {
    if !x.IsSetLateStructVal() {
        return nil
    }

    return x.LateStructVal
}

func (x *MyStruct) GetUnionVal() *MyUnion {
    if !x.IsSetUnionVal() {
        return nil
    }

    return x.UnionVal
}

func (x *MyStruct) GetStructVal() *MyData {
    if !x.IsSetStructVal() {
        return nil
    }

    return x.StructVal
}

func (x *MyStruct) GetEnumVal() MyEnum {
    return x.EnumVal
}

func (x *MyStruct) GetBinaryVal() []byte {
    if !x.IsSetBinaryVal() {
        return []byte("")
    }

    return x.BinaryVal
}

func (x *MyStruct) GetStringVal() string {
    return x.StringVal
}

func (x *MyStruct) GetDoubleVal() float64 {
    return x.DoubleVal
}

func (x *MyStruct) GetFloatVal() float32 {
    return x.FloatVal
}

func (x *MyStruct) GetI64Val() int64 {
    return x.I64Val
}

func (x *MyStruct) GetI32Val() int32 {
    return x.I32Val
}

func (x *MyStruct) GetI16Val() int16 {
    return x.I16Val
}

func (x *MyStruct) GetByteVal() int8 {
    return x.ByteVal
}

func (x *MyStruct) GetBoolVal() bool {
    return x.BoolVal
}

func (x *MyStruct) GetStructWithFieldCustomDefault() *MyData {
    if !x.IsSetStructWithFieldCustomDefault() {
        return nil
    }

    return x.StructWithFieldCustomDefault
}

func (x *MyStruct) SetStructWithCustomDefaultNonCompat(value MyDataWithCustomDefault) *MyStruct {
    x.StructWithCustomDefault = &value
    return x
}

func (x *MyStruct) SetStructWithCustomDefault(value *MyDataWithCustomDefault) *MyStruct {
    x.StructWithCustomDefault = value
    return x
}

func (x *MyStruct) SetI32WithCustomDefaultNonCompat(value int32) *MyStruct {
    x.I32WithCustomDefault = value
    return x
}

func (x *MyStruct) SetI32WithCustomDefault(value int32) *MyStruct {
    x.I32WithCustomDefault = value
    return x
}

func (x *MyStruct) SetMapMapNonCompat(value map[string]map[string]int32) *MyStruct {
    x.MapMap = value
    return x
}

func (x *MyStruct) SetMapMap(value map[string]map[string]int32) *MyStruct {
    x.MapMap = value
    return x
}

func (x *MyStruct) SetListMapNonCompat(value []map[string]int32) *MyStruct {
    x.ListMap = value
    return x
}

func (x *MyStruct) SetListMap(value []map[string]int32) *MyStruct {
    x.ListMap = value
    return x
}

func (x *MyStruct) SetOptMapValNonCompat(value map[string]string) *MyStruct {
    x.OptMapVal = value
    return x
}

func (x *MyStruct) SetOptMapVal(value map[string]string) *MyStruct {
    x.OptMapVal = value
    return x
}

func (x *MyStruct) SetOptSetValNonCompat(value []string) *MyStruct {
    x.OptSetVal = value
    return x
}

func (x *MyStruct) SetOptSetVal(value []string) *MyStruct {
    x.OptSetVal = value
    return x
}

func (x *MyStruct) SetOptListValNonCompat(value []int16) *MyStruct {
    x.OptListVal = value
    return x
}

func (x *MyStruct) SetOptListVal(value []int16) *MyStruct {
    x.OptListVal = value
    return x
}

func (x *MyStruct) SetOptLateStructValNonCompat(value LateDefStruct) *MyStruct {
    x.OptLateStructVal = &value
    return x
}

func (x *MyStruct) SetOptLateStructVal(value *LateDefStruct) *MyStruct {
    x.OptLateStructVal = value
    return x
}

func (x *MyStruct) SetOptStructValNonCompat(value MyData) *MyStruct {
    x.OptStructVal = &value
    return x
}

func (x *MyStruct) SetOptStructVal(value *MyData) *MyStruct {
    x.OptStructVal = value
    return x
}

func (x *MyStruct) SetOptEnumValNonCompat(value MyEnum) *MyStruct {
    x.OptEnumVal = &value
    return x
}

func (x *MyStruct) SetOptEnumVal(value *MyEnum) *MyStruct {
    x.OptEnumVal = value
    return x
}

func (x *MyStruct) SetOptBinaryValNonCompat(value []byte) *MyStruct {
    x.OptBinaryVal = value
    return x
}

func (x *MyStruct) SetOptBinaryVal(value []byte) *MyStruct {
    x.OptBinaryVal = value
    return x
}

func (x *MyStruct) SetOptStringValNonCompat(value string) *MyStruct {
    x.OptStringVal = &value
    return x
}

func (x *MyStruct) SetOptStringVal(value *string) *MyStruct {
    x.OptStringVal = value
    return x
}

func (x *MyStruct) SetOptDoubleValNonCompat(value float64) *MyStruct {
    x.OptDoubleVal = &value
    return x
}

func (x *MyStruct) SetOptDoubleVal(value *float64) *MyStruct {
    x.OptDoubleVal = value
    return x
}

func (x *MyStruct) SetOptFloatValNonCompat(value float32) *MyStruct {
    x.OptFloatVal = &value
    return x
}

func (x *MyStruct) SetOptFloatVal(value *float32) *MyStruct {
    x.OptFloatVal = value
    return x
}

func (x *MyStruct) SetOptI64ValNonCompat(value int64) *MyStruct {
    x.OptI64Val = &value
    return x
}

func (x *MyStruct) SetOptI64Val(value *int64) *MyStruct {
    x.OptI64Val = value
    return x
}

func (x *MyStruct) SetOptI32ValNonCompat(value int32) *MyStruct {
    x.OptI32Val = &value
    return x
}

func (x *MyStruct) SetOptI32Val(value *int32) *MyStruct {
    x.OptI32Val = value
    return x
}

func (x *MyStruct) SetOptI16ValNonCompat(value int16) *MyStruct {
    x.OptI16Val = &value
    return x
}

func (x *MyStruct) SetOptI16Val(value *int16) *MyStruct {
    x.OptI16Val = value
    return x
}

func (x *MyStruct) SetOptByteValNonCompat(value int8) *MyStruct {
    x.OptByteVal = &value
    return x
}

func (x *MyStruct) SetOptByteVal(value *int8) *MyStruct {
    x.OptByteVal = value
    return x
}

func (x *MyStruct) SetOptBoolValNonCompat(value bool) *MyStruct {
    x.OptBoolVal = &value
    return x
}

func (x *MyStruct) SetOptBoolVal(value *bool) *MyStruct {
    x.OptBoolVal = value
    return x
}

func (x *MyStruct) SetLateStructValNonCompat(value LateDefStruct) *MyStruct {
    x.LateStructVal = &value
    return x
}

func (x *MyStruct) SetLateStructVal(value *LateDefStruct) *MyStruct {
    x.LateStructVal = value
    return x
}

func (x *MyStruct) SetUnionValNonCompat(value MyUnion) *MyStruct {
    x.UnionVal = &value
    return x
}

func (x *MyStruct) SetUnionVal(value *MyUnion) *MyStruct {
    x.UnionVal = value
    return x
}

func (x *MyStruct) SetStructValNonCompat(value MyData) *MyStruct {
    x.StructVal = &value
    return x
}

func (x *MyStruct) SetStructVal(value *MyData) *MyStruct {
    x.StructVal = value
    return x
}

func (x *MyStruct) SetEnumValNonCompat(value MyEnum) *MyStruct {
    x.EnumVal = value
    return x
}

func (x *MyStruct) SetEnumVal(value MyEnum) *MyStruct {
    x.EnumVal = value
    return x
}

func (x *MyStruct) SetBinaryValNonCompat(value []byte) *MyStruct {
    x.BinaryVal = value
    return x
}

func (x *MyStruct) SetBinaryVal(value []byte) *MyStruct {
    x.BinaryVal = value
    return x
}

func (x *MyStruct) SetStringValNonCompat(value string) *MyStruct {
    x.StringVal = value
    return x
}

func (x *MyStruct) SetStringVal(value string) *MyStruct {
    x.StringVal = value
    return x
}

func (x *MyStruct) SetDoubleValNonCompat(value float64) *MyStruct {
    x.DoubleVal = value
    return x
}

func (x *MyStruct) SetDoubleVal(value float64) *MyStruct {
    x.DoubleVal = value
    return x
}

func (x *MyStruct) SetFloatValNonCompat(value float32) *MyStruct {
    x.FloatVal = value
    return x
}

func (x *MyStruct) SetFloatVal(value float32) *MyStruct {
    x.FloatVal = value
    return x
}

func (x *MyStruct) SetI64ValNonCompat(value int64) *MyStruct {
    x.I64Val = value
    return x
}

func (x *MyStruct) SetI64Val(value int64) *MyStruct {
    x.I64Val = value
    return x
}

func (x *MyStruct) SetI32ValNonCompat(value int32) *MyStruct {
    x.I32Val = value
    return x
}

func (x *MyStruct) SetI32Val(value int32) *MyStruct {
    x.I32Val = value
    return x
}

func (x *MyStruct) SetI16ValNonCompat(value int16) *MyStruct {
    x.I16Val = value
    return x
}

func (x *MyStruct) SetI16Val(value int16) *MyStruct {
    x.I16Val = value
    return x
}

func (x *MyStruct) SetByteValNonCompat(value int8) *MyStruct {
    x.ByteVal = value
    return x
}

func (x *MyStruct) SetByteVal(value int8) *MyStruct {
    x.ByteVal = value
    return x
}

func (x *MyStruct) SetBoolValNonCompat(value bool) *MyStruct {
    x.BoolVal = value
    return x
}

func (x *MyStruct) SetBoolVal(value bool) *MyStruct {
    x.BoolVal = value
    return x
}

func (x *MyStruct) SetStructWithFieldCustomDefaultNonCompat(value MyData) *MyStruct {
    x.StructWithFieldCustomDefault = &value
    return x
}

func (x *MyStruct) SetStructWithFieldCustomDefault(value *MyData) *MyStruct {
    x.StructWithFieldCustomDefault = value
    return x
}

func (x *MyStruct) IsSetStructWithCustomDefault() bool {
    return x != nil && x.StructWithCustomDefault != nil
}

func (x *MyStruct) IsSetMapMap() bool {
    return x != nil && x.MapMap != nil
}

func (x *MyStruct) IsSetListMap() bool {
    return x != nil && x.ListMap != nil
}

func (x *MyStruct) IsSetOptMapVal() bool {
    return x != nil && x.OptMapVal != nil
}

func (x *MyStruct) IsSetOptSetVal() bool {
    return x != nil && x.OptSetVal != nil
}

func (x *MyStruct) IsSetOptListVal() bool {
    return x != nil && x.OptListVal != nil
}

func (x *MyStruct) IsSetOptLateStructVal() bool {
    return x != nil && x.OptLateStructVal != nil
}

func (x *MyStruct) IsSetOptStructVal() bool {
    return x != nil && x.OptStructVal != nil
}

func (x *MyStruct) IsSetOptEnumVal() bool {
    return x != nil && x.OptEnumVal != nil
}

func (x *MyStruct) IsSetOptBinaryVal() bool {
    return x != nil && x.OptBinaryVal != nil
}

func (x *MyStruct) IsSetOptStringVal() bool {
    return x != nil && x.OptStringVal != nil
}

func (x *MyStruct) IsSetOptDoubleVal() bool {
    return x != nil && x.OptDoubleVal != nil
}

func (x *MyStruct) IsSetOptFloatVal() bool {
    return x != nil && x.OptFloatVal != nil
}

func (x *MyStruct) IsSetOptI64Val() bool {
    return x != nil && x.OptI64Val != nil
}

func (x *MyStruct) IsSetOptI32Val() bool {
    return x != nil && x.OptI32Val != nil
}

func (x *MyStruct) IsSetOptI16Val() bool {
    return x != nil && x.OptI16Val != nil
}

func (x *MyStruct) IsSetOptByteVal() bool {
    return x != nil && x.OptByteVal != nil
}

func (x *MyStruct) IsSetOptBoolVal() bool {
    return x != nil && x.OptBoolVal != nil
}

func (x *MyStruct) IsSetLateStructVal() bool {
    return x != nil && x.LateStructVal != nil
}

func (x *MyStruct) IsSetUnionVal() bool {
    return x != nil && x.UnionVal != nil
}

func (x *MyStruct) IsSetStructVal() bool {
    return x != nil && x.StructVal != nil
}

func (x *MyStruct) IsSetBinaryVal() bool {
    return x != nil && x.BinaryVal != nil
}

func (x *MyStruct) IsSetStructWithFieldCustomDefault() bool {
    return x != nil && x.StructWithFieldCustomDefault != nil
}

func (x *MyStruct) writeField_32(p thrift.Format) error {  // StructWithCustomDefault
    if !x.IsSetStructWithCustomDefault() {
        return nil
    }

    if err := p.WriteFieldBegin("structWithCustomDefault", thrift.STRUCT, -32); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.StructWithCustomDefault
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_31(p thrift.Format) error {  // I32WithCustomDefault
    if err := p.WriteFieldBegin("i32WithCustomDefault", thrift.I32, -31); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.I32WithCustomDefault
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_30(p thrift.Format) error {  // MapMap
    if err := p.WriteFieldBegin("mapMap", thrift.MAP, -30); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.MapMap
    if err := p.WriteMapBegin(thrift.STRING, thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_29(p thrift.Format) error {  // ListMap
    if err := p.WriteFieldBegin("listMap", thrift.LIST, -29); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.ListMap
    if err := p.WriteListBegin(thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_28(p thrift.Format) error {  // OptMapVal
    if !x.IsSetOptMapVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optMapVal", thrift.MAP, -28); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptMapVal
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_27(p thrift.Format) error {  // OptSetVal
    if !x.IsSetOptSetVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optSetVal", thrift.SET, -27); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptSetVal
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_26(p thrift.Format) error {  // OptListVal
    if !x.IsSetOptListVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optListVal", thrift.LIST, -26); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptListVal
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_25(p thrift.Format) error {  // OptLateStructVal
    if !x.IsSetOptLateStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optLateStructVal", thrift.STRUCT, -25); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptLateStructVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_24(p thrift.Format) error {  // OptStructVal
    if !x.IsSetOptStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optStructVal", thrift.STRUCT, -24); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptStructVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_23(p thrift.Format) error {  // OptEnumVal
    if !x.IsSetOptEnumVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optEnumVal", thrift.I32, -23); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptEnumVal
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_22(p thrift.Format) error {  // OptBinaryVal
    if !x.IsSetOptBinaryVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optBinaryVal", thrift.STRING, -22); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptBinaryVal
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_21(p thrift.Format) error {  // OptStringVal
    if !x.IsSetOptStringVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optStringVal", thrift.STRING, -21); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptStringVal
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_20(p thrift.Format) error {  // OptDoubleVal
    if !x.IsSetOptDoubleVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optDoubleVal", thrift.DOUBLE, -20); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptDoubleVal
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_19(p thrift.Format) error {  // OptFloatVal
    if !x.IsSetOptFloatVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optFloatVal", thrift.FLOAT, -19); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptFloatVal
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_18(p thrift.Format) error {  // OptI64Val
    if !x.IsSetOptI64Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI64Val", thrift.I64, -18); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptI64Val
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_17(p thrift.Format) error {  // OptI32Val
    if !x.IsSetOptI32Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI32Val", thrift.I32, -17); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptI32Val
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_16(p thrift.Format) error {  // OptI16Val
    if !x.IsSetOptI16Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI16Val", thrift.I16, -16); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptI16Val
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_15(p thrift.Format) error {  // OptByteVal
    if !x.IsSetOptByteVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optByteVal", thrift.BYTE, -15); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptByteVal
    if err := p.WriteByte(byte(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_14(p thrift.Format) error {  // OptBoolVal
    if !x.IsSetOptBoolVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optBoolVal", thrift.BOOL, -14); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptBoolVal
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_13(p thrift.Format) error {  // LateStructVal
    if !x.IsSetLateStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("lateStructVal", thrift.STRUCT, -13); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.LateStructVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_12(p thrift.Format) error {  // UnionVal
    if !x.IsSetUnionVal() {
        return nil
    }

    if err := p.WriteFieldBegin("unionVal", thrift.STRUCT, -12); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.UnionVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_11(p thrift.Format) error {  // StructVal
    if !x.IsSetStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("structVal", thrift.STRUCT, -11); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.StructVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_10(p thrift.Format) error {  // EnumVal
    if err := p.WriteFieldBegin("enumVal", thrift.I32, -10); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.EnumVal
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_9(p thrift.Format) error {  // BinaryVal
    if err := p.WriteFieldBegin("binaryVal", thrift.STRING, -9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.BinaryVal
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_8(p thrift.Format) error {  // StringVal
    if err := p.WriteFieldBegin("stringVal", thrift.STRING, -8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.StringVal
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_7(p thrift.Format) error {  // DoubleVal
    if err := p.WriteFieldBegin("doubleVal", thrift.DOUBLE, -7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.DoubleVal
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_6(p thrift.Format) error {  // FloatVal
    if err := p.WriteFieldBegin("floatVal", thrift.FLOAT, -6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.FloatVal
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_5(p thrift.Format) error {  // I64Val
    if err := p.WriteFieldBegin("i64Val", thrift.I64, -5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.I64Val
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_4(p thrift.Format) error {  // I32Val
    if err := p.WriteFieldBegin("i32Val", thrift.I32, -4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.I32Val
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_3(p thrift.Format) error {  // I16Val
    if err := p.WriteFieldBegin("i16Val", thrift.I16, -3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.I16Val
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_2(p thrift.Format) error {  // ByteVal
    if err := p.WriteFieldBegin("byteVal", thrift.BYTE, -2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.ByteVal
    if err := p.WriteByte(byte(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_1(p thrift.Format) error {  // BoolVal
    if err := p.WriteFieldBegin("boolVal", thrift.BOOL, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.BoolVal
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField1(p thrift.Format) error {  // StructWithFieldCustomDefault
    if !x.IsSetStructWithFieldCustomDefault() {
        return nil
    }

    if err := p.WriteFieldBegin("structWithFieldCustomDefault", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.StructWithFieldCustomDefault
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) readField_32(p thrift.Format) error {  // StructWithCustomDefault
    result := *NewMyDataWithCustomDefault()
err := result.Read(p)
if err != nil {
    return err
}

    x.StructWithCustomDefault = &result
    return nil
}

func (x *MyStruct) readField_31(p thrift.Format) error {  // I32WithCustomDefault
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.I32WithCustomDefault = result
    return nil
}

func (x *MyStruct) readField_30(p thrift.Format) error {  // MapMap
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.MapMap = result
    return nil
}

func (x *MyStruct) readField_29(p thrift.Format) error {  // ListMap
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]map[string]int32, 0, size)
for i := 0; i < size; i++ {
    var elem map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.ListMap = result
    return nil
}

func (x *MyStruct) readField_28(p thrift.Format) error {  // OptMapVal
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]string, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.OptMapVal = result
    return nil
}

func (x *MyStruct) readField_27(p thrift.Format) error {  // OptSetVal
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.OptSetVal = result
    return nil
}

func (x *MyStruct) readField_26(p thrift.Format) error {  // OptListVal
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.OptListVal = result
    return nil
}

func (x *MyStruct) readField_25(p thrift.Format) error {  // OptLateStructVal
    result := *NewLateDefStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.OptLateStructVal = &result
    return nil
}

func (x *MyStruct) readField_24(p thrift.Format) error {  // OptStructVal
    result := *NewMyData()
err := result.Read(p)
if err != nil {
    return err
}

    x.OptStructVal = &result
    return nil
}

func (x *MyStruct) readField_23(p thrift.Format) error {  // OptEnumVal
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.OptEnumVal = &result
    return nil
}

func (x *MyStruct) readField_22(p thrift.Format) error {  // OptBinaryVal
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.OptBinaryVal = result
    return nil
}

func (x *MyStruct) readField_21(p thrift.Format) error {  // OptStringVal
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.OptStringVal = &result
    return nil
}

func (x *MyStruct) readField_20(p thrift.Format) error {  // OptDoubleVal
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.OptDoubleVal = &result
    return nil
}

func (x *MyStruct) readField_19(p thrift.Format) error {  // OptFloatVal
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.OptFloatVal = &result
    return nil
}

func (x *MyStruct) readField_18(p thrift.Format) error {  // OptI64Val
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.OptI64Val = &result
    return nil
}

func (x *MyStruct) readField_17(p thrift.Format) error {  // OptI32Val
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.OptI32Val = &result
    return nil
}

func (x *MyStruct) readField_16(p thrift.Format) error {  // OptI16Val
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.OptI16Val = &result
    return nil
}

func (x *MyStruct) readField_15(p thrift.Format) error {  // OptByteVal
    resultByte, err := p.ReadByte()
result := int8(resultByte)
if err != nil {
    return err
}

    x.OptByteVal = &result
    return nil
}

func (x *MyStruct) readField_14(p thrift.Format) error {  // OptBoolVal
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.OptBoolVal = &result
    return nil
}

func (x *MyStruct) readField_13(p thrift.Format) error {  // LateStructVal
    result := *NewLateDefStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.LateStructVal = &result
    return nil
}

func (x *MyStruct) readField_12(p thrift.Format) error {  // UnionVal
    result := *NewMyUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.UnionVal = &result
    return nil
}

func (x *MyStruct) readField_11(p thrift.Format) error {  // StructVal
    result := *NewMyData()
err := result.Read(p)
if err != nil {
    return err
}

    x.StructVal = &result
    return nil
}

func (x *MyStruct) readField_10(p thrift.Format) error {  // EnumVal
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.EnumVal = result
    return nil
}

func (x *MyStruct) readField_9(p thrift.Format) error {  // BinaryVal
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.BinaryVal = result
    return nil
}

func (x *MyStruct) readField_8(p thrift.Format) error {  // StringVal
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.StringVal = result
    return nil
}

func (x *MyStruct) readField_7(p thrift.Format) error {  // DoubleVal
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.DoubleVal = result
    return nil
}

func (x *MyStruct) readField_6(p thrift.Format) error {  // FloatVal
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.FloatVal = result
    return nil
}

func (x *MyStruct) readField_5(p thrift.Format) error {  // I64Val
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.I64Val = result
    return nil
}

func (x *MyStruct) readField_4(p thrift.Format) error {  // I32Val
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.I32Val = result
    return nil
}

func (x *MyStruct) readField_3(p thrift.Format) error {  // I16Val
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.I16Val = result
    return nil
}

func (x *MyStruct) readField_2(p thrift.Format) error {  // ByteVal
    resultByte, err := p.ReadByte()
result := int8(resultByte)
if err != nil {
    return err
}

    x.ByteVal = result
    return nil
}

func (x *MyStruct) readField_1(p thrift.Format) error {  // BoolVal
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.BoolVal = result
    return nil
}

func (x *MyStruct) readField1(p thrift.Format) error {  // StructWithFieldCustomDefault
    result := *NewMyData()
err := result.Read(p)
if err != nil {
    return err
}

    x.StructWithFieldCustomDefault = &result
    return nil
}

func (x *MyStruct) toString_32() string {  // StructWithCustomDefault
    return fmt.Sprintf("%v", x.StructWithCustomDefault)
}

func (x *MyStruct) toString_31() string {  // I32WithCustomDefault
    return fmt.Sprintf("%v", x.I32WithCustomDefault)
}

func (x *MyStruct) toString_30() string {  // MapMap
    return fmt.Sprintf("%v", x.MapMap)
}

func (x *MyStruct) toString_29() string {  // ListMap
    return fmt.Sprintf("%v", x.ListMap)
}

func (x *MyStruct) toString_28() string {  // OptMapVal
    return fmt.Sprintf("%v", x.OptMapVal)
}

func (x *MyStruct) toString_27() string {  // OptSetVal
    return fmt.Sprintf("%v", x.OptSetVal)
}

func (x *MyStruct) toString_26() string {  // OptListVal
    return fmt.Sprintf("%v", x.OptListVal)
}

func (x *MyStruct) toString_25() string {  // OptLateStructVal
    return fmt.Sprintf("%v", x.OptLateStructVal)
}

func (x *MyStruct) toString_24() string {  // OptStructVal
    return fmt.Sprintf("%v", x.OptStructVal)
}

func (x *MyStruct) toString_23() string {  // OptEnumVal
    if x.IsSetOptEnumVal() {
        return fmt.Sprintf("%v", *x.OptEnumVal)
    }
    return fmt.Sprintf("%v", x.OptEnumVal)
}

func (x *MyStruct) toString_22() string {  // OptBinaryVal
    return fmt.Sprintf("%v", x.OptBinaryVal)
}

func (x *MyStruct) toString_21() string {  // OptStringVal
    if x.IsSetOptStringVal() {
        return fmt.Sprintf("%v", *x.OptStringVal)
    }
    return fmt.Sprintf("%v", x.OptStringVal)
}

func (x *MyStruct) toString_20() string {  // OptDoubleVal
    if x.IsSetOptDoubleVal() {
        return fmt.Sprintf("%v", *x.OptDoubleVal)
    }
    return fmt.Sprintf("%v", x.OptDoubleVal)
}

func (x *MyStruct) toString_19() string {  // OptFloatVal
    if x.IsSetOptFloatVal() {
        return fmt.Sprintf("%v", *x.OptFloatVal)
    }
    return fmt.Sprintf("%v", x.OptFloatVal)
}

func (x *MyStruct) toString_18() string {  // OptI64Val
    if x.IsSetOptI64Val() {
        return fmt.Sprintf("%v", *x.OptI64Val)
    }
    return fmt.Sprintf("%v", x.OptI64Val)
}

func (x *MyStruct) toString_17() string {  // OptI32Val
    if x.IsSetOptI32Val() {
        return fmt.Sprintf("%v", *x.OptI32Val)
    }
    return fmt.Sprintf("%v", x.OptI32Val)
}

func (x *MyStruct) toString_16() string {  // OptI16Val
    if x.IsSetOptI16Val() {
        return fmt.Sprintf("%v", *x.OptI16Val)
    }
    return fmt.Sprintf("%v", x.OptI16Val)
}

func (x *MyStruct) toString_15() string {  // OptByteVal
    if x.IsSetOptByteVal() {
        return fmt.Sprintf("%v", *x.OptByteVal)
    }
    return fmt.Sprintf("%v", x.OptByteVal)
}

func (x *MyStruct) toString_14() string {  // OptBoolVal
    if x.IsSetOptBoolVal() {
        return fmt.Sprintf("%v", *x.OptBoolVal)
    }
    return fmt.Sprintf("%v", x.OptBoolVal)
}

func (x *MyStruct) toString_13() string {  // LateStructVal
    return fmt.Sprintf("%v", x.LateStructVal)
}

func (x *MyStruct) toString_12() string {  // UnionVal
    return fmt.Sprintf("%v", x.UnionVal)
}

func (x *MyStruct) toString_11() string {  // StructVal
    return fmt.Sprintf("%v", x.StructVal)
}

func (x *MyStruct) toString_10() string {  // EnumVal
    return fmt.Sprintf("%v", x.EnumVal)
}

func (x *MyStruct) toString_9() string {  // BinaryVal
    return fmt.Sprintf("%v", x.BinaryVal)
}

func (x *MyStruct) toString_8() string {  // StringVal
    return fmt.Sprintf("%v", x.StringVal)
}

func (x *MyStruct) toString_7() string {  // DoubleVal
    return fmt.Sprintf("%v", x.DoubleVal)
}

func (x *MyStruct) toString_6() string {  // FloatVal
    return fmt.Sprintf("%v", x.FloatVal)
}

func (x *MyStruct) toString_5() string {  // I64Val
    return fmt.Sprintf("%v", x.I64Val)
}

func (x *MyStruct) toString_4() string {  // I32Val
    return fmt.Sprintf("%v", x.I32Val)
}

func (x *MyStruct) toString_3() string {  // I16Val
    return fmt.Sprintf("%v", x.I16Val)
}

func (x *MyStruct) toString_2() string {  // ByteVal
    return fmt.Sprintf("%v", x.ByteVal)
}

func (x *MyStruct) toString_1() string {  // BoolVal
    return fmt.Sprintf("%v", x.BoolVal)
}

func (x *MyStruct) toString1() string {  // StructWithFieldCustomDefault
    return fmt.Sprintf("%v", x.StructWithFieldCustomDefault)
}

// Deprecated: Use NewMyStruct().GetStructWithCustomDefault() instead.
func (x *MyStruct) DefaultGetStructWithCustomDefault() *MyDataWithCustomDefault {
    if !x.IsSetStructWithCustomDefault() {
        return NewMyDataWithCustomDefault()
    }
    return x.StructWithCustomDefault
}

// Deprecated: Use NewMyStruct().GetOptLateStructVal() instead.
func (x *MyStruct) DefaultGetOptLateStructVal() *LateDefStruct {
    if !x.IsSetOptLateStructVal() {
        return NewLateDefStruct()
    }
    return x.OptLateStructVal
}

// Deprecated: Use NewMyStruct().GetOptStructVal() instead.
func (x *MyStruct) DefaultGetOptStructVal() *MyData {
    if !x.IsSetOptStructVal() {
        return NewMyData()
    }
    return x.OptStructVal
}










// Deprecated: Use NewMyStruct().GetLateStructVal() instead.
func (x *MyStruct) DefaultGetLateStructVal() *LateDefStruct {
    if !x.IsSetLateStructVal() {
        return NewLateDefStruct()
    }
    return x.LateStructVal
}

// Deprecated: Use NewMyStruct().GetUnionVal() instead.
func (x *MyStruct) DefaultGetUnionVal() *MyUnion {
    if !x.IsSetUnionVal() {
        return NewMyUnion()
    }
    return x.UnionVal
}

// Deprecated: Use NewMyStruct().GetStructVal() instead.
func (x *MyStruct) DefaultGetStructVal() *MyData {
    if !x.IsSetStructVal() {
        return NewMyData()
    }
    return x.StructVal
}

// Deprecated: Use NewMyStruct().GetStructWithFieldCustomDefault() instead.
func (x *MyStruct) DefaultGetStructWithFieldCustomDefault() *MyData {
    if !x.IsSetStructWithFieldCustomDefault() {
        return NewMyData()
    }
    return x.StructWithFieldCustomDefault
}



func (x *MyStruct) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_32(p); err != nil {
        return err
    }

    if err := x.writeField_31(p); err != nil {
        return err
    }

    if err := x.writeField_30(p); err != nil {
        return err
    }

    if err := x.writeField_29(p); err != nil {
        return err
    }

    if err := x.writeField_28(p); err != nil {
        return err
    }

    if err := x.writeField_27(p); err != nil {
        return err
    }

    if err := x.writeField_26(p); err != nil {
        return err
    }

    if err := x.writeField_25(p); err != nil {
        return err
    }

    if err := x.writeField_24(p); err != nil {
        return err
    }

    if err := x.writeField_23(p); err != nil {
        return err
    }

    if err := x.writeField_22(p); err != nil {
        return err
    }

    if err := x.writeField_21(p); err != nil {
        return err
    }

    if err := x.writeField_20(p); err != nil {
        return err
    }

    if err := x.writeField_19(p); err != nil {
        return err
    }

    if err := x.writeField_18(p); err != nil {
        return err
    }

    if err := x.writeField_17(p); err != nil {
        return err
    }

    if err := x.writeField_16(p); err != nil {
        return err
    }

    if err := x.writeField_15(p); err != nil {
        return err
    }

    if err := x.writeField_14(p); err != nil {
        return err
    }

    if err := x.writeField_13(p); err != nil {
        return err
    }

    if err := x.writeField_12(p); err != nil {
        return err
    }

    if err := x.writeField_11(p); err != nil {
        return err
    }

    if err := x.writeField_10(p); err != nil {
        return err
    }

    if err := x.writeField_9(p); err != nil {
        return err
    }

    if err := x.writeField_8(p); err != nil {
        return err
    }

    if err := x.writeField_7(p); err != nil {
        return err
    }

    if err := x.writeField_6(p); err != nil {
        return err
    }

    if err := x.writeField_5(p); err != nil {
        return err
    }

    if err := x.writeField_4(p); err != nil {
        return err
    }

    if err := x.writeField_3(p); err != nil {
        return err
    }

    if err := x.writeField_2(p); err != nil {
        return err
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == -32 && wireType == thrift.Type(thrift.STRUCT)):  // structWithCustomDefault
            if err := x.readField_32(p); err != nil {
                return err
            }
        case (id == -31 && wireType == thrift.Type(thrift.I32)):  // i32WithCustomDefault
            if err := x.readField_31(p); err != nil {
                return err
            }
        case (id == -30 && wireType == thrift.Type(thrift.MAP)):  // mapMap
            if err := x.readField_30(p); err != nil {
                return err
            }
        case (id == -29 && wireType == thrift.Type(thrift.LIST)):  // listMap
            if err := x.readField_29(p); err != nil {
                return err
            }
        case (id == -28 && wireType == thrift.Type(thrift.MAP)):  // optMapVal
            if err := x.readField_28(p); err != nil {
                return err
            }
        case (id == -27 && wireType == thrift.Type(thrift.SET)):  // optSetVal
            if err := x.readField_27(p); err != nil {
                return err
            }
        case (id == -26 && wireType == thrift.Type(thrift.LIST)):  // optListVal
            if err := x.readField_26(p); err != nil {
                return err
            }
        case (id == -25 && wireType == thrift.Type(thrift.STRUCT)):  // optLateStructVal
            if err := x.readField_25(p); err != nil {
                return err
            }
        case (id == -24 && wireType == thrift.Type(thrift.STRUCT)):  // optStructVal
            if err := x.readField_24(p); err != nil {
                return err
            }
        case (id == -23 && wireType == thrift.Type(thrift.I32)):  // optEnumVal
            if err := x.readField_23(p); err != nil {
                return err
            }
        case (id == -22 && wireType == thrift.Type(thrift.STRING)):  // optBinaryVal
            if err := x.readField_22(p); err != nil {
                return err
            }
        case (id == -21 && wireType == thrift.Type(thrift.STRING)):  // optStringVal
            if err := x.readField_21(p); err != nil {
                return err
            }
        case (id == -20 && wireType == thrift.Type(thrift.DOUBLE)):  // optDoubleVal
            if err := x.readField_20(p); err != nil {
                return err
            }
        case (id == -19 && wireType == thrift.Type(thrift.FLOAT)):  // optFloatVal
            if err := x.readField_19(p); err != nil {
                return err
            }
        case (id == -18 && wireType == thrift.Type(thrift.I64)):  // optI64Val
            if err := x.readField_18(p); err != nil {
                return err
            }
        case (id == -17 && wireType == thrift.Type(thrift.I32)):  // optI32Val
            if err := x.readField_17(p); err != nil {
                return err
            }
        case (id == -16 && wireType == thrift.Type(thrift.I16)):  // optI16Val
            if err := x.readField_16(p); err != nil {
                return err
            }
        case (id == -15 && wireType == thrift.Type(thrift.BYTE)):  // optByteVal
            if err := x.readField_15(p); err != nil {
                return err
            }
        case (id == -14 && wireType == thrift.Type(thrift.BOOL)):  // optBoolVal
            if err := x.readField_14(p); err != nil {
                return err
            }
        case (id == -13 && wireType == thrift.Type(thrift.STRUCT)):  // lateStructVal
            if err := x.readField_13(p); err != nil {
                return err
            }
        case (id == -12 && wireType == thrift.Type(thrift.STRUCT)):  // unionVal
            if err := x.readField_12(p); err != nil {
                return err
            }
        case (id == -11 && wireType == thrift.Type(thrift.STRUCT)):  // structVal
            if err := x.readField_11(p); err != nil {
                return err
            }
        case (id == -10 && wireType == thrift.Type(thrift.I32)):  // enumVal
            if err := x.readField_10(p); err != nil {
                return err
            }
        case (id == -9 && wireType == thrift.Type(thrift.STRING)):  // binaryVal
            if err := x.readField_9(p); err != nil {
                return err
            }
        case (id == -8 && wireType == thrift.Type(thrift.STRING)):  // stringVal
            if err := x.readField_8(p); err != nil {
                return err
            }
        case (id == -7 && wireType == thrift.Type(thrift.DOUBLE)):  // doubleVal
            if err := x.readField_7(p); err != nil {
                return err
            }
        case (id == -6 && wireType == thrift.Type(thrift.FLOAT)):  // floatVal
            if err := x.readField_6(p); err != nil {
                return err
            }
        case (id == -5 && wireType == thrift.Type(thrift.I64)):  // i64Val
            if err := x.readField_5(p); err != nil {
                return err
            }
        case (id == -4 && wireType == thrift.Type(thrift.I32)):  // i32Val
            if err := x.readField_4(p); err != nil {
                return err
            }
        case (id == -3 && wireType == thrift.Type(thrift.I16)):  // i16Val
            if err := x.readField_3(p); err != nil {
                return err
            }
        case (id == -2 && wireType == thrift.Type(thrift.BYTE)):  // byteVal
            if err := x.readField_2(p); err != nil {
                return err
            }
        case (id == -1 && wireType == thrift.Type(thrift.BOOL)):  // boolVal
            if err := x.readField_1(p); err != nil {
                return err
            }
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // structWithFieldCustomDefault
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStruct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStruct({")
    sb.WriteString(fmt.Sprintf("StructWithCustomDefault:%s ", x.toString_32()))
    sb.WriteString(fmt.Sprintf("I32WithCustomDefault:%s ", x.toString_31()))
    sb.WriteString(fmt.Sprintf("MapMap:%s ", x.toString_30()))
    sb.WriteString(fmt.Sprintf("ListMap:%s ", x.toString_29()))
    sb.WriteString(fmt.Sprintf("OptMapVal:%s ", x.toString_28()))
    sb.WriteString(fmt.Sprintf("OptSetVal:%s ", x.toString_27()))
    sb.WriteString(fmt.Sprintf("OptListVal:%s ", x.toString_26()))
    sb.WriteString(fmt.Sprintf("OptLateStructVal:%s ", x.toString_25()))
    sb.WriteString(fmt.Sprintf("OptStructVal:%s ", x.toString_24()))
    sb.WriteString(fmt.Sprintf("OptEnumVal:%s ", x.toString_23()))
    sb.WriteString(fmt.Sprintf("OptBinaryVal:%s ", x.toString_22()))
    sb.WriteString(fmt.Sprintf("OptStringVal:%s ", x.toString_21()))
    sb.WriteString(fmt.Sprintf("OptDoubleVal:%s ", x.toString_20()))
    sb.WriteString(fmt.Sprintf("OptFloatVal:%s ", x.toString_19()))
    sb.WriteString(fmt.Sprintf("OptI64Val:%s ", x.toString_18()))
    sb.WriteString(fmt.Sprintf("OptI32Val:%s ", x.toString_17()))
    sb.WriteString(fmt.Sprintf("OptI16Val:%s ", x.toString_16()))
    sb.WriteString(fmt.Sprintf("OptByteVal:%s ", x.toString_15()))
    sb.WriteString(fmt.Sprintf("OptBoolVal:%s ", x.toString_14()))
    sb.WriteString(fmt.Sprintf("LateStructVal:%s ", x.toString_13()))
    sb.WriteString(fmt.Sprintf("UnionVal:%s ", x.toString_12()))
    sb.WriteString(fmt.Sprintf("StructVal:%s ", x.toString_11()))
    sb.WriteString(fmt.Sprintf("EnumVal:%s ", x.toString_10()))
    sb.WriteString(fmt.Sprintf("BinaryVal:%s ", x.toString_9()))
    sb.WriteString(fmt.Sprintf("StringVal:%s ", x.toString_8()))
    sb.WriteString(fmt.Sprintf("DoubleVal:%s ", x.toString_7()))
    sb.WriteString(fmt.Sprintf("FloatVal:%s ", x.toString_6()))
    sb.WriteString(fmt.Sprintf("I64Val:%s ", x.toString_5()))
    sb.WriteString(fmt.Sprintf("I32Val:%s ", x.toString_4()))
    sb.WriteString(fmt.Sprintf("I16Val:%s ", x.toString_3()))
    sb.WriteString(fmt.Sprintf("ByteVal:%s ", x.toString_2()))
    sb.WriteString(fmt.Sprintf("BoolVal:%s ", x.toString_1()))
    sb.WriteString(fmt.Sprintf("StructWithFieldCustomDefault:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}

type LateDefStruct struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*LateDefStruct)(nil)

func NewLateDefStruct() *LateDefStruct {
    return (&LateDefStruct{})
}



func (x *LateDefStruct) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("LateDefStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *LateDefStruct) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *LateDefStruct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("LateDefStruct({")
    sb.WriteString("})")

    return sb.String()
}

type Recursive struct {
    Nodes map[string]*Recursive `thrift:"nodes,-1" json:"nodes" db:"nodes"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Recursive)(nil)

func NewRecursive() *Recursive {
    return (&Recursive{}).
        SetNodesNonCompat(make(map[string]*Recursive))
}

func (x *Recursive) GetNodes() map[string]*Recursive {
    if !x.IsSetNodes() {
        return make(map[string]*Recursive)
    }

    return x.Nodes
}

func (x *Recursive) SetNodesNonCompat(value map[string]*Recursive) *Recursive {
    x.Nodes = value
    return x
}

func (x *Recursive) SetNodes(value map[string]*Recursive) *Recursive {
    x.Nodes = value
    return x
}

func (x *Recursive) IsSetNodes() bool {
    return x != nil && x.Nodes != nil
}

func (x *Recursive) writeField_1(p thrift.Format) error {  // Nodes
    if err := p.WriteFieldBegin("nodes", thrift.MAP, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Nodes
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Recursive) readField_1(p thrift.Format) error {  // Nodes
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*Recursive, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *Recursive
    {
        result := *NewRecursive()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.Nodes = result
    return nil
}

func (x *Recursive) toString_1() string {  // Nodes
    return fmt.Sprintf("%v", x.Nodes)
}



func (x *Recursive) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("Recursive"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Recursive) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == -1 && wireType == thrift.Type(thrift.MAP)):  // nodes
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Recursive) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Recursive({")
    sb.WriteString(fmt.Sprintf("Nodes:%s", x.toString_1()))
    sb.WriteString("})")

    return sb.String()
}

type Bar struct {
    Loop *Loop `thrift:"loop,-1" json:"loop" db:"loop"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Bar)(nil)

func NewBar() *Bar {
    return (&Bar{}).
        SetLoopNonCompat(*NewLoop())
}

func (x *Bar) GetLoop() *Loop {
    if !x.IsSetLoop() {
        return nil
    }

    return x.Loop
}

func (x *Bar) SetLoopNonCompat(value Loop) *Bar {
    x.Loop = &value
    return x
}

func (x *Bar) SetLoop(value *Loop) *Bar {
    x.Loop = value
    return x
}

func (x *Bar) IsSetLoop() bool {
    return x != nil && x.Loop != nil
}

func (x *Bar) writeField_1(p thrift.Format) error {  // Loop
    if !x.IsSetLoop() {
        return nil
    }

    if err := p.WriteFieldBegin("loop", thrift.STRUCT, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Loop
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Bar) readField_1(p thrift.Format) error {  // Loop
    result := *NewLoop()
err := result.Read(p)
if err != nil {
    return err
}

    x.Loop = &result
    return nil
}

func (x *Bar) toString_1() string {  // Loop
    return fmt.Sprintf("%v", x.Loop)
}

// Deprecated: Use NewBar().GetLoop() instead.
func (x *Bar) DefaultGetLoop() *Loop {
    if !x.IsSetLoop() {
        return NewLoop()
    }
    return x.Loop
}



func (x *Bar) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("Bar"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Bar) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == -1 && wireType == thrift.Type(thrift.STRUCT)):  // loop
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Bar) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Bar({")
    sb.WriteString(fmt.Sprintf("Loop:%s", x.toString_1()))
    sb.WriteString("})")

    return sb.String()
}

type Loop struct {
    Bar *Bar `thrift:"bar,-1" json:"bar" db:"bar"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Loop)(nil)

func NewLoop() *Loop {
    return (&Loop{}).
        SetBarNonCompat(*NewBar())
}

func (x *Loop) GetBar() *Bar {
    if !x.IsSetBar() {
        return nil
    }

    return x.Bar
}

func (x *Loop) SetBarNonCompat(value Bar) *Loop {
    x.Bar = &value
    return x
}

func (x *Loop) SetBar(value *Bar) *Loop {
    x.Bar = value
    return x
}

func (x *Loop) IsSetBar() bool {
    return x != nil && x.Bar != nil
}

func (x *Loop) writeField_1(p thrift.Format) error {  // Bar
    if !x.IsSetBar() {
        return nil
    }

    if err := p.WriteFieldBegin("bar", thrift.STRUCT, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Bar
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Loop) readField_1(p thrift.Format) error {  // Bar
    result := *NewBar()
err := result.Read(p)
if err != nil {
    return err
}

    x.Bar = &result
    return nil
}

func (x *Loop) toString_1() string {  // Bar
    return fmt.Sprintf("%v", x.Bar)
}

// Deprecated: Use NewLoop().GetBar() instead.
func (x *Loop) DefaultGetBar() *Bar {
    if !x.IsSetBar() {
        return NewBar()
    }
    return x.Bar
}



func (x *Loop) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("Loop"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Loop) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == -1 && wireType == thrift.Type(thrift.STRUCT)):  // bar
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Loop) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Loop({")
    sb.WriteString(fmt.Sprintf("Bar:%s", x.toString_1()))
    sb.WriteString("})")

    return sb.String()
}

type RefFields struct {
    Unique []int32 `thrift:"unique,1" json:"unique" db:"unique"`
    SharedConst []int32 `thrift:"shared_const,2" json:"shared_const" db:"shared_const"`
    SharedMustable []int32 `thrift:"shared_mustable,3" json:"shared_mustable" db:"shared_mustable"`
    OptUnique []int32 `thrift:"opt_unique,4,optional" json:"opt_unique,omitempty" db:"opt_unique"`
    OptSharedConst []int32 `thrift:"opt_shared_const,5,optional" json:"opt_shared_const,omitempty" db:"opt_shared_const"`
    OptSharedMustable []int32 `thrift:"opt_shared_mustable,6,optional" json:"opt_shared_mustable,omitempty" db:"opt_shared_mustable"`
    OptBox []int32 `thrift:"opt_box,7,optional" json:"opt_box,omitempty" db:"opt_box"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*RefFields)(nil)

func NewRefFields() *RefFields {
    return (&RefFields{}).
        SetUniqueNonCompat(make([]int32, 0)).
        SetSharedConstNonCompat(make([]int32, 0)).
        SetSharedMustableNonCompat(make([]int32, 0))
}

func (x *RefFields) GetUnique() []int32 {
    if !x.IsSetUnique() {
        return make([]int32, 0)
    }

    return x.Unique
}

func (x *RefFields) GetSharedConst() []int32 {
    if !x.IsSetSharedConst() {
        return make([]int32, 0)
    }

    return x.SharedConst
}

func (x *RefFields) GetSharedMustable() []int32 {
    if !x.IsSetSharedMustable() {
        return make([]int32, 0)
    }

    return x.SharedMustable
}

func (x *RefFields) GetOptUnique() []int32 {
    if !x.IsSetOptUnique() {
        return make([]int32, 0)
    }

    return x.OptUnique
}

func (x *RefFields) GetOptSharedConst() []int32 {
    if !x.IsSetOptSharedConst() {
        return make([]int32, 0)
    }

    return x.OptSharedConst
}

func (x *RefFields) GetOptSharedMustable() []int32 {
    if !x.IsSetOptSharedMustable() {
        return make([]int32, 0)
    }

    return x.OptSharedMustable
}

func (x *RefFields) GetOptBox() []int32 {
    if !x.IsSetOptBox() {
        return make([]int32, 0)
    }

    return x.OptBox
}

func (x *RefFields) SetUniqueNonCompat(value []int32) *RefFields {
    x.Unique = value
    return x
}

func (x *RefFields) SetUnique(value []int32) *RefFields {
    x.Unique = value
    return x
}

func (x *RefFields) SetSharedConstNonCompat(value []int32) *RefFields {
    x.SharedConst = value
    return x
}

func (x *RefFields) SetSharedConst(value []int32) *RefFields {
    x.SharedConst = value
    return x
}

func (x *RefFields) SetSharedMustableNonCompat(value []int32) *RefFields {
    x.SharedMustable = value
    return x
}

func (x *RefFields) SetSharedMustable(value []int32) *RefFields {
    x.SharedMustable = value
    return x
}

func (x *RefFields) SetOptUniqueNonCompat(value []int32) *RefFields {
    x.OptUnique = value
    return x
}

func (x *RefFields) SetOptUnique(value []int32) *RefFields {
    x.OptUnique = value
    return x
}

func (x *RefFields) SetOptSharedConstNonCompat(value []int32) *RefFields {
    x.OptSharedConst = value
    return x
}

func (x *RefFields) SetOptSharedConst(value []int32) *RefFields {
    x.OptSharedConst = value
    return x
}

func (x *RefFields) SetOptSharedMustableNonCompat(value []int32) *RefFields {
    x.OptSharedMustable = value
    return x
}

func (x *RefFields) SetOptSharedMustable(value []int32) *RefFields {
    x.OptSharedMustable = value
    return x
}

func (x *RefFields) SetOptBoxNonCompat(value []int32) *RefFields {
    x.OptBox = value
    return x
}

func (x *RefFields) SetOptBox(value []int32) *RefFields {
    x.OptBox = value
    return x
}

func (x *RefFields) IsSetUnique() bool {
    return x != nil && x.Unique != nil
}

func (x *RefFields) IsSetSharedConst() bool {
    return x != nil && x.SharedConst != nil
}

func (x *RefFields) IsSetSharedMustable() bool {
    return x != nil && x.SharedMustable != nil
}

func (x *RefFields) IsSetOptUnique() bool {
    return x != nil && x.OptUnique != nil
}

func (x *RefFields) IsSetOptSharedConst() bool {
    return x != nil && x.OptSharedConst != nil
}

func (x *RefFields) IsSetOptSharedMustable() bool {
    return x != nil && x.OptSharedMustable != nil
}

func (x *RefFields) IsSetOptBox() bool {
    return x != nil && x.OptBox != nil
}

func (x *RefFields) writeField1(p thrift.Format) error {  // Unique
    if err := p.WriteFieldBegin("unique", thrift.LIST, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Unique
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFields) writeField2(p thrift.Format) error {  // SharedConst
    if err := p.WriteFieldBegin("shared_const", thrift.LIST, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.SharedConst
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFields) writeField3(p thrift.Format) error {  // SharedMustable
    if err := p.WriteFieldBegin("shared_mustable", thrift.LIST, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.SharedMustable
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFields) writeField4(p thrift.Format) error {  // OptUnique
    if !x.IsSetOptUnique() {
        return nil
    }

    if err := p.WriteFieldBegin("opt_unique", thrift.LIST, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptUnique
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFields) writeField5(p thrift.Format) error {  // OptSharedConst
    if !x.IsSetOptSharedConst() {
        return nil
    }

    if err := p.WriteFieldBegin("opt_shared_const", thrift.LIST, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptSharedConst
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFields) writeField6(p thrift.Format) error {  // OptSharedMustable
    if !x.IsSetOptSharedMustable() {
        return nil
    }

    if err := p.WriteFieldBegin("opt_shared_mustable", thrift.LIST, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptSharedMustable
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFields) writeField7(p thrift.Format) error {  // OptBox
    if !x.IsSetOptBox() {
        return nil
    }

    if err := p.WriteFieldBegin("opt_box", thrift.LIST, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptBox
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFields) readField1(p thrift.Format) error {  // Unique
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.Unique = result
    return nil
}

func (x *RefFields) readField2(p thrift.Format) error {  // SharedConst
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SharedConst = result
    return nil
}

func (x *RefFields) readField3(p thrift.Format) error {  // SharedMustable
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SharedMustable = result
    return nil
}

func (x *RefFields) readField4(p thrift.Format) error {  // OptUnique
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.OptUnique = result
    return nil
}

func (x *RefFields) readField5(p thrift.Format) error {  // OptSharedConst
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.OptSharedConst = result
    return nil
}

func (x *RefFields) readField6(p thrift.Format) error {  // OptSharedMustable
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.OptSharedMustable = result
    return nil
}

func (x *RefFields) readField7(p thrift.Format) error {  // OptBox
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.OptBox = result
    return nil
}

func (x *RefFields) toString1() string {  // Unique
    return fmt.Sprintf("%v", x.Unique)
}

func (x *RefFields) toString2() string {  // SharedConst
    return fmt.Sprintf("%v", x.SharedConst)
}

func (x *RefFields) toString3() string {  // SharedMustable
    return fmt.Sprintf("%v", x.SharedMustable)
}

func (x *RefFields) toString4() string {  // OptUnique
    return fmt.Sprintf("%v", x.OptUnique)
}

func (x *RefFields) toString5() string {  // OptSharedConst
    return fmt.Sprintf("%v", x.OptSharedConst)
}

func (x *RefFields) toString6() string {  // OptSharedMustable
    return fmt.Sprintf("%v", x.OptSharedMustable)
}

func (x *RefFields) toString7() string {  // OptBox
    return fmt.Sprintf("%v", x.OptBox)
}



func (x *RefFields) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("RefFields"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *RefFields) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.LIST)):  // unique
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.LIST)):  // shared_const
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.LIST)):  // shared_mustable
            if err := x.readField3(p); err != nil {
                return err
            }
        case (id == 4 && wireType == thrift.Type(thrift.LIST)):  // opt_unique
            if err := x.readField4(p); err != nil {
                return err
            }
        case (id == 5 && wireType == thrift.Type(thrift.LIST)):  // opt_shared_const
            if err := x.readField5(p); err != nil {
                return err
            }
        case (id == 6 && wireType == thrift.Type(thrift.LIST)):  // opt_shared_mustable
            if err := x.readField6(p); err != nil {
                return err
            }
        case (id == 7 && wireType == thrift.Type(thrift.LIST)):  // opt_box
            if err := x.readField7(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *RefFields) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("RefFields({")
    sb.WriteString(fmt.Sprintf("Unique:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("SharedConst:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("SharedMustable:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("OptUnique:%s ", x.toString4()))
    sb.WriteString(fmt.Sprintf("OptSharedConst:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("OptSharedMustable:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("OptBox:%s", x.toString7()))
    sb.WriteString("})")

    return sb.String()
}

// RegisterTypes registers types found in this file that have a thrift_uri with the passed in registry.
func RegisterTypes(registry interface {
  RegisterType(name string, initializer func() any)
}) {
    registry.RegisterType("test.dev/fixtures/patch/MyData", func() any { return NewMyData() })
    registry.RegisterType("test.dev/fixtures/patch/MyDataWithCustomDefault", func() any { return NewMyDataWithCustomDefault() })
    registry.RegisterType("test.dev/fixtures/patch/InnerUnion", func() any { return NewInnerUnion() })
    registry.RegisterType("test.dev/fixtures/patch/MyUnion", func() any { return NewMyUnion() })
    registry.RegisterType("test.dev/fixtures/patch/MyStruct", func() any { return NewMyStruct() })
    registry.RegisterType("test.dev/fixtures/patch/LateDefStruct", func() any { return NewLateDefStruct() })
    registry.RegisterType("test.dev/fixtures/patch/Recursive", func() any { return NewRecursive() })
    registry.RegisterType("test.dev/fixtures/patch/Bar", func() any { return NewBar() })
    registry.RegisterType("test.dev/fixtures/patch/Loop", func() any { return NewLoop() })
    registry.RegisterType("test.dev/fixtures/patch/RefFields", func() any { return NewRefFields() })

    registry.RegisterType("test.dev/fixtures/patch/MyEnum", func() any { return MyEnum(0) })
}
