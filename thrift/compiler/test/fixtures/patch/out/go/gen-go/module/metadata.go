// Autogenerated by Thrift for thrift/compiler/test/fixtures/patch/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module

import (
    patch "thrift/lib/thrift/patch"
    standard "thrift/lib/thrift/standard"
    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// mapsCopy is a copy of maps.Copy from Go 1.21
// TODO: remove mapsCopy once we can safely upgrade to Go 1.21 without requiring any rollback.
func mapsCopy[M1 ~map[K]V, M2 ~map[K]V, K comparable, V any](dst M1, src M2) {
	for k, v := range src {
		dst[k] = v
	}
}

var _ = patch.GoUnusedProtection__
var _ = standard.GoUnusedProtection__
// (needed to ensure safety because of naive import list construction)
var _ = thrift.ZERO
// TODO: uncomment when can safely upgrade to Go 1.21 without requiring any rollback.
// var _ = maps.Copy[map[int]int, map[int]int]
var _ = metadata.GoUnusedProtection__

// Premade Thrift types
var (
    premadeThriftType_string = metadata.NewThriftType().SetTPrimitive(
        metadata.ThriftPrimitiveType_THRIFT_STRING_TYPE.Ptr(),
            )
    premadeThriftType_i32 = metadata.NewThriftType().SetTPrimitive(
        metadata.ThriftPrimitiveType_THRIFT_I32_TYPE.Ptr(),
            )
    premadeThriftType_binary = metadata.NewThriftType().SetTPrimitive(
        metadata.ThriftPrimitiveType_THRIFT_BINARY_TYPE.Ptr(),
            )
    premadeThriftType_module_InnerUnion = metadata.NewThriftType().SetTUnion(
        metadata.NewThriftUnionType().
            SetName("module.InnerUnion"),
            )
    premadeThriftType_bool = metadata.NewThriftType().SetTPrimitive(
        metadata.ThriftPrimitiveType_THRIFT_BOOL_TYPE.Ptr(),
            )
    premadeThriftType_byte = metadata.NewThriftType().SetTPrimitive(
        metadata.ThriftPrimitiveType_THRIFT_BYTE_TYPE.Ptr(),
            )
    premadeThriftType_i16 = metadata.NewThriftType().SetTPrimitive(
        metadata.ThriftPrimitiveType_THRIFT_I16_TYPE.Ptr(),
            )
    premadeThriftType_i64 = metadata.NewThriftType().SetTPrimitive(
        metadata.ThriftPrimitiveType_THRIFT_I64_TYPE.Ptr(),
            )
    premadeThriftType_float = metadata.NewThriftType().SetTPrimitive(
        metadata.ThriftPrimitiveType_THRIFT_FLOAT_TYPE.Ptr(),
            )
    premadeThriftType_double = metadata.NewThriftType().SetTPrimitive(
        metadata.ThriftPrimitiveType_THRIFT_DOUBLE_TYPE.Ptr(),
            )
    premadeThriftType_module_MyEnum = metadata.NewThriftType().SetTEnum(
        metadata.NewThriftEnumType().
            SetName("module.MyEnum"),
            )
    premadeThriftType_module_MyData = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("module.MyData"),
            )
    premadeThriftType_module_MyUnion = metadata.NewThriftType().SetTUnion(
        metadata.NewThriftUnionType().
            SetName("module.MyUnion"),
            )
    premadeThriftType_module_LateDefStruct = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("module.LateDefStruct"),
            )
    premadeThriftType_list_i16 = metadata.NewThriftType().SetTList(
        metadata.NewThriftListType().
            SetValueType(premadeThriftType_i16),
            )
    premadeThriftType_set_string = metadata.NewThriftType().SetTSet(
        metadata.NewThriftSetType().
            SetValueType(premadeThriftType_string),
            )
    premadeThriftType_map_string_string = metadata.NewThriftType().SetTMap(
        metadata.NewThriftMapType().
            SetKeyType(premadeThriftType_string).
            SetValueType(premadeThriftType_string),
            )
    premadeThriftType_map_string_i32 = metadata.NewThriftType().SetTMap(
        metadata.NewThriftMapType().
            SetKeyType(premadeThriftType_string).
            SetValueType(premadeThriftType_i32),
            )
    premadeThriftType_list_map_string_i32 = metadata.NewThriftType().SetTList(
        metadata.NewThriftListType().
            SetValueType(premadeThriftType_map_string_i32),
            )
    premadeThriftType_map_string_map_string_i32 = metadata.NewThriftType().SetTMap(
        metadata.NewThriftMapType().
            SetKeyType(premadeThriftType_string).
            SetValueType(premadeThriftType_map_string_i32),
            )
    premadeThriftType_module_MyDataWithCustomDefault = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("module.MyDataWithCustomDefault"),
            )
    premadeThriftType_module_Recursive = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("module.Recursive"),
            )
    premadeThriftType_map_string_module_Recursive = metadata.NewThriftType().SetTMap(
        metadata.NewThriftMapType().
            SetKeyType(premadeThriftType_string).
            SetValueType(premadeThriftType_module_Recursive),
            )
    premadeThriftType_module_Loop = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("module.Loop"),
            )
    premadeThriftType_module_Bar = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("module.Bar"),
            )
    premadeThriftType_list_i32 = metadata.NewThriftType().SetTList(
        metadata.NewThriftListType().
            SetValueType(premadeThriftType_i32),
            )
)

var structMetadatas = []*metadata.ThriftStruct{
    metadata.NewThriftStruct().
    SetName("module.MyData").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("data1").
    SetIsOptional(false).
    SetType(premadeThriftType_string),
            metadata.NewThriftField().
    SetId(2).
    SetName("data2").
    SetIsOptional(false).
    SetType(premadeThriftType_i32),
        },
    ),
    metadata.NewThriftStruct().
    SetName("module.MyDataWithCustomDefault").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("data1").
    SetIsOptional(false).
    SetType(premadeThriftType_string),
            metadata.NewThriftField().
    SetId(2).
    SetName("data2").
    SetIsOptional(false).
    SetType(premadeThriftType_i32),
        },
    ),
    metadata.NewThriftStruct().
    SetName("module.InnerUnion").
    SetIsUnion(true).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("innerOption").
    SetIsOptional(false).
    SetType(premadeThriftType_binary),
        },
    ),
    metadata.NewThriftStruct().
    SetName("module.MyUnion").
    SetIsUnion(true).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("option1").
    SetIsOptional(false).
    SetType(premadeThriftType_string),
            metadata.NewThriftField().
    SetId(2).
    SetName("option2").
    SetIsOptional(false).
    SetType(premadeThriftType_i32),
            metadata.NewThriftField().
    SetId(3).
    SetName("option3").
    SetIsOptional(false).
    SetType(premadeThriftType_module_InnerUnion),
        },
    ),
    metadata.NewThriftStruct().
    SetName("module.MyStruct").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(-32).
    SetName("structWithCustomDefault").
    SetIsOptional(false).
    SetType(premadeThriftType_module_MyDataWithCustomDefault),
            metadata.NewThriftField().
    SetId(-31).
    SetName("i32WithCustomDefault").
    SetIsOptional(false).
    SetType(premadeThriftType_i32),
            metadata.NewThriftField().
    SetId(-30).
    SetName("mapMap").
    SetIsOptional(false).
    SetType(premadeThriftType_map_string_map_string_i32),
            metadata.NewThriftField().
    SetId(-29).
    SetName("listMap").
    SetIsOptional(false).
    SetType(premadeThriftType_list_map_string_i32),
            metadata.NewThriftField().
    SetId(-28).
    SetName("optMapVal").
    SetIsOptional(true).
    SetType(premadeThriftType_map_string_string),
            metadata.NewThriftField().
    SetId(-27).
    SetName("optSetVal").
    SetIsOptional(true).
    SetType(premadeThriftType_set_string),
            metadata.NewThriftField().
    SetId(-26).
    SetName("optListVal").
    SetIsOptional(true).
    SetType(premadeThriftType_list_i16),
            metadata.NewThriftField().
    SetId(-25).
    SetName("optLateStructVal").
    SetIsOptional(true).
    SetType(premadeThriftType_module_LateDefStruct),
            metadata.NewThriftField().
    SetId(-24).
    SetName("optStructVal").
    SetIsOptional(true).
    SetType(premadeThriftType_module_MyData),
            metadata.NewThriftField().
    SetId(-23).
    SetName("optEnumVal").
    SetIsOptional(true).
    SetType(premadeThriftType_module_MyEnum),
            metadata.NewThriftField().
    SetId(-22).
    SetName("optBinaryVal").
    SetIsOptional(true).
    SetType(premadeThriftType_binary),
            metadata.NewThriftField().
    SetId(-21).
    SetName("optStringVal").
    SetIsOptional(true).
    SetType(premadeThriftType_string),
            metadata.NewThriftField().
    SetId(-20).
    SetName("optDoubleVal").
    SetIsOptional(true).
    SetType(premadeThriftType_double),
            metadata.NewThriftField().
    SetId(-19).
    SetName("optFloatVal").
    SetIsOptional(true).
    SetType(premadeThriftType_float),
            metadata.NewThriftField().
    SetId(-18).
    SetName("optI64Val").
    SetIsOptional(true).
    SetType(premadeThriftType_i64),
            metadata.NewThriftField().
    SetId(-17).
    SetName("optI32Val").
    SetIsOptional(true).
    SetType(premadeThriftType_i32),
            metadata.NewThriftField().
    SetId(-16).
    SetName("optI16Val").
    SetIsOptional(true).
    SetType(premadeThriftType_i16),
            metadata.NewThriftField().
    SetId(-15).
    SetName("optByteVal").
    SetIsOptional(true).
    SetType(premadeThriftType_byte),
            metadata.NewThriftField().
    SetId(-14).
    SetName("optBoolVal").
    SetIsOptional(true).
    SetType(premadeThriftType_bool),
            metadata.NewThriftField().
    SetId(-13).
    SetName("lateStructVal").
    SetIsOptional(false).
    SetType(premadeThriftType_module_LateDefStruct),
            metadata.NewThriftField().
    SetId(-12).
    SetName("unionVal").
    SetIsOptional(false).
    SetType(premadeThriftType_module_MyUnion),
            metadata.NewThriftField().
    SetId(-11).
    SetName("structVal").
    SetIsOptional(false).
    SetType(premadeThriftType_module_MyData),
            metadata.NewThriftField().
    SetId(-10).
    SetName("enumVal").
    SetIsOptional(false).
    SetType(premadeThriftType_module_MyEnum),
            metadata.NewThriftField().
    SetId(-9).
    SetName("binaryVal").
    SetIsOptional(false).
    SetType(premadeThriftType_binary),
            metadata.NewThriftField().
    SetId(-8).
    SetName("stringVal").
    SetIsOptional(false).
    SetType(premadeThriftType_string),
            metadata.NewThriftField().
    SetId(-7).
    SetName("doubleVal").
    SetIsOptional(false).
    SetType(premadeThriftType_double),
            metadata.NewThriftField().
    SetId(-6).
    SetName("floatVal").
    SetIsOptional(false).
    SetType(premadeThriftType_float),
            metadata.NewThriftField().
    SetId(-5).
    SetName("i64Val").
    SetIsOptional(false).
    SetType(premadeThriftType_i64),
            metadata.NewThriftField().
    SetId(-4).
    SetName("i32Val").
    SetIsOptional(false).
    SetType(premadeThriftType_i32),
            metadata.NewThriftField().
    SetId(-3).
    SetName("i16Val").
    SetIsOptional(false).
    SetType(premadeThriftType_i16),
            metadata.NewThriftField().
    SetId(-2).
    SetName("byteVal").
    SetIsOptional(false).
    SetType(premadeThriftType_byte),
            metadata.NewThriftField().
    SetId(-1).
    SetName("boolVal").
    SetIsOptional(false).
    SetType(premadeThriftType_bool),
            metadata.NewThriftField().
    SetId(1).
    SetName("structWithFieldCustomDefault").
    SetIsOptional(false).
    SetType(premadeThriftType_module_MyData),
        },
    ),
    metadata.NewThriftStruct().
    SetName("module.LateDefStruct").
    SetIsUnion(false),
    metadata.NewThriftStruct().
    SetName("module.Recursive").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(-1).
    SetName("nodes").
    SetIsOptional(false).
    SetType(premadeThriftType_map_string_module_Recursive),
        },
    ),
    metadata.NewThriftStruct().
    SetName("module.Bar").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(-1).
    SetName("loop").
    SetIsOptional(false).
    SetType(premadeThriftType_module_Loop),
        },
    ),
    metadata.NewThriftStruct().
    SetName("module.Loop").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(-1).
    SetName("bar").
    SetIsOptional(false).
    SetType(premadeThriftType_module_Bar),
        },
    ),
    metadata.NewThriftStruct().
    SetName("module.RefFields").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("unique").
    SetIsOptional(false).
    SetType(premadeThriftType_list_i32),
            metadata.NewThriftField().
    SetId(2).
    SetName("shared_const").
    SetIsOptional(false).
    SetType(premadeThriftType_list_i32),
            metadata.NewThriftField().
    SetId(3).
    SetName("shared_mustable").
    SetIsOptional(false).
    SetType(premadeThriftType_list_i32),
            metadata.NewThriftField().
    SetId(4).
    SetName("opt_unique").
    SetIsOptional(true).
    SetType(premadeThriftType_list_i32),
            metadata.NewThriftField().
    SetId(5).
    SetName("opt_shared_const").
    SetIsOptional(true).
    SetType(premadeThriftType_list_i32),
            metadata.NewThriftField().
    SetId(6).
    SetName("opt_shared_mustable").
    SetIsOptional(true).
    SetType(premadeThriftType_list_i32),
            metadata.NewThriftField().
    SetId(7).
    SetName("opt_box").
    SetIsOptional(true).
    SetType(premadeThriftType_list_i32),
        },
    ),
}

var exceptionMetadatas = []*metadata.ThriftException{
}

var enumMetadatas = []*metadata.ThriftEnum{
    metadata.NewThriftEnum().
    SetName("module.MyEnum").
    SetElements(
        map[int32]string{
            0: "MyValue0",
        },
    ),
}

var serviceMetadatas = []*metadata.ThriftService{
}

// GetThriftMetadata returns complete Thrift metadata for current and imported packages.
func GetThriftMetadata() *metadata.ThriftMetadata {
    allEnums := GetEnumsMetadata()
    allStructs := GetStructsMetadata()
    allExceptions := GetExceptionsMetadata()
    allServices := GetServicesMetadata()

    return metadata.NewThriftMetadata().
        SetEnums(allEnums).
        SetStructs(allStructs).
        SetExceptions(allExceptions).
        SetServices(allServices)
}

// GetEnumsMetadata returns Thrift metadata for enums in the current and recursively included packages.
func GetEnumsMetadata() map[string]*metadata.ThriftEnum {
    allEnumsMap := make(map[string]*metadata.ThriftEnum)

    // Add enum metadatas from the current program...
    for _, enumMetadata := range enumMetadatas {
        allEnumsMap[enumMetadata.GetName()] = enumMetadata
    }

    // ...now add enum metadatas from recursively included programs.
    mapsCopy(allEnumsMap, patch.GetEnumsMetadata())
    mapsCopy(allEnumsMap, standard.GetEnumsMetadata())

    return allEnumsMap
}

// GetStructsMetadata returns Thrift metadata for structs in the current and recursively included packages.
func GetStructsMetadata() map[string]*metadata.ThriftStruct {
    allStructsMap := make(map[string]*metadata.ThriftStruct)

    // Add struct metadatas from the current program...
    for _, structMetadata := range structMetadatas {
        allStructsMap[structMetadata.GetName()] = structMetadata
    }

    // ...now add struct metadatas from recursively included programs.
    mapsCopy(allStructsMap, patch.GetStructsMetadata())
    mapsCopy(allStructsMap, standard.GetStructsMetadata())

    return allStructsMap
}

// GetExceptionsMetadata returns Thrift metadata for exceptions in the current and recursively included packages.
func GetExceptionsMetadata() map[string]*metadata.ThriftException {
    allExceptionsMap := make(map[string]*metadata.ThriftException)

    // Add exception metadatas from the current program...
    for _, exceptionMetadata := range exceptionMetadatas {
        allExceptionsMap[exceptionMetadata.GetName()] = exceptionMetadata
    }

    // ...now add exception metadatas from recursively included programs.
    mapsCopy(allExceptionsMap, patch.GetExceptionsMetadata())
    mapsCopy(allExceptionsMap, standard.GetExceptionsMetadata())

    return allExceptionsMap
}

// GetServicesMetadata returns Thrift metadata for services in the current and recursively included packages.
func GetServicesMetadata() map[string]*metadata.ThriftService {
    allServicesMap := make(map[string]*metadata.ThriftService)

    // Add service metadatas from the current program...
    for _, serviceMetadata := range serviceMetadatas {
        allServicesMap[serviceMetadata.GetName()] = serviceMetadata
    }

    // ...now add service metadatas from recursively included programs.
    mapsCopy(allServicesMap, patch.GetServicesMetadata())
    mapsCopy(allServicesMap, standard.GetServicesMetadata())

    return allServicesMap
}

// GetThriftMetadataForService returns Thrift metadata for the given service.
func GetThriftMetadataForService(scopedServiceName string) *metadata.ThriftMetadata {
    thriftMetadata := GetThriftMetadata()

    allServicesMap := thriftMetadata.GetServices()
    relevantServicesMap := make(map[string]*metadata.ThriftService)

    serviceMetadata := allServicesMap[scopedServiceName]
    // Visit and record all recursive parents of the target service.
    for serviceMetadata != nil {
        relevantServicesMap[serviceMetadata.GetName()] = serviceMetadata
        if serviceMetadata.IsSetParent() {
            serviceMetadata = allServicesMap[serviceMetadata.GetParent()]
        } else {
            serviceMetadata = nil
        }
    }

    thriftMetadata.SetServices(relevantServicesMap)

    return thriftMetadata
}
