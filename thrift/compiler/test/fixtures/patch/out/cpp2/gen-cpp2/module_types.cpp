/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/patch/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/patch/gen-cpp2/module_types.h"
#include "thrift/compiler/test/fixtures/patch/gen-cpp2/module_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/patch/gen-cpp2/module_data.h"


namespace apache { namespace thrift {

folly::Range<::test::fixtures::patch::MyEnum const*> const TEnumTraits<::test::fixtures::patch::MyEnum>::values = folly::range(TEnumDataStorage<::test::fixtures::patch::MyEnum>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::test::fixtures::patch::MyEnum>::names = folly::range(TEnumDataStorage<::test::fixtures::patch::MyEnum>::names);

bool TEnumTraits<::test::fixtures::patch::MyEnum>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::test::fixtures::patch::MyEnum>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift


namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyData>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyData>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyData::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyData";
}

const folly::StringPiece MyData::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyData>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyData::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyData>::name;
}

MyData::MyData(const MyData&) = default;
MyData& MyData::operator=(const MyData&) = default;
MyData::MyData() :
      __fbthrift_field_data2() {
}


MyData::~MyData() {}

MyData::MyData([[maybe_unused]] MyData&& other) noexcept :
    __fbthrift_field_data1(std::move(other.__fbthrift_field_data1)),
    __fbthrift_field_data2(std::move(other.__fbthrift_field_data2)) {
}

MyData& MyData::operator=([[maybe_unused]] MyData&& other) noexcept {
    this->__fbthrift_field_data1 = std::move(other.__fbthrift_field_data1);
    this->__fbthrift_field_data2 = std::move(other.__fbthrift_field_data2);
    return *this;
}


MyData::MyData(apache::thrift::FragileConstructor, ::std::string data1__arg, ::std::int32_t data2__arg) :
    __fbthrift_field_data1(std::move(data1__arg)),
    __fbthrift_field_data2(std::move(data2__arg)) {
}


void MyData::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_data1 = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_data2 = ::std::int32_t();
}

void MyData::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_data1 = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_data2 = ::std::int32_t();
}

bool MyData::__fbthrift_is_empty() const {
  return ::apache::thrift::op::isEmpty<::apache::thrift::type::string_t>(this->__fbthrift_field_data1) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::i32_t>(this->__fbthrift_field_data2);
}

bool MyData::operator==([[maybe_unused]] const MyData& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyData::operator<([[maybe_unused]] const MyData& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] MyData& a, [[maybe_unused]] MyData& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_data1, b.__fbthrift_field_data1);
  swap(a.__fbthrift_field_data2, b.__fbthrift_field_data2);
}

template void MyData::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyData::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyData::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyData::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyData::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyData::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyData::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyData::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyDataWithCustomDefault>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyDataWithCustomDefault>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyDataWithCustomDefault::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyDataWithCustomDefault";
}

const folly::StringPiece MyDataWithCustomDefault::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyDataWithCustomDefault>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyDataWithCustomDefault::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyDataWithCustomDefault>::name;
}

MyDataWithCustomDefault::MyDataWithCustomDefault(const MyDataWithCustomDefault&) = default;
MyDataWithCustomDefault& MyDataWithCustomDefault::operator=(const MyDataWithCustomDefault&) = default;
MyDataWithCustomDefault::MyDataWithCustomDefault() :
      __fbthrift_field_data1(apache::thrift::StringTraits<std::string>::fromStringLiteral("1")),
      __fbthrift_field_data2(static_cast<::std::int32_t>(2)) {
}


MyDataWithCustomDefault::~MyDataWithCustomDefault() {}

MyDataWithCustomDefault::MyDataWithCustomDefault([[maybe_unused]] MyDataWithCustomDefault&& other) noexcept :
    __fbthrift_field_data1(std::move(other.__fbthrift_field_data1)),
    __fbthrift_field_data2(std::move(other.__fbthrift_field_data2)) {
}

MyDataWithCustomDefault& MyDataWithCustomDefault::operator=([[maybe_unused]] MyDataWithCustomDefault&& other) noexcept {
    this->__fbthrift_field_data1 = std::move(other.__fbthrift_field_data1);
    this->__fbthrift_field_data2 = std::move(other.__fbthrift_field_data2);
    return *this;
}


MyDataWithCustomDefault::MyDataWithCustomDefault(apache::thrift::FragileConstructor, ::std::string data1__arg, ::std::int32_t data2__arg) :
    __fbthrift_field_data1(std::move(data1__arg)),
    __fbthrift_field_data2(std::move(data2__arg)) {
}


void MyDataWithCustomDefault::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_data1 = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_data2 = ::std::int32_t();
}

void MyDataWithCustomDefault::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_data1 = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_data2 = ::std::int32_t();
}

bool MyDataWithCustomDefault::__fbthrift_is_empty() const {
  return ::apache::thrift::op::isEmpty<::apache::thrift::type::string_t>(this->__fbthrift_field_data1) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::i32_t>(this->__fbthrift_field_data2);
}

bool MyDataWithCustomDefault::operator==([[maybe_unused]] const MyDataWithCustomDefault& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyDataWithCustomDefault::operator<([[maybe_unused]] const MyDataWithCustomDefault& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] MyDataWithCustomDefault& a, [[maybe_unused]] MyDataWithCustomDefault& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_data1, b.__fbthrift_field_data1);
  swap(a.__fbthrift_field_data2, b.__fbthrift_field_data2);
}

template void MyDataWithCustomDefault::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyDataWithCustomDefault::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyDataWithCustomDefault::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyDataWithCustomDefault::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyDataWithCustomDefault::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyDataWithCustomDefault::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyDataWithCustomDefault::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyDataWithCustomDefault::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::InnerUnion>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::InnerUnion>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift {

folly::Range<::test::fixtures::patch::InnerUnion::Type const*> const TEnumTraits<::test::fixtures::patch::InnerUnion::Type>::values = folly::range(TEnumDataStorage<::test::fixtures::patch::InnerUnion::Type>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::test::fixtures::patch::InnerUnion::Type>::names = folly::range(TEnumDataStorage<::test::fixtures::patch::InnerUnion::Type>::names);

bool TEnumTraits<::test::fixtures::patch::InnerUnion::Type>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::test::fixtures::patch::InnerUnion::Type>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace test { namespace fixtures { namespace patch {

const char* InnerUnion::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/InnerUnion";
}

const folly::StringPiece InnerUnion::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<InnerUnion>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece InnerUnion::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<InnerUnion>::name;
}

void InnerUnion::__fbthrift_destruct() {
  switch(getType()) {
    case Type::__EMPTY__:
      break;
    case Type::innerOption:
      ::std::destroy_at(::std::addressof(value_.innerOption));
      break;
    default:
      assert(false);
      break;
  }
}

void InnerUnion::__fbthrift_clear() {
  __fbthrift_destruct();
  type_ = folly::to_underlying(Type::__EMPTY__);
}

  InnerUnion::~InnerUnion() {
    __fbthrift_destruct();
  }

bool InnerUnion::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}
  InnerUnion::InnerUnion(const InnerUnion& rhs)
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        return;
      case Type::innerOption:
        set_innerOption(rhs.value_.innerOption);
        break;
      default:
        assert(false);
    }
  }

    InnerUnion&InnerUnion::operator=(const InnerUnion& rhs) {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        __fbthrift_clear();
        return *this;
      case Type::innerOption:
        set_innerOption(rhs.value_.innerOption);
        break;
      default:
        __fbthrift_clear();
        assert(false);
    }
    return *this;
  }


bool InnerUnion::operator==(const InnerUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionEquality{}(*this, rhs);
}

bool InnerUnion::operator<([[maybe_unused]] const InnerUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionLessThan{}(*this, rhs);
}

void swap(InnerUnion& a, InnerUnion& b) {
  InnerUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template void InnerUnion::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t InnerUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t InnerUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t InnerUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void InnerUnion::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t InnerUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t InnerUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t InnerUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyUnion>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyUnion>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift {

folly::Range<::test::fixtures::patch::MyUnion::Type const*> const TEnumTraits<::test::fixtures::patch::MyUnion::Type>::values = folly::range(TEnumDataStorage<::test::fixtures::patch::MyUnion::Type>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::test::fixtures::patch::MyUnion::Type>::names = folly::range(TEnumDataStorage<::test::fixtures::patch::MyUnion::Type>::names);

bool TEnumTraits<::test::fixtures::patch::MyUnion::Type>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::test::fixtures::patch::MyUnion::Type>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace test { namespace fixtures { namespace patch {

const char* MyUnion::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyUnion";
}

const folly::StringPiece MyUnion::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyUnion>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyUnion::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyUnion>::name;
}

void MyUnion::__fbthrift_destruct() {
  switch(getType()) {
    case Type::__EMPTY__:
      break;
    case Type::option1:
      ::std::destroy_at(::std::addressof(value_.option1));
      break;
    case Type::option2:
      ::std::destroy_at(::std::addressof(value_.option2));
      break;
    case Type::option3:
      ::std::destroy_at(::std::addressof(value_.option3));
      break;
    default:
      assert(false);
      break;
  }
}

void MyUnion::__fbthrift_clear() {
  __fbthrift_destruct();
  type_ = folly::to_underlying(Type::__EMPTY__);
}

  MyUnion::~MyUnion() {
    __fbthrift_destruct();
  }

bool MyUnion::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}
  MyUnion::MyUnion(const MyUnion& rhs)
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        return;
      case Type::option1:
        set_option1(rhs.value_.option1);
        break;
      case Type::option2:
        set_option2(rhs.value_.option2);
        break;
      case Type::option3:
        set_option3(rhs.value_.option3);
        break;
      default:
        assert(false);
    }
  }

    MyUnion&MyUnion::operator=(const MyUnion& rhs) {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        __fbthrift_clear();
        return *this;
      case Type::option1:
        set_option1(rhs.value_.option1);
        break;
      case Type::option2:
        set_option2(rhs.value_.option2);
        break;
      case Type::option3:
        set_option3(rhs.value_.option3);
        break;
      default:
        __fbthrift_clear();
        assert(false);
    }
    return *this;
  }


bool MyUnion::operator==(const MyUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionEquality{}(*this, rhs);
}

bool MyUnion::operator<([[maybe_unused]] const MyUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionLessThan{}(*this, rhs);
}

void swap(MyUnion& a, MyUnion& b) {
  MyUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template void MyUnion::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyUnion::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnion,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::InnerUnion>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStruct";
}

const folly::StringPiece MyStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStruct>::name;
}

MyStruct::MyStruct(const MyStruct&) = default;
MyStruct& MyStruct::operator=(const MyStruct&) = default;
MyStruct::MyStruct() :
      __fbthrift_field_boolVal(),
      __fbthrift_field_byteVal(),
      __fbthrift_field_i16Val(),
      __fbthrift_field_i32Val(),
      __fbthrift_field_i64Val(),
      __fbthrift_field_floatVal(),
      __fbthrift_field_doubleVal(),
      __fbthrift_field_enumVal(),
      __fbthrift_field_optBoolVal(),
      __fbthrift_field_optByteVal(),
      __fbthrift_field_optI16Val(),
      __fbthrift_field_optI32Val(),
      __fbthrift_field_optI64Val(),
      __fbthrift_field_optFloatVal(),
      __fbthrift_field_optDoubleVal(),
      __fbthrift_field_optEnumVal(),
      __fbthrift_field_i32WithCustomDefault(static_cast<::std::int32_t>(1)),
      __fbthrift_field_structWithFieldCustomDefault(::apache::thrift::detail::make_structured_constant<::test::fixtures::patch::MyData>(::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::data1>(apache::thrift::StringTraits<std::string>::fromStringLiteral("1")), ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::ident::data2>(static_cast<::std::int32_t>(2)))) {
}


MyStruct::~MyStruct() {}

MyStruct::MyStruct([[maybe_unused]] MyStruct&& other) noexcept :
    __fbthrift_field_boolVal(std::move(other.__fbthrift_field_boolVal)),
    __fbthrift_field_byteVal(std::move(other.__fbthrift_field_byteVal)),
    __fbthrift_field_i16Val(std::move(other.__fbthrift_field_i16Val)),
    __fbthrift_field_i32Val(std::move(other.__fbthrift_field_i32Val)),
    __fbthrift_field_i64Val(std::move(other.__fbthrift_field_i64Val)),
    __fbthrift_field_floatVal(std::move(other.__fbthrift_field_floatVal)),
    __fbthrift_field_doubleVal(std::move(other.__fbthrift_field_doubleVal)),
    __fbthrift_field_stringVal(std::move(other.__fbthrift_field_stringVal)),
    __fbthrift_field_binaryVal(std::move(other.__fbthrift_field_binaryVal)),
    __fbthrift_field_enumVal(std::move(other.__fbthrift_field_enumVal)),
    __fbthrift_field_structVal(std::move(other.__fbthrift_field_structVal)),
    __fbthrift_field_unionVal(std::move(other.__fbthrift_field_unionVal)),
    __fbthrift_field_lateStructVal(std::move(other.__fbthrift_field_lateStructVal)),
    __fbthrift_field_optBoolVal(std::move(other.__fbthrift_field_optBoolVal)),
    __fbthrift_field_optByteVal(std::move(other.__fbthrift_field_optByteVal)),
    __fbthrift_field_optI16Val(std::move(other.__fbthrift_field_optI16Val)),
    __fbthrift_field_optI32Val(std::move(other.__fbthrift_field_optI32Val)),
    __fbthrift_field_optI64Val(std::move(other.__fbthrift_field_optI64Val)),
    __fbthrift_field_optFloatVal(std::move(other.__fbthrift_field_optFloatVal)),
    __fbthrift_field_optDoubleVal(std::move(other.__fbthrift_field_optDoubleVal)),
    __fbthrift_field_optStringVal(std::move(other.__fbthrift_field_optStringVal)),
    __fbthrift_field_optBinaryVal(std::move(other.__fbthrift_field_optBinaryVal)),
    __fbthrift_field_optEnumVal(std::move(other.__fbthrift_field_optEnumVal)),
    __fbthrift_field_optStructVal(std::move(other.__fbthrift_field_optStructVal)),
    __fbthrift_field_optLateStructVal(std::move(other.__fbthrift_field_optLateStructVal)),
    __fbthrift_field_optListVal(std::move(other.__fbthrift_field_optListVal)),
    __fbthrift_field_optSetVal(std::move(other.__fbthrift_field_optSetVal)),
    __fbthrift_field_optMapVal(std::move(other.__fbthrift_field_optMapVal)),
    __fbthrift_field_listMap(std::move(other.__fbthrift_field_listMap)),
    __fbthrift_field_mapMap(std::move(other.__fbthrift_field_mapMap)),
    __fbthrift_field_i32WithCustomDefault(std::move(other.__fbthrift_field_i32WithCustomDefault)),
    __fbthrift_field_structWithCustomDefault(std::move(other.__fbthrift_field_structWithCustomDefault)),
    __fbthrift_field_structWithFieldCustomDefault(std::move(other.__fbthrift_field_structWithFieldCustomDefault)),
    __isset(other.__isset) {
}

MyStruct& MyStruct::operator=([[maybe_unused]] MyStruct&& other) noexcept {
    this->__fbthrift_field_boolVal = std::move(other.__fbthrift_field_boolVal);
    this->__fbthrift_field_byteVal = std::move(other.__fbthrift_field_byteVal);
    this->__fbthrift_field_i16Val = std::move(other.__fbthrift_field_i16Val);
    this->__fbthrift_field_i32Val = std::move(other.__fbthrift_field_i32Val);
    this->__fbthrift_field_i64Val = std::move(other.__fbthrift_field_i64Val);
    this->__fbthrift_field_floatVal = std::move(other.__fbthrift_field_floatVal);
    this->__fbthrift_field_doubleVal = std::move(other.__fbthrift_field_doubleVal);
    this->__fbthrift_field_stringVal = std::move(other.__fbthrift_field_stringVal);
    this->__fbthrift_field_binaryVal = std::move(other.__fbthrift_field_binaryVal);
    this->__fbthrift_field_enumVal = std::move(other.__fbthrift_field_enumVal);
    this->__fbthrift_field_structVal = std::move(other.__fbthrift_field_structVal);
    this->__fbthrift_field_unionVal = std::move(other.__fbthrift_field_unionVal);
    this->__fbthrift_field_lateStructVal = std::move(other.__fbthrift_field_lateStructVal);
    this->__fbthrift_field_optBoolVal = std::move(other.__fbthrift_field_optBoolVal);
    this->__fbthrift_field_optByteVal = std::move(other.__fbthrift_field_optByteVal);
    this->__fbthrift_field_optI16Val = std::move(other.__fbthrift_field_optI16Val);
    this->__fbthrift_field_optI32Val = std::move(other.__fbthrift_field_optI32Val);
    this->__fbthrift_field_optI64Val = std::move(other.__fbthrift_field_optI64Val);
    this->__fbthrift_field_optFloatVal = std::move(other.__fbthrift_field_optFloatVal);
    this->__fbthrift_field_optDoubleVal = std::move(other.__fbthrift_field_optDoubleVal);
    this->__fbthrift_field_optStringVal = std::move(other.__fbthrift_field_optStringVal);
    this->__fbthrift_field_optBinaryVal = std::move(other.__fbthrift_field_optBinaryVal);
    this->__fbthrift_field_optEnumVal = std::move(other.__fbthrift_field_optEnumVal);
    this->__fbthrift_field_optStructVal = std::move(other.__fbthrift_field_optStructVal);
    this->__fbthrift_field_optLateStructVal = std::move(other.__fbthrift_field_optLateStructVal);
    this->__fbthrift_field_optListVal = std::move(other.__fbthrift_field_optListVal);
    this->__fbthrift_field_optSetVal = std::move(other.__fbthrift_field_optSetVal);
    this->__fbthrift_field_optMapVal = std::move(other.__fbthrift_field_optMapVal);
    this->__fbthrift_field_listMap = std::move(other.__fbthrift_field_listMap);
    this->__fbthrift_field_mapMap = std::move(other.__fbthrift_field_mapMap);
    this->__fbthrift_field_i32WithCustomDefault = std::move(other.__fbthrift_field_i32WithCustomDefault);
    this->__fbthrift_field_structWithCustomDefault = std::move(other.__fbthrift_field_structWithCustomDefault);
    this->__fbthrift_field_structWithFieldCustomDefault = std::move(other.__fbthrift_field_structWithFieldCustomDefault);
    __isset = other.__isset;
    return *this;
}


MyStruct::MyStruct(apache::thrift::FragileConstructor, bool boolVal__arg, ::std::int8_t byteVal__arg, ::std::int16_t i16Val__arg, ::std::int32_t i32Val__arg, ::std::int64_t i64Val__arg, float floatVal__arg, double doubleVal__arg, ::std::string stringVal__arg, folly::IOBuf binaryVal__arg, ::test::fixtures::patch::MyEnum enumVal__arg, ::test::fixtures::patch::MyData structVal__arg, ::test::fixtures::patch::MyUnion unionVal__arg, ::test::fixtures::patch::LateDefStruct lateStructVal__arg, bool optBoolVal__arg, ::std::int8_t optByteVal__arg, ::std::int16_t optI16Val__arg, ::std::int32_t optI32Val__arg, ::std::int64_t optI64Val__arg, float optFloatVal__arg, double optDoubleVal__arg, ::std::string optStringVal__arg, folly::IOBuf optBinaryVal__arg, ::test::fixtures::patch::MyEnum optEnumVal__arg, ::test::fixtures::patch::MyData optStructVal__arg, ::test::fixtures::patch::LateDefStruct optLateStructVal__arg, ::std::vector<::std::int16_t> optListVal__arg, ::std::set<::std::string> optSetVal__arg, ::std::map<::std::string, ::std::string> optMapVal__arg, ::std::vector<::std::map<::std::string, ::std::int32_t>> listMap__arg, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> mapMap__arg, ::std::int32_t i32WithCustomDefault__arg, ::test::fixtures::patch::MyDataWithCustomDefault structWithCustomDefault__arg, ::test::fixtures::patch::MyData structWithFieldCustomDefault__arg) :
    __fbthrift_field_boolVal(std::move(boolVal__arg)),
    __fbthrift_field_byteVal(std::move(byteVal__arg)),
    __fbthrift_field_i16Val(std::move(i16Val__arg)),
    __fbthrift_field_i32Val(std::move(i32Val__arg)),
    __fbthrift_field_i64Val(std::move(i64Val__arg)),
    __fbthrift_field_floatVal(std::move(floatVal__arg)),
    __fbthrift_field_doubleVal(std::move(doubleVal__arg)),
    __fbthrift_field_stringVal(std::move(stringVal__arg)),
    __fbthrift_field_binaryVal(std::move(binaryVal__arg)),
    __fbthrift_field_enumVal(std::move(enumVal__arg)),
    __fbthrift_field_structVal(std::move(structVal__arg)),
    __fbthrift_field_unionVal(std::move(unionVal__arg)),
    __fbthrift_field_lateStructVal(std::move(lateStructVal__arg)),
    __fbthrift_field_optBoolVal(std::move(optBoolVal__arg)),
    __fbthrift_field_optByteVal(std::move(optByteVal__arg)),
    __fbthrift_field_optI16Val(std::move(optI16Val__arg)),
    __fbthrift_field_optI32Val(std::move(optI32Val__arg)),
    __fbthrift_field_optI64Val(std::move(optI64Val__arg)),
    __fbthrift_field_optFloatVal(std::move(optFloatVal__arg)),
    __fbthrift_field_optDoubleVal(std::move(optDoubleVal__arg)),
    __fbthrift_field_optStringVal(std::move(optStringVal__arg)),
    __fbthrift_field_optBinaryVal(std::move(optBinaryVal__arg)),
    __fbthrift_field_optEnumVal(std::move(optEnumVal__arg)),
    __fbthrift_field_optStructVal(std::move(optStructVal__arg)),
    __fbthrift_field_optLateStructVal(std::move(optLateStructVal__arg)),
    __fbthrift_field_optListVal(std::move(optListVal__arg)),
    __fbthrift_field_optSetVal(std::move(optSetVal__arg)),
    __fbthrift_field_optMapVal(std::move(optMapVal__arg)),
    __fbthrift_field_listMap(std::move(listMap__arg)),
    __fbthrift_field_mapMap(std::move(mapMap__arg)),
    __fbthrift_field_i32WithCustomDefault(std::move(i32WithCustomDefault__arg)),
    __fbthrift_field_structWithCustomDefault(std::move(structWithCustomDefault__arg)),
    __fbthrift_field_structWithFieldCustomDefault(std::move(structWithFieldCustomDefault__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
  __isset.set(folly::index_constant<13>(), true);
  __isset.set(folly::index_constant<14>(), true);
}


void MyStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_boolVal = bool();
  this->__fbthrift_field_byteVal = ::std::int8_t();
  this->__fbthrift_field_i16Val = ::std::int16_t();
  this->__fbthrift_field_i32Val = ::std::int32_t();
  this->__fbthrift_field_i64Val = ::std::int64_t();
  this->__fbthrift_field_floatVal = float();
  this->__fbthrift_field_doubleVal = double();
  this->__fbthrift_field_stringVal = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_binaryVal = apache::thrift::StringTraits<folly::IOBuf>::fromStringLiteral("");
  this->__fbthrift_field_enumVal = ::test::fixtures::patch::MyEnum();
  ::apache::thrift::clear(this->__fbthrift_field_structVal);
  ::apache::thrift::clear(this->__fbthrift_field_unionVal);
  this->__fbthrift_field_optBoolVal = bool();
  this->__fbthrift_field_optByteVal = ::std::int8_t();
  this->__fbthrift_field_optI16Val = ::std::int16_t();
  this->__fbthrift_field_optI32Val = ::std::int32_t();
  this->__fbthrift_field_optI64Val = ::std::int64_t();
  this->__fbthrift_field_optFloatVal = float();
  this->__fbthrift_field_optDoubleVal = double();
  this->__fbthrift_field_optStringVal = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_optBinaryVal = apache::thrift::StringTraits<folly::IOBuf>::fromStringLiteral("");
  this->__fbthrift_field_optEnumVal = ::test::fixtures::patch::MyEnum();
  ::apache::thrift::clear(this->__fbthrift_field_optStructVal);
  this->__fbthrift_field_optListVal.clear();
  this->__fbthrift_field_optSetVal.clear();
  this->__fbthrift_field_optMapVal.clear();
  this->__fbthrift_field_listMap.clear();
  this->__fbthrift_field_mapMap.clear();
  this->__fbthrift_field_i32WithCustomDefault = ::std::int32_t();
  ::apache::thrift::clear(this->__fbthrift_field_structWithCustomDefault);
  ::apache::thrift::clear(this->__fbthrift_field_structWithFieldCustomDefault);
  __isset = {};
}

void MyStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_boolVal = bool();
  this->__fbthrift_field_byteVal = ::std::int8_t();
  this->__fbthrift_field_i16Val = ::std::int16_t();
  this->__fbthrift_field_i32Val = ::std::int32_t();
  this->__fbthrift_field_i64Val = ::std::int64_t();
  this->__fbthrift_field_floatVal = float();
  this->__fbthrift_field_doubleVal = double();
  this->__fbthrift_field_stringVal = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_binaryVal = apache::thrift::StringTraits<folly::IOBuf>::fromStringLiteral("");
  this->__fbthrift_field_enumVal = ::test::fixtures::patch::MyEnum();
  ::apache::thrift::detail::st::clear_terse_fields(this->__fbthrift_field_structVal);
  ::apache::thrift::clear(this->__fbthrift_field_unionVal);
  this->__fbthrift_field_listMap.clear();
  this->__fbthrift_field_mapMap.clear();
  this->__fbthrift_field_i32WithCustomDefault = ::std::int32_t();
  ::apache::thrift::detail::st::clear_terse_fields(this->__fbthrift_field_structWithCustomDefault);
  ::apache::thrift::detail::st::clear_terse_fields(this->__fbthrift_field_structWithFieldCustomDefault);
}

bool MyStruct::__fbthrift_is_empty() const {
  return ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_boolVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::byte_t>(this->__fbthrift_field_byteVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::i16_t>(this->__fbthrift_field_i16Val) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::i32_t>(this->__fbthrift_field_i32Val) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::i64_t>(this->__fbthrift_field_i64Val) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::float_t>(this->__fbthrift_field_floatVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::double_t>(this->__fbthrift_field_doubleVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::string_t>(this->__fbthrift_field_stringVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::cpp_type<folly::IOBuf, ::apache::thrift::type::binary_t>>(this->__fbthrift_field_binaryVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::enum_t<::test::fixtures::patch::MyEnum>>(this->__fbthrift_field_enumVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::struct_t<::test::fixtures::patch::MyData>>(this->__fbthrift_field_structVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>>(this->__fbthrift_field_unionVal) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStruct>>(this->__fbthrift_field_lateStructVal) &&
 !(this->__isset.get(0)) &&
 !(this->__isset.get(1)) &&
 !(this->__isset.get(2)) &&
 !(this->__isset.get(3)) &&
 !(this->__isset.get(4)) &&
 !(this->__isset.get(5)) &&
 !(this->__isset.get(6)) &&
 !(this->__isset.get(7)) &&
 !(this->__isset.get(8)) &&
 !(this->__isset.get(9)) &&
 !(this->__isset.get(10)) &&
 !(this->__isset.get(11)) &&
 !(this->__isset.get(12)) &&
 !(this->__isset.get(13)) &&
 !(this->__isset.get(14)) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::list<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>>>(this->__fbthrift_field_listMap) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>>>(this->__fbthrift_field_mapMap) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::i32_t>(this->__fbthrift_field_i32WithCustomDefault) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataWithCustomDefault>>(this->__fbthrift_field_structWithCustomDefault) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::struct_t<::test::fixtures::patch::MyData>>(this->__fbthrift_field_structWithFieldCustomDefault);
}

bool MyStruct::operator==([[maybe_unused]] const MyStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyStruct::operator<([[maybe_unused]] const MyStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::test::fixtures::patch::MyData& MyStruct::get_structVal() const& {
  return __fbthrift_field_structVal;
}

::test::fixtures::patch::MyData MyStruct::get_structVal() && {
  return std::move(__fbthrift_field_structVal);
}

const ::test::fixtures::patch::MyUnion& MyStruct::get_unionVal() const& {
  return __fbthrift_field_unionVal;
}

::test::fixtures::patch::MyUnion MyStruct::get_unionVal() && {
  return std::move(__fbthrift_field_unionVal);
}

const ::test::fixtures::patch::LateDefStruct& MyStruct::get_lateStructVal() const& {
  return __fbthrift_field_lateStructVal;
}

::test::fixtures::patch::LateDefStruct MyStruct::get_lateStructVal() && {
  return std::move(__fbthrift_field_lateStructVal);
}

const ::test::fixtures::patch::MyData* MyStruct::get_optStructVal() const& {
  return optStructVal_ref().has_value() ? std::addressof(__fbthrift_field_optStructVal) : nullptr;
}

::test::fixtures::patch::MyData* MyStruct::get_optStructVal() & {
  return optStructVal_ref().has_value() ? std::addressof(__fbthrift_field_optStructVal) : nullptr;
}

const ::test::fixtures::patch::LateDefStruct* MyStruct::get_optLateStructVal() const& {
  return optLateStructVal_ref().has_value() ? std::addressof(__fbthrift_field_optLateStructVal) : nullptr;
}

::test::fixtures::patch::LateDefStruct* MyStruct::get_optLateStructVal() & {
  return optLateStructVal_ref().has_value() ? std::addressof(__fbthrift_field_optLateStructVal) : nullptr;
}

const ::std::vector<::std::int16_t>* MyStruct::get_optListVal() const& {
  return optListVal_ref().has_value() ? std::addressof(__fbthrift_field_optListVal) : nullptr;
}

::std::vector<::std::int16_t>* MyStruct::get_optListVal() & {
  return optListVal_ref().has_value() ? std::addressof(__fbthrift_field_optListVal) : nullptr;
}

const ::std::set<::std::string>* MyStruct::get_optSetVal() const& {
  return optSetVal_ref().has_value() ? std::addressof(__fbthrift_field_optSetVal) : nullptr;
}

::std::set<::std::string>* MyStruct::get_optSetVal() & {
  return optSetVal_ref().has_value() ? std::addressof(__fbthrift_field_optSetVal) : nullptr;
}

const ::std::map<::std::string, ::std::string>* MyStruct::get_optMapVal() const& {
  return optMapVal_ref().has_value() ? std::addressof(__fbthrift_field_optMapVal) : nullptr;
}

::std::map<::std::string, ::std::string>* MyStruct::get_optMapVal() & {
  return optMapVal_ref().has_value() ? std::addressof(__fbthrift_field_optMapVal) : nullptr;
}

const ::std::vector<::std::map<::std::string, ::std::int32_t>>& MyStruct::get_listMap() const& {
  return __fbthrift_field_listMap;
}

::std::vector<::std::map<::std::string, ::std::int32_t>> MyStruct::get_listMap() && {
  return std::move(__fbthrift_field_listMap);
}

const ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>& MyStruct::get_mapMap() const& {
  return __fbthrift_field_mapMap;
}

::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> MyStruct::get_mapMap() && {
  return std::move(__fbthrift_field_mapMap);
}

const ::test::fixtures::patch::MyDataWithCustomDefault& MyStruct::get_structWithCustomDefault() const& {
  return __fbthrift_field_structWithCustomDefault;
}

::test::fixtures::patch::MyDataWithCustomDefault MyStruct::get_structWithCustomDefault() && {
  return std::move(__fbthrift_field_structWithCustomDefault);
}

const ::test::fixtures::patch::MyData& MyStruct::get_structWithFieldCustomDefault() const& {
  return __fbthrift_field_structWithFieldCustomDefault;
}

::test::fixtures::patch::MyData MyStruct::get_structWithFieldCustomDefault() && {
  return std::move(__fbthrift_field_structWithFieldCustomDefault);
}


void swap([[maybe_unused]] MyStruct& a, [[maybe_unused]] MyStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_boolVal, b.__fbthrift_field_boolVal);
  swap(a.__fbthrift_field_byteVal, b.__fbthrift_field_byteVal);
  swap(a.__fbthrift_field_i16Val, b.__fbthrift_field_i16Val);
  swap(a.__fbthrift_field_i32Val, b.__fbthrift_field_i32Val);
  swap(a.__fbthrift_field_i64Val, b.__fbthrift_field_i64Val);
  swap(a.__fbthrift_field_floatVal, b.__fbthrift_field_floatVal);
  swap(a.__fbthrift_field_doubleVal, b.__fbthrift_field_doubleVal);
  swap(a.__fbthrift_field_stringVal, b.__fbthrift_field_stringVal);
  swap(a.__fbthrift_field_binaryVal, b.__fbthrift_field_binaryVal);
  swap(a.__fbthrift_field_enumVal, b.__fbthrift_field_enumVal);
  swap(a.__fbthrift_field_structVal, b.__fbthrift_field_structVal);
  swap(a.__fbthrift_field_unionVal, b.__fbthrift_field_unionVal);
  swap(a.__fbthrift_field_lateStructVal, b.__fbthrift_field_lateStructVal);
  swap(a.__fbthrift_field_optBoolVal, b.__fbthrift_field_optBoolVal);
  swap(a.__fbthrift_field_optByteVal, b.__fbthrift_field_optByteVal);
  swap(a.__fbthrift_field_optI16Val, b.__fbthrift_field_optI16Val);
  swap(a.__fbthrift_field_optI32Val, b.__fbthrift_field_optI32Val);
  swap(a.__fbthrift_field_optI64Val, b.__fbthrift_field_optI64Val);
  swap(a.__fbthrift_field_optFloatVal, b.__fbthrift_field_optFloatVal);
  swap(a.__fbthrift_field_optDoubleVal, b.__fbthrift_field_optDoubleVal);
  swap(a.__fbthrift_field_optStringVal, b.__fbthrift_field_optStringVal);
  swap(a.__fbthrift_field_optBinaryVal, b.__fbthrift_field_optBinaryVal);
  swap(a.__fbthrift_field_optEnumVal, b.__fbthrift_field_optEnumVal);
  swap(a.__fbthrift_field_optStructVal, b.__fbthrift_field_optStructVal);
  swap(a.__fbthrift_field_optLateStructVal, b.__fbthrift_field_optLateStructVal);
  swap(a.__fbthrift_field_optListVal, b.__fbthrift_field_optListVal);
  swap(a.__fbthrift_field_optSetVal, b.__fbthrift_field_optSetVal);
  swap(a.__fbthrift_field_optMapVal, b.__fbthrift_field_optMapVal);
  swap(a.__fbthrift_field_listMap, b.__fbthrift_field_listMap);
  swap(a.__fbthrift_field_mapMap, b.__fbthrift_field_mapMap);
  swap(a.__fbthrift_field_i32WithCustomDefault, b.__fbthrift_field_i32WithCustomDefault);
  swap(a.__fbthrift_field_structWithCustomDefault, b.__fbthrift_field_structWithCustomDefault);
  swap(a.__fbthrift_field_structWithFieldCustomDefault, b.__fbthrift_field_structWithFieldCustomDefault);
  swap(a.__isset, b.__isset);
}

template void MyStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyData>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::MyUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::LateDefStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyData>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::LateDefStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataWithCustomDefault>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyData>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::LateDefStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::LateDefStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* LateDefStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/LateDefStruct";
}

const folly::StringPiece LateDefStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<LateDefStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece LateDefStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<LateDefStruct>::name;
}


LateDefStruct::LateDefStruct(apache::thrift::FragileConstructor) {}


void LateDefStruct::__fbthrift_clear() {
  // clear all fields
}

void LateDefStruct::__fbthrift_clear_terse_fields() {
}

bool LateDefStruct::__fbthrift_is_empty() const {
  return true;
}

bool LateDefStruct::operator==([[maybe_unused]] const LateDefStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool LateDefStruct::operator<([[maybe_unused]] const LateDefStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] LateDefStruct& a, [[maybe_unused]] LateDefStruct& b) {
  using ::std::swap;
}

template void LateDefStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t LateDefStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t LateDefStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t LateDefStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void LateDefStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t LateDefStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t LateDefStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t LateDefStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::Recursive>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::Recursive>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* Recursive::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/Recursive";
}

const folly::StringPiece Recursive::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Recursive>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece Recursive::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Recursive>::name;
}

Recursive::Recursive(const Recursive&) = default;
Recursive& Recursive::operator=(const Recursive&) = default;
Recursive::Recursive() {
}


Recursive::~Recursive() {}

Recursive::Recursive([[maybe_unused]] Recursive&& other) noexcept :
    __fbthrift_field_nodes(std::move(other.__fbthrift_field_nodes)) {
}

Recursive& Recursive::operator=([[maybe_unused]] Recursive&& other) noexcept {
    this->__fbthrift_field_nodes = std::move(other.__fbthrift_field_nodes);
    return *this;
}


Recursive::Recursive(apache::thrift::FragileConstructor, ::std::map<::std::string, ::test::fixtures::patch::Recursive> nodes__arg) :
    __fbthrift_field_nodes(std::move(nodes__arg)) {
}


void Recursive::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_nodes.clear();
}

void Recursive::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_nodes.clear();
}

bool Recursive::__fbthrift_is_empty() const {
  return ::apache::thrift::op::isEmpty<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::struct_t<::test::fixtures::patch::Recursive>>>(this->__fbthrift_field_nodes);
}

bool Recursive::operator==([[maybe_unused]] const Recursive& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool Recursive::operator<([[maybe_unused]] const Recursive& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::std::map<::std::string, ::test::fixtures::patch::Recursive>& Recursive::get_nodes() const& {
  return __fbthrift_field_nodes;
}

::std::map<::std::string, ::test::fixtures::patch::Recursive> Recursive::get_nodes() && {
  return std::move(__fbthrift_field_nodes);
}


void swap([[maybe_unused]] Recursive& a, [[maybe_unused]] Recursive& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_nodes, b.__fbthrift_field_nodes);
}

template void Recursive::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Recursive::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Recursive::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Recursive::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void Recursive::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Recursive::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Recursive::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Recursive::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Recursive,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::map<::std::string, ::test::fixtures::patch::Recursive>>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::Bar>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::Bar>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* Bar::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/Bar";
}

const folly::StringPiece Bar::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Bar>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece Bar::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Bar>::name;
}

Bar::Bar(const Bar& srcObj) :
    __fbthrift_field_loop(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::structure>(srcObj.__fbthrift_field_loop)) {
}

static void __fbthrift_swap(Bar& lhs, Bar& rhs) { swap(lhs, rhs); }
Bar& Bar::operator=(const Bar& other) {
  Bar tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

Bar::Bar() :
      __fbthrift_field_loop(std::make_unique<::test::fixtures::patch::Loop>()) {
}


Bar::~Bar() {}

Bar::Bar([[maybe_unused]] Bar&& other) noexcept :
    __fbthrift_field_loop(std::move(other.__fbthrift_field_loop)) {
}

Bar& Bar::operator=([[maybe_unused]] Bar&& other) noexcept {
    this->__fbthrift_field_loop = std::move(other.__fbthrift_field_loop);
    return *this;
}


Bar::Bar(apache::thrift::FragileConstructor, ::std::unique_ptr<::test::fixtures::patch::Loop> loop__arg) :
    __fbthrift_field_loop(std::move(loop__arg)) {
}


void Bar::__fbthrift_clear() {
  // clear all fields
  if (this->__fbthrift_field_loop) ::apache::thrift::clear(*this->__fbthrift_field_loop);
}

void Bar::__fbthrift_clear_terse_fields() {
  if (this->__fbthrift_field_loop) ::apache::thrift::detail::st::clear_terse_fields(*this->__fbthrift_field_loop);
}

bool Bar::__fbthrift_is_empty() const {
  return this->__fbthrift_field_loop && ::apache::thrift::op::isEmpty<::apache::thrift::type::struct_t<::test::fixtures::patch::Loop>>(*this->__fbthrift_field_loop);
}

bool Bar::operator==([[maybe_unused]] const Bar& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool Bar::operator<([[maybe_unused]] const Bar& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] Bar& a, [[maybe_unused]] Bar& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_loop, b.__fbthrift_field_loop);
}

template void Bar::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Bar::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Bar::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Bar::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void Bar::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Bar::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Bar::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Bar::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Bar,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::Loop>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::Loop>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::Loop>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* Loop::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/Loop";
}

const folly::StringPiece Loop::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Loop>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece Loop::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Loop>::name;
}

Loop::Loop(const Loop&) = default;
Loop& Loop::operator=(const Loop&) = default;
Loop::Loop([[maybe_unused]] Loop&& other) noexcept :
    __fbthrift_field_bar(std::move(other.__fbthrift_field_bar)) {
}

Loop& Loop::operator=([[maybe_unused]] Loop&& other) noexcept {
    this->__fbthrift_field_bar = std::move(other.__fbthrift_field_bar);
    return *this;
}


Loop::Loop(apache::thrift::FragileConstructor, ::test::fixtures::patch::Bar bar__arg) :
    __fbthrift_field_bar(std::move(bar__arg)) {
}


void Loop::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::clear(this->__fbthrift_field_bar);
}

void Loop::__fbthrift_clear_terse_fields() {
  ::apache::thrift::detail::st::clear_terse_fields(this->__fbthrift_field_bar);
}

bool Loop::__fbthrift_is_empty() const {
  return ::apache::thrift::op::isEmpty<::apache::thrift::type::struct_t<::test::fixtures::patch::Bar>>(this->__fbthrift_field_bar);
}

bool Loop::operator==([[maybe_unused]] const Loop& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool Loop::operator<([[maybe_unused]] const Loop& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::test::fixtures::patch::Bar& Loop::get_bar() const& {
  return __fbthrift_field_bar;
}

::test::fixtures::patch::Bar Loop::get_bar() && {
  return std::move(__fbthrift_field_bar);
}


void swap([[maybe_unused]] Loop& a, [[maybe_unused]] Loop& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_bar, b.__fbthrift_field_bar);
}

template void Loop::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Loop::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Loop::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Loop::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void Loop::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Loop::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Loop::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Loop::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Loop,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::Bar>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::RefFields>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::RefFields>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* RefFields::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/RefFields";
}

const folly::StringPiece RefFields::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<RefFields>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece RefFields::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<RefFields>::name;
}

RefFields::RefFields(const RefFields& srcObj) :
    __fbthrift_field_unique(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>(srcObj.__fbthrift_field_unique)),
    __fbthrift_field_shared_const(srcObj.__fbthrift_field_shared_const),
    __fbthrift_field_shared_mustable(srcObj.__fbthrift_field_shared_mustable),
    __fbthrift_field_opt_unique(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>(srcObj.__fbthrift_field_opt_unique)),
    __fbthrift_field_opt_shared_const(srcObj.__fbthrift_field_opt_shared_const),
    __fbthrift_field_opt_shared_mustable(srcObj.__fbthrift_field_opt_shared_mustable),
    __fbthrift_field_opt_box(srcObj.__fbthrift_field_opt_box) {
}

static void __fbthrift_swap(RefFields& lhs, RefFields& rhs) { swap(lhs, rhs); }
RefFields& RefFields::operator=(const RefFields& other) {
  RefFields tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

RefFields::RefFields() :
      __fbthrift_field_unique(std::make_unique<::std::vector<::std::int32_t>>()),
      __fbthrift_field_shared_const(std::make_shared<::std::vector<::std::int32_t>>()),
      __fbthrift_field_shared_mustable(std::make_shared<::std::vector<::std::int32_t>>()) {
}


RefFields::~RefFields() {}

RefFields::RefFields([[maybe_unused]] RefFields&& other) noexcept :
    __fbthrift_field_unique(std::move(other.__fbthrift_field_unique)),
    __fbthrift_field_shared_const(std::move(other.__fbthrift_field_shared_const)),
    __fbthrift_field_shared_mustable(std::move(other.__fbthrift_field_shared_mustable)),
    __fbthrift_field_opt_unique(std::move(other.__fbthrift_field_opt_unique)),
    __fbthrift_field_opt_shared_const(std::move(other.__fbthrift_field_opt_shared_const)),
    __fbthrift_field_opt_shared_mustable(std::move(other.__fbthrift_field_opt_shared_mustable)),
    __fbthrift_field_opt_box(std::move(other.__fbthrift_field_opt_box)) {
}

RefFields& RefFields::operator=([[maybe_unused]] RefFields&& other) noexcept {
    this->__fbthrift_field_unique = std::move(other.__fbthrift_field_unique);
    this->__fbthrift_field_shared_const = std::move(other.__fbthrift_field_shared_const);
    this->__fbthrift_field_shared_mustable = std::move(other.__fbthrift_field_shared_mustable);
    this->__fbthrift_field_opt_unique = std::move(other.__fbthrift_field_opt_unique);
    this->__fbthrift_field_opt_shared_const = std::move(other.__fbthrift_field_opt_shared_const);
    this->__fbthrift_field_opt_shared_mustable = std::move(other.__fbthrift_field_opt_shared_mustable);
    this->__fbthrift_field_opt_box = std::move(other.__fbthrift_field_opt_box);
    return *this;
}


RefFields::RefFields(apache::thrift::FragileConstructor, ::std::unique_ptr<::std::vector<::std::int32_t>> unique__arg, ::std::shared_ptr<const ::std::vector<::std::int32_t>> shared_const__arg, ::std::shared_ptr<::std::vector<::std::int32_t>> shared_mustable__arg, ::std::unique_ptr<::std::vector<::std::int32_t>> opt_unique__arg, ::std::shared_ptr<const ::std::vector<::std::int32_t>> opt_shared_const__arg, ::std::shared_ptr<::std::vector<::std::int32_t>> opt_shared_mustable__arg, ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::int32_t>> opt_box__arg) :
    __fbthrift_field_unique(std::move(unique__arg)),
    __fbthrift_field_shared_const(std::move(shared_const__arg)),
    __fbthrift_field_shared_mustable(std::move(shared_mustable__arg)),
    __fbthrift_field_opt_unique(std::move(opt_unique__arg)),
    __fbthrift_field_opt_shared_const(std::move(opt_shared_const__arg)),
    __fbthrift_field_opt_shared_mustable(std::move(opt_shared_mustable__arg)),
    __fbthrift_field_opt_box(std::move(opt_box__arg)) {
}


void RefFields::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_unique = ::apache::thrift::detail::make_mutable_smart_ptr<::std::unique_ptr<::std::vector<::std::int32_t>>>();
  this->__fbthrift_field_shared_const = ::apache::thrift::detail::make_mutable_smart_ptr<::std::shared_ptr<const ::std::vector<::std::int32_t>>>();
  this->__fbthrift_field_shared_mustable = ::apache::thrift::detail::make_mutable_smart_ptr<::std::shared_ptr<::std::vector<::std::int32_t>>>();
  this->__fbthrift_field_opt_unique.reset();
  this->__fbthrift_field_opt_shared_const.reset();
  this->__fbthrift_field_opt_shared_mustable.reset();
  this->__fbthrift_field_opt_box.reset();
}

void RefFields::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_unique = ::apache::thrift::detail::make_mutable_smart_ptr<::std::unique_ptr<::std::vector<::std::int32_t>>>();
  this->__fbthrift_field_shared_const = ::apache::thrift::detail::make_mutable_smart_ptr<::std::shared_ptr<const ::std::vector<::std::int32_t>>>();
  this->__fbthrift_field_shared_mustable = ::apache::thrift::detail::make_mutable_smart_ptr<::std::shared_ptr<::std::vector<::std::int32_t>>>();
}

bool RefFields::__fbthrift_is_empty() const {
  return this->__fbthrift_field_unique && ::apache::thrift::op::isEmpty<::apache::thrift::type::list<::apache::thrift::type::i32_t>>(*this->__fbthrift_field_unique) &&
 this->__fbthrift_field_shared_const && ::apache::thrift::op::isEmpty<::apache::thrift::type::list<::apache::thrift::type::i32_t>>(*this->__fbthrift_field_shared_const) &&
 this->__fbthrift_field_shared_mustable && ::apache::thrift::op::isEmpty<::apache::thrift::type::list<::apache::thrift::type::i32_t>>(*this->__fbthrift_field_shared_mustable) &&
 !(this->__fbthrift_field_opt_unique) &&
 !(this->__fbthrift_field_opt_shared_const) &&
 !(this->__fbthrift_field_opt_shared_mustable) &&
 !(this->__fbthrift_field_opt_box);
}

bool RefFields::operator==([[maybe_unused]] const RefFields& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool RefFields::operator<([[maybe_unused]] const RefFields& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] RefFields& a, [[maybe_unused]] RefFields& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_unique, b.__fbthrift_field_unique);
  swap(a.__fbthrift_field_shared_const, b.__fbthrift_field_shared_const);
  swap(a.__fbthrift_field_shared_mustable, b.__fbthrift_field_shared_mustable);
  swap(a.__fbthrift_field_opt_unique, b.__fbthrift_field_opt_unique);
  swap(a.__fbthrift_field_opt_shared_const, b.__fbthrift_field_opt_shared_const);
  swap(a.__fbthrift_field_opt_shared_mustable, b.__fbthrift_field_opt_shared_mustable);
  swap(a.__fbthrift_field_opt_box, b.__fbthrift_field_opt_box);
}

template void RefFields::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t RefFields::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t RefFields::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t RefFields::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void RefFields::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t RefFields::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t RefFields::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t RefFields::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyDataPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyDataPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyDataPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyDataPatch";
}

const folly::StringPiece MyDataPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyDataPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyDataPatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyDataPatchStruct>::name;
}

MyDataPatchStruct::MyDataPatchStruct(const MyDataPatchStruct& srcObj) :
    __fbthrift_field_assign(srcObj.__fbthrift_field_assign),
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __fbthrift_field_remove(srcObj.__fbthrift_field_remove) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

static void __fbthrift_swap(MyDataPatchStruct& lhs, MyDataPatchStruct& rhs) { swap(lhs, rhs); }
MyDataPatchStruct& MyDataPatchStruct::operator=(const MyDataPatchStruct& other) {
  MyDataPatchStruct tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

MyDataPatchStruct::MyDataPatchStruct() :
      __fbthrift_field_clear() {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}


MyDataPatchStruct::~MyDataPatchStruct() {}

MyDataPatchStruct::MyDataPatchStruct([[maybe_unused]] MyDataPatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_remove(std::move(other.__fbthrift_field_remove)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

MyDataPatchStruct& MyDataPatchStruct::operator=([[maybe_unused]] MyDataPatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_remove = std::move(other.__fbthrift_field_remove);
    return *this;
}


MyDataPatchStruct::MyDataPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData> assign__arg, bool clear__arg, ::test::fixtures::patch::MyDataFieldPatch patchPrior__arg, ::test::fixtures::patch::MyDataEnsureStruct ensure__arg, ::test::fixtures::patch::MyDataFieldPatch patch__arg, ::apache::thrift::op::FieldIdList remove__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_remove(std::move(remove__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}


void MyDataPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.reset();
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::clear(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

void MyDataPatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::detail::st::clear_terse_fields(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

bool MyDataPatchStruct::__fbthrift_is_empty() const {
  return !(this->__fbthrift_field_assign) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataFieldPatchStruct>>>(this->__fbthrift_field_patchPrior) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataEnsureStruct>>(this->__fbthrift_field_ensure) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataFieldPatchStruct>>>(this->__fbthrift_field_patch) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldIdListToSetAdapter, ::apache::thrift::type::list<::apache::thrift::type::i16_t>>>(this->__fbthrift_field_remove);
}

bool MyDataPatchStruct::operator==([[maybe_unused]] const MyDataPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyDataPatchStruct::operator<([[maybe_unused]] const MyDataPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::test::fixtures::patch::MyDataEnsureStruct& MyDataPatchStruct::get_ensure() const& {
  return __fbthrift_field_ensure;
}

::test::fixtures::patch::MyDataEnsureStruct MyDataPatchStruct::get_ensure() && {
  return std::move(__fbthrift_field_ensure);
}


void swap([[maybe_unused]] MyDataPatchStruct& a, [[maybe_unused]] MyDataPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__fbthrift_field_remove, b.__fbthrift_field_remove);
}

template void MyDataPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyDataPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyDataPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyDataPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyDataPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyDataPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyDataPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyDataPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyData>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataFieldPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataEnsureStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataFieldPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyDataFieldPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyDataFieldPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyDataFieldPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyDataFieldPatch";
}

const folly::StringPiece MyDataFieldPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyDataFieldPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyDataFieldPatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyDataFieldPatchStruct>::name;
}

MyDataFieldPatchStruct::MyDataFieldPatchStruct(const MyDataFieldPatchStruct& srcObj) :
    __fbthrift_field_data1(srcObj.__fbthrift_field_data1),
    __fbthrift_field_data2(srcObj.__fbthrift_field_data2) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, 1>(*__fbthrift_field_data1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, 2>(*__fbthrift_field_data2, *this);
}

static void __fbthrift_swap(MyDataFieldPatchStruct& lhs, MyDataFieldPatchStruct& rhs) { swap(lhs, rhs); }
MyDataFieldPatchStruct& MyDataFieldPatchStruct::operator=(const MyDataFieldPatchStruct& other) {
  MyDataFieldPatchStruct tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

MyDataFieldPatchStruct::MyDataFieldPatchStruct() :
      __fbthrift_field_data1(::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>())),
      __fbthrift_field_data2(::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>())) {
}


MyDataFieldPatchStruct::~MyDataFieldPatchStruct() {}

MyDataFieldPatchStruct::MyDataFieldPatchStruct([[maybe_unused]] MyDataFieldPatchStruct&& other) noexcept :
    __fbthrift_field_data1(std::move(other.__fbthrift_field_data1)),
    __fbthrift_field_data2(std::move(other.__fbthrift_field_data2)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, 1>(*__fbthrift_field_data1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, 2>(*__fbthrift_field_data2, *this);
}

MyDataFieldPatchStruct& MyDataFieldPatchStruct::operator=([[maybe_unused]] MyDataFieldPatchStruct&& other) noexcept {
    this->__fbthrift_field_data1 = std::move(other.__fbthrift_field_data1);
    this->__fbthrift_field_data2 = std::move(other.__fbthrift_field_data2);
    return *this;
}


MyDataFieldPatchStruct::MyDataFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch> data1__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch> data2__arg) :
    __fbthrift_field_data1(std::move(data1__arg)),
    __fbthrift_field_data2(std::move(data2__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, 1>(*__fbthrift_field_data1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, 2>(*__fbthrift_field_data2, *this);
}


void MyDataFieldPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_data1 = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>());
  this->__fbthrift_field_data2 = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>());
}

void MyDataFieldPatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_data1 = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>());
  this->__fbthrift_field_data2 = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>());
}

bool MyDataFieldPatchStruct::__fbthrift_is_empty() const {
  return (this->__fbthrift_field_data1.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>(*this->__fbthrift_field_data1)) &&
 (this->__fbthrift_field_data2.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>(*this->__fbthrift_field_data2));
}

bool MyDataFieldPatchStruct::operator==([[maybe_unused]] const MyDataFieldPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyDataFieldPatchStruct::operator<([[maybe_unused]] const MyDataFieldPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] MyDataFieldPatchStruct& a, [[maybe_unused]] MyDataFieldPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_data1, b.__fbthrift_field_data1);
  swap(a.__fbthrift_field_data2, b.__fbthrift_field_data2);
}

template void MyDataFieldPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyDataFieldPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyDataFieldPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyDataFieldPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyDataFieldPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyDataFieldPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyDataFieldPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyDataFieldPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::StringPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I32Patch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyDataEnsureStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyDataEnsureStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyDataEnsureStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyDataEnsureStruct";
}

const folly::StringPiece MyDataEnsureStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyDataEnsureStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyDataEnsureStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyDataEnsureStruct>::name;
}

MyDataEnsureStruct::MyDataEnsureStruct(const MyDataEnsureStruct&) = default;
MyDataEnsureStruct& MyDataEnsureStruct::operator=(const MyDataEnsureStruct&) = default;
MyDataEnsureStruct::MyDataEnsureStruct() :
      __fbthrift_field_data2() {
}


MyDataEnsureStruct::~MyDataEnsureStruct() {}

MyDataEnsureStruct::MyDataEnsureStruct([[maybe_unused]] MyDataEnsureStruct&& other) noexcept :
    __fbthrift_field_data1(std::move(other.__fbthrift_field_data1)),
    __fbthrift_field_data2(std::move(other.__fbthrift_field_data2)),
    __isset(other.__isset) {
}

MyDataEnsureStruct& MyDataEnsureStruct::operator=([[maybe_unused]] MyDataEnsureStruct&& other) noexcept {
    this->__fbthrift_field_data1 = std::move(other.__fbthrift_field_data1);
    this->__fbthrift_field_data2 = std::move(other.__fbthrift_field_data2);
    __isset = other.__isset;
    return *this;
}


MyDataEnsureStruct::MyDataEnsureStruct(apache::thrift::FragileConstructor, ::std::string data1__arg, ::std::int32_t data2__arg) :
    __fbthrift_field_data1(std::move(data1__arg)),
    __fbthrift_field_data2(std::move(data2__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void MyDataEnsureStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_data1 = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_data2 = ::std::int32_t();
  __isset = {};
}

void MyDataEnsureStruct::__fbthrift_clear_terse_fields() {
}

bool MyDataEnsureStruct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0)) &&
 !(this->__isset.get(1));
}

bool MyDataEnsureStruct::operator==([[maybe_unused]] const MyDataEnsureStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyDataEnsureStruct::operator<([[maybe_unused]] const MyDataEnsureStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] MyDataEnsureStruct& a, [[maybe_unused]] MyDataEnsureStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_data1, b.__fbthrift_field_data1);
  swap(a.__fbthrift_field_data2, b.__fbthrift_field_data2);
  swap(a.__isset, b.__isset);
}

template void MyDataEnsureStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyDataEnsureStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyDataEnsureStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyDataEnsureStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyDataEnsureStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyDataEnsureStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyDataEnsureStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyDataEnsureStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyDataWithCustomDefaultPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyDataWithCustomDefaultPatch";
}

const folly::StringPiece MyDataWithCustomDefaultPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyDataWithCustomDefaultPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyDataWithCustomDefaultPatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyDataWithCustomDefaultPatchStruct>::name;
}

MyDataWithCustomDefaultPatchStruct::MyDataWithCustomDefaultPatchStruct(const MyDataWithCustomDefaultPatchStruct& srcObj) :
    __fbthrift_field_assign(srcObj.__fbthrift_field_assign),
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __fbthrift_field_remove(srcObj.__fbthrift_field_remove) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

static void __fbthrift_swap(MyDataWithCustomDefaultPatchStruct& lhs, MyDataWithCustomDefaultPatchStruct& rhs) { swap(lhs, rhs); }
MyDataWithCustomDefaultPatchStruct& MyDataWithCustomDefaultPatchStruct::operator=(const MyDataWithCustomDefaultPatchStruct& other) {
  MyDataWithCustomDefaultPatchStruct tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

MyDataWithCustomDefaultPatchStruct::MyDataWithCustomDefaultPatchStruct() :
      __fbthrift_field_clear() {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}


MyDataWithCustomDefaultPatchStruct::~MyDataWithCustomDefaultPatchStruct() {}

MyDataWithCustomDefaultPatchStruct::MyDataWithCustomDefaultPatchStruct([[maybe_unused]] MyDataWithCustomDefaultPatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_remove(std::move(other.__fbthrift_field_remove)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

MyDataWithCustomDefaultPatchStruct& MyDataWithCustomDefaultPatchStruct::operator=([[maybe_unused]] MyDataWithCustomDefaultPatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_remove = std::move(other.__fbthrift_field_remove);
    return *this;
}


MyDataWithCustomDefaultPatchStruct::MyDataWithCustomDefaultPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyDataWithCustomDefault> assign__arg, bool clear__arg, ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatch patchPrior__arg, ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct ensure__arg, ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatch patch__arg, ::apache::thrift::op::FieldIdList remove__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_remove(std::move(remove__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}


void MyDataWithCustomDefaultPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.reset();
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::clear(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

void MyDataWithCustomDefaultPatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::detail::st::clear_terse_fields(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

bool MyDataWithCustomDefaultPatchStruct::__fbthrift_is_empty() const {
  return !(this->__fbthrift_field_assign) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>>>(this->__fbthrift_field_patchPrior) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>>(this->__fbthrift_field_ensure) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>>>(this->__fbthrift_field_patch) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldIdListToSetAdapter, ::apache::thrift::type::list<::apache::thrift::type::i16_t>>>(this->__fbthrift_field_remove);
}

bool MyDataWithCustomDefaultPatchStruct::operator==([[maybe_unused]] const MyDataWithCustomDefaultPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyDataWithCustomDefaultPatchStruct::operator<([[maybe_unused]] const MyDataWithCustomDefaultPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct& MyDataWithCustomDefaultPatchStruct::get_ensure() const& {
  return __fbthrift_field_ensure;
}

::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct MyDataWithCustomDefaultPatchStruct::get_ensure() && {
  return std::move(__fbthrift_field_ensure);
}


void swap([[maybe_unused]] MyDataWithCustomDefaultPatchStruct& a, [[maybe_unused]] MyDataWithCustomDefaultPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__fbthrift_field_remove, b.__fbthrift_field_remove);
}

template void MyDataWithCustomDefaultPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyDataWithCustomDefaultPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyDataWithCustomDefaultPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyDataWithCustomDefaultPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyDataWithCustomDefaultPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyDataWithCustomDefaultPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyDataWithCustomDefaultPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyDataWithCustomDefaultPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataWithCustomDefaultPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataWithCustomDefault>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataWithCustomDefaultPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataWithCustomDefaultPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataWithCustomDefaultPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyDataWithCustomDefaultFieldPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyDataWithCustomDefaultFieldPatch";
}

const folly::StringPiece MyDataWithCustomDefaultFieldPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyDataWithCustomDefaultFieldPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyDataWithCustomDefaultFieldPatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyDataWithCustomDefaultFieldPatchStruct>::name;
}

MyDataWithCustomDefaultFieldPatchStruct::MyDataWithCustomDefaultFieldPatchStruct(const MyDataWithCustomDefaultFieldPatchStruct& srcObj) :
    __fbthrift_field_data1(srcObj.__fbthrift_field_data1),
    __fbthrift_field_data2(srcObj.__fbthrift_field_data2) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, 1>(*__fbthrift_field_data1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, 2>(*__fbthrift_field_data2, *this);
}

static void __fbthrift_swap(MyDataWithCustomDefaultFieldPatchStruct& lhs, MyDataWithCustomDefaultFieldPatchStruct& rhs) { swap(lhs, rhs); }
MyDataWithCustomDefaultFieldPatchStruct& MyDataWithCustomDefaultFieldPatchStruct::operator=(const MyDataWithCustomDefaultFieldPatchStruct& other) {
  MyDataWithCustomDefaultFieldPatchStruct tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

MyDataWithCustomDefaultFieldPatchStruct::MyDataWithCustomDefaultFieldPatchStruct() :
      __fbthrift_field_data1(::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>())),
      __fbthrift_field_data2(::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>())) {
}


MyDataWithCustomDefaultFieldPatchStruct::~MyDataWithCustomDefaultFieldPatchStruct() {}

MyDataWithCustomDefaultFieldPatchStruct::MyDataWithCustomDefaultFieldPatchStruct([[maybe_unused]] MyDataWithCustomDefaultFieldPatchStruct&& other) noexcept :
    __fbthrift_field_data1(std::move(other.__fbthrift_field_data1)),
    __fbthrift_field_data2(std::move(other.__fbthrift_field_data2)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, 1>(*__fbthrift_field_data1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, 2>(*__fbthrift_field_data2, *this);
}

MyDataWithCustomDefaultFieldPatchStruct& MyDataWithCustomDefaultFieldPatchStruct::operator=([[maybe_unused]] MyDataWithCustomDefaultFieldPatchStruct&& other) noexcept {
    this->__fbthrift_field_data1 = std::move(other.__fbthrift_field_data1);
    this->__fbthrift_field_data2 = std::move(other.__fbthrift_field_data2);
    return *this;
}


MyDataWithCustomDefaultFieldPatchStruct::MyDataWithCustomDefaultFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch> data1__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch> data2__arg) :
    __fbthrift_field_data1(std::move(data1__arg)),
    __fbthrift_field_data2(std::move(data2__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, 1>(*__fbthrift_field_data1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, 2>(*__fbthrift_field_data2, *this);
}


void MyDataWithCustomDefaultFieldPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_data1 = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>());
  this->__fbthrift_field_data2 = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>());
}

void MyDataWithCustomDefaultFieldPatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_data1 = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>());
  this->__fbthrift_field_data2 = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>());
}

bool MyDataWithCustomDefaultFieldPatchStruct::__fbthrift_is_empty() const {
  return (this->__fbthrift_field_data1.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>(*this->__fbthrift_field_data1)) &&
 (this->__fbthrift_field_data2.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>(*this->__fbthrift_field_data2));
}

bool MyDataWithCustomDefaultFieldPatchStruct::operator==([[maybe_unused]] const MyDataWithCustomDefaultFieldPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyDataWithCustomDefaultFieldPatchStruct::operator<([[maybe_unused]] const MyDataWithCustomDefaultFieldPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] MyDataWithCustomDefaultFieldPatchStruct& a, [[maybe_unused]] MyDataWithCustomDefaultFieldPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_data1, b.__fbthrift_field_data1);
  swap(a.__fbthrift_field_data2, b.__fbthrift_field_data2);
}

template void MyDataWithCustomDefaultFieldPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyDataWithCustomDefaultFieldPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyDataWithCustomDefaultFieldPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyDataWithCustomDefaultFieldPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyDataWithCustomDefaultFieldPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyDataWithCustomDefaultFieldPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyDataWithCustomDefaultFieldPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyDataWithCustomDefaultFieldPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataWithCustomDefaultFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::StringPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataWithCustomDefaultFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I32Patch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyDataWithCustomDefaultEnsureStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyDataWithCustomDefaultEnsureStruct";
}

const folly::StringPiece MyDataWithCustomDefaultEnsureStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyDataWithCustomDefaultEnsureStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyDataWithCustomDefaultEnsureStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyDataWithCustomDefaultEnsureStruct>::name;
}

MyDataWithCustomDefaultEnsureStruct::MyDataWithCustomDefaultEnsureStruct(const MyDataWithCustomDefaultEnsureStruct&) = default;
MyDataWithCustomDefaultEnsureStruct& MyDataWithCustomDefaultEnsureStruct::operator=(const MyDataWithCustomDefaultEnsureStruct&) = default;
MyDataWithCustomDefaultEnsureStruct::MyDataWithCustomDefaultEnsureStruct() :
      __fbthrift_field_data2() {
}


MyDataWithCustomDefaultEnsureStruct::~MyDataWithCustomDefaultEnsureStruct() {}

MyDataWithCustomDefaultEnsureStruct::MyDataWithCustomDefaultEnsureStruct([[maybe_unused]] MyDataWithCustomDefaultEnsureStruct&& other) noexcept :
    __fbthrift_field_data1(std::move(other.__fbthrift_field_data1)),
    __fbthrift_field_data2(std::move(other.__fbthrift_field_data2)),
    __isset(other.__isset) {
}

MyDataWithCustomDefaultEnsureStruct& MyDataWithCustomDefaultEnsureStruct::operator=([[maybe_unused]] MyDataWithCustomDefaultEnsureStruct&& other) noexcept {
    this->__fbthrift_field_data1 = std::move(other.__fbthrift_field_data1);
    this->__fbthrift_field_data2 = std::move(other.__fbthrift_field_data2);
    __isset = other.__isset;
    return *this;
}


MyDataWithCustomDefaultEnsureStruct::MyDataWithCustomDefaultEnsureStruct(apache::thrift::FragileConstructor, ::std::string data1__arg, ::std::int32_t data2__arg) :
    __fbthrift_field_data1(std::move(data1__arg)),
    __fbthrift_field_data2(std::move(data2__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void MyDataWithCustomDefaultEnsureStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_data1 = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_data2 = ::std::int32_t();
  __isset = {};
}

void MyDataWithCustomDefaultEnsureStruct::__fbthrift_clear_terse_fields() {
}

bool MyDataWithCustomDefaultEnsureStruct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0)) &&
 !(this->__isset.get(1));
}

bool MyDataWithCustomDefaultEnsureStruct::operator==([[maybe_unused]] const MyDataWithCustomDefaultEnsureStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyDataWithCustomDefaultEnsureStruct::operator<([[maybe_unused]] const MyDataWithCustomDefaultEnsureStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] MyDataWithCustomDefaultEnsureStruct& a, [[maybe_unused]] MyDataWithCustomDefaultEnsureStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_data1, b.__fbthrift_field_data1);
  swap(a.__fbthrift_field_data2, b.__fbthrift_field_data2);
  swap(a.__isset, b.__isset);
}

template void MyDataWithCustomDefaultEnsureStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyDataWithCustomDefaultEnsureStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyDataWithCustomDefaultEnsureStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyDataWithCustomDefaultEnsureStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyDataWithCustomDefaultEnsureStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyDataWithCustomDefaultEnsureStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyDataWithCustomDefaultEnsureStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyDataWithCustomDefaultEnsureStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::InnerUnionPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::InnerUnionPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* InnerUnionPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/InnerUnionPatch";
}

const folly::StringPiece InnerUnionPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<InnerUnionPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece InnerUnionPatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<InnerUnionPatchStruct>::name;
}

InnerUnionPatchStruct::InnerUnionPatchStruct(const InnerUnionPatchStruct& srcObj) :
    __fbthrift_field_assign(srcObj.__fbthrift_field_assign),
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::InnerUnionFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::InnerUnionFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
}

static void __fbthrift_swap(InnerUnionPatchStruct& lhs, InnerUnionPatchStruct& rhs) { swap(lhs, rhs); }
InnerUnionPatchStruct& InnerUnionPatchStruct::operator=(const InnerUnionPatchStruct& other) {
  InnerUnionPatchStruct tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

InnerUnionPatchStruct::InnerUnionPatchStruct() :
      __fbthrift_field_clear(),
      __fbthrift_field_ensure(::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnion>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::union_t<::test::fixtures::patch::InnerUnion>>())) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::InnerUnionFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::InnerUnionFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
}


InnerUnionPatchStruct::~InnerUnionPatchStruct() {}

InnerUnionPatchStruct::InnerUnionPatchStruct([[maybe_unused]] InnerUnionPatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::InnerUnionFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::InnerUnionFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
}

InnerUnionPatchStruct& InnerUnionPatchStruct::operator=([[maybe_unused]] InnerUnionPatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    return *this;
}


InnerUnionPatchStruct::InnerUnionPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::InnerUnion> assign__arg, bool clear__arg, ::test::fixtures::patch::InnerUnionFieldPatch patchPrior__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnion> ensure__arg, ::test::fixtures::patch::InnerUnionFieldPatch patch__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::InnerUnionFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::InnerUnionFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
}


void InnerUnionPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.reset();
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::InnerUnionFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  this->__fbthrift_field_ensure = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnion>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::union_t<::test::fixtures::patch::InnerUnion>>());
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::InnerUnionFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
}

void InnerUnionPatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::InnerUnionFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  this->__fbthrift_field_ensure = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnion>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::union_t<::test::fixtures::patch::InnerUnion>>());
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::InnerUnionFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
}

bool InnerUnionPatchStruct::__fbthrift_is_empty() const {
  return !(this->__fbthrift_field_assign) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::InnerUnionFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionFieldPatchStruct>>>(this->__fbthrift_field_patchPrior) &&
 (this->__fbthrift_field_ensure.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::union_t<::test::fixtures::patch::InnerUnion>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::union_t<::test::fixtures::patch::InnerUnion>>(*this->__fbthrift_field_ensure)) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::InnerUnionFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionFieldPatchStruct>>>(this->__fbthrift_field_patch);
}

bool InnerUnionPatchStruct::operator==([[maybe_unused]] const InnerUnionPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool InnerUnionPatchStruct::operator<([[maybe_unused]] const InnerUnionPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] InnerUnionPatchStruct& a, [[maybe_unused]] InnerUnionPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
}

template void InnerUnionPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t InnerUnionPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t InnerUnionPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t InnerUnionPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void InnerUnionPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t InnerUnionPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t InnerUnionPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t InnerUnionPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        InnerUnionPatchStruct,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::InnerUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        InnerUnionPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::InnerUnionFieldPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        InnerUnionPatchStruct,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::InnerUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        InnerUnionPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::InnerUnionFieldPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::InnerUnionFieldPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::InnerUnionFieldPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* InnerUnionFieldPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/InnerUnionFieldPatch";
}

const folly::StringPiece InnerUnionFieldPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<InnerUnionFieldPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece InnerUnionFieldPatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<InnerUnionFieldPatchStruct>::name;
}

InnerUnionFieldPatchStruct::InnerUnionFieldPatchStruct(const InnerUnionFieldPatchStruct& srcObj) :
    __fbthrift_field_innerOption(srcObj.__fbthrift_field_innerOption) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, 1>(*__fbthrift_field_innerOption, *this);
}

static void __fbthrift_swap(InnerUnionFieldPatchStruct& lhs, InnerUnionFieldPatchStruct& rhs) { swap(lhs, rhs); }
InnerUnionFieldPatchStruct& InnerUnionFieldPatchStruct::operator=(const InnerUnionFieldPatchStruct& other) {
  InnerUnionFieldPatchStruct tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

InnerUnionFieldPatchStruct::InnerUnionFieldPatchStruct() :
      __fbthrift_field_innerOption(::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>())) {
}


InnerUnionFieldPatchStruct::~InnerUnionFieldPatchStruct() {}

InnerUnionFieldPatchStruct::InnerUnionFieldPatchStruct([[maybe_unused]] InnerUnionFieldPatchStruct&& other) noexcept :
    __fbthrift_field_innerOption(std::move(other.__fbthrift_field_innerOption)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, 1>(*__fbthrift_field_innerOption, *this);
}

InnerUnionFieldPatchStruct& InnerUnionFieldPatchStruct::operator=([[maybe_unused]] InnerUnionFieldPatchStruct&& other) noexcept {
    this->__fbthrift_field_innerOption = std::move(other.__fbthrift_field_innerOption);
    return *this;
}


InnerUnionFieldPatchStruct::InnerUnionFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch> innerOption__arg) :
    __fbthrift_field_innerOption(std::move(innerOption__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, 1>(*__fbthrift_field_innerOption, *this);
}


void InnerUnionFieldPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_innerOption = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>());
}

void InnerUnionFieldPatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_innerOption = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>());
}

bool InnerUnionFieldPatchStruct::__fbthrift_is_empty() const {
  return (this->__fbthrift_field_innerOption.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>(*this->__fbthrift_field_innerOption));
}

bool InnerUnionFieldPatchStruct::operator==([[maybe_unused]] const InnerUnionFieldPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool InnerUnionFieldPatchStruct::operator<([[maybe_unused]] const InnerUnionFieldPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] InnerUnionFieldPatchStruct& a, [[maybe_unused]] InnerUnionFieldPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_innerOption, b.__fbthrift_field_innerOption);
}

template void InnerUnionFieldPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t InnerUnionFieldPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t InnerUnionFieldPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t InnerUnionFieldPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void InnerUnionFieldPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t InnerUnionFieldPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t InnerUnionFieldPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t InnerUnionFieldPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        InnerUnionFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::BinaryPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyUnionPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyUnionPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyUnionPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyUnionPatch";
}

const folly::StringPiece MyUnionPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyUnionPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyUnionPatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyUnionPatchStruct>::name;
}

MyUnionPatchStruct::MyUnionPatchStruct(const MyUnionPatchStruct& srcObj) :
    __fbthrift_field_assign(srcObj.__fbthrift_field_assign),
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyUnionFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyUnionFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
}

static void __fbthrift_swap(MyUnionPatchStruct& lhs, MyUnionPatchStruct& rhs) { swap(lhs, rhs); }
MyUnionPatchStruct& MyUnionPatchStruct::operator=(const MyUnionPatchStruct& other) {
  MyUnionPatchStruct tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

MyUnionPatchStruct::MyUnionPatchStruct() :
      __fbthrift_field_clear(),
      __fbthrift_field_ensure(::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnion>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>>())) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyUnionFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyUnionFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
}


MyUnionPatchStruct::~MyUnionPatchStruct() {}

MyUnionPatchStruct::MyUnionPatchStruct([[maybe_unused]] MyUnionPatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyUnionFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyUnionFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
}

MyUnionPatchStruct& MyUnionPatchStruct::operator=([[maybe_unused]] MyUnionPatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    return *this;
}


MyUnionPatchStruct::MyUnionPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion> assign__arg, bool clear__arg, ::test::fixtures::patch::MyUnionFieldPatch patchPrior__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnion> ensure__arg, ::test::fixtures::patch::MyUnionFieldPatch patch__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyUnionFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyUnionFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
}


void MyUnionPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.reset();
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyUnionFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  this->__fbthrift_field_ensure = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnion>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>>());
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyUnionFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
}

void MyUnionPatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyUnionFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  this->__fbthrift_field_ensure = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnion>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>>());
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyUnionFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
}

bool MyUnionPatchStruct::__fbthrift_is_empty() const {
  return !(this->__fbthrift_field_assign) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyUnionFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionFieldPatchStruct>>>(this->__fbthrift_field_patchPrior) &&
 (this->__fbthrift_field_ensure.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::union_t<::test::fixtures::patch::MyUnion>>(*this->__fbthrift_field_ensure)) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyUnionFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionFieldPatchStruct>>>(this->__fbthrift_field_patch);
}

bool MyUnionPatchStruct::operator==([[maybe_unused]] const MyUnionPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyUnionPatchStruct::operator<([[maybe_unused]] const MyUnionPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] MyUnionPatchStruct& a, [[maybe_unused]] MyUnionPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
}

template void MyUnionPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyUnionPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyUnionPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyUnionPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyUnionPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyUnionPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyUnionPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyUnionPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionPatchStruct,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::MyUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyUnionFieldPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionPatchStruct,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::MyUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyUnionFieldPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyUnionFieldPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyUnionFieldPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyUnionFieldPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyUnionFieldPatch";
}

const folly::StringPiece MyUnionFieldPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyUnionFieldPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyUnionFieldPatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyUnionFieldPatchStruct>::name;
}

MyUnionFieldPatchStruct::MyUnionFieldPatchStruct(const MyUnionFieldPatchStruct& srcObj) :
    __fbthrift_field_option1(srcObj.__fbthrift_field_option1),
    __fbthrift_field_option2(srcObj.__fbthrift_field_option2),
    __fbthrift_field_option3(srcObj.__fbthrift_field_option3) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, 1>(*__fbthrift_field_option1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, 2>(*__fbthrift_field_option2, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::InnerUnionPatchStruct>, 3>(*__fbthrift_field_option3, *this);
}

static void __fbthrift_swap(MyUnionFieldPatchStruct& lhs, MyUnionFieldPatchStruct& rhs) { swap(lhs, rhs); }
MyUnionFieldPatchStruct& MyUnionFieldPatchStruct::operator=(const MyUnionFieldPatchStruct& other) {
  MyUnionFieldPatchStruct tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

MyUnionFieldPatchStruct::MyUnionFieldPatchStruct() :
      __fbthrift_field_option1(::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>())),
      __fbthrift_field_option2(::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>())),
      __fbthrift_field_option3(::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnionPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::InnerUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionPatchStruct>>>())) {
}


MyUnionFieldPatchStruct::~MyUnionFieldPatchStruct() {}

MyUnionFieldPatchStruct::MyUnionFieldPatchStruct([[maybe_unused]] MyUnionFieldPatchStruct&& other) noexcept :
    __fbthrift_field_option1(std::move(other.__fbthrift_field_option1)),
    __fbthrift_field_option2(std::move(other.__fbthrift_field_option2)),
    __fbthrift_field_option3(std::move(other.__fbthrift_field_option3)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, 1>(*__fbthrift_field_option1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, 2>(*__fbthrift_field_option2, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::InnerUnionPatchStruct>, 3>(*__fbthrift_field_option3, *this);
}

MyUnionFieldPatchStruct& MyUnionFieldPatchStruct::operator=([[maybe_unused]] MyUnionFieldPatchStruct&& other) noexcept {
    this->__fbthrift_field_option1 = std::move(other.__fbthrift_field_option1);
    this->__fbthrift_field_option2 = std::move(other.__fbthrift_field_option2);
    this->__fbthrift_field_option3 = std::move(other.__fbthrift_field_option3);
    return *this;
}


MyUnionFieldPatchStruct::MyUnionFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch> option1__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch> option2__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnionPatch> option3__arg) :
    __fbthrift_field_option1(std::move(option1__arg)),
    __fbthrift_field_option2(std::move(option2__arg)),
    __fbthrift_field_option3(std::move(option3__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, 1>(*__fbthrift_field_option1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, 2>(*__fbthrift_field_option2, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::InnerUnionPatchStruct>, 3>(*__fbthrift_field_option3, *this);
}


void MyUnionFieldPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_option1 = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>());
  this->__fbthrift_field_option2 = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>());
  this->__fbthrift_field_option3 = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnionPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::InnerUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionPatchStruct>>>());
}

void MyUnionFieldPatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_option1 = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>());
  this->__fbthrift_field_option2 = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>());
  this->__fbthrift_field_option3 = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::InnerUnionPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::InnerUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionPatchStruct>>>());
}

bool MyUnionFieldPatchStruct::__fbthrift_is_empty() const {
  return (this->__fbthrift_field_option1.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>(*this->__fbthrift_field_option1)) &&
 (this->__fbthrift_field_option2.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>(*this->__fbthrift_field_option2)) &&
 (this->__fbthrift_field_option3.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::InnerUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionPatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::InnerUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::InnerUnionPatchStruct>>>(*this->__fbthrift_field_option3));
}

bool MyUnionFieldPatchStruct::operator==([[maybe_unused]] const MyUnionFieldPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyUnionFieldPatchStruct::operator<([[maybe_unused]] const MyUnionFieldPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] MyUnionFieldPatchStruct& a, [[maybe_unused]] MyUnionFieldPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_option1, b.__fbthrift_field_option1);
  swap(a.__fbthrift_field_option2, b.__fbthrift_field_option2);
  swap(a.__fbthrift_field_option3, b.__fbthrift_field_option3);
}

template void MyUnionFieldPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyUnionFieldPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyUnionFieldPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyUnionFieldPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyUnionFieldPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyUnionFieldPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyUnionFieldPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyUnionFieldPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::StringPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I32Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::InnerUnionPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructPatch";
}

const folly::StringPiece MyStructPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStructPatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStructPatchStruct>::name;
}

MyStructPatchStruct::MyStructPatchStruct(const MyStructPatchStruct& srcObj) :
    __fbthrift_field_assign(srcObj.__fbthrift_field_assign),
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __fbthrift_field_remove(srcObj.__fbthrift_field_remove) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyStructFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyStructFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

static void __fbthrift_swap(MyStructPatchStruct& lhs, MyStructPatchStruct& rhs) { swap(lhs, rhs); }
MyStructPatchStruct& MyStructPatchStruct::operator=(const MyStructPatchStruct& other) {
  MyStructPatchStruct tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

MyStructPatchStruct::MyStructPatchStruct() :
      __fbthrift_field_clear() {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyStructFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyStructFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}


MyStructPatchStruct::~MyStructPatchStruct() {}

MyStructPatchStruct::MyStructPatchStruct([[maybe_unused]] MyStructPatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_remove(std::move(other.__fbthrift_field_remove)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyStructFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyStructFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

MyStructPatchStruct& MyStructPatchStruct::operator=([[maybe_unused]] MyStructPatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_remove = std::move(other.__fbthrift_field_remove);
    return *this;
}


MyStructPatchStruct::MyStructPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct> assign__arg, bool clear__arg, ::test::fixtures::patch::MyStructFieldPatch patchPrior__arg, ::test::fixtures::patch::MyStructEnsureStruct ensure__arg, ::test::fixtures::patch::MyStructFieldPatch patch__arg, ::apache::thrift::op::FieldIdList remove__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_remove(std::move(remove__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyStructFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyStructFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}


void MyStructPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.reset();
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyStructFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::clear(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyStructFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

void MyStructPatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyStructFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::detail::st::clear_terse_fields(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyStructFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

bool MyStructPatchStruct::__fbthrift_is_empty() const {
  return !(this->__fbthrift_field_assign) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyStructFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructFieldPatchStruct>>>(this->__fbthrift_field_patchPrior) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructEnsureStruct>>(this->__fbthrift_field_ensure) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyStructFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructFieldPatchStruct>>>(this->__fbthrift_field_patch) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldIdListToSetAdapter, ::apache::thrift::type::list<::apache::thrift::type::i16_t>>>(this->__fbthrift_field_remove);
}

bool MyStructPatchStruct::operator==([[maybe_unused]] const MyStructPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyStructPatchStruct::operator<([[maybe_unused]] const MyStructPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::test::fixtures::patch::MyStructEnsureStruct& MyStructPatchStruct::get_ensure() const& {
  return __fbthrift_field_ensure;
}

::test::fixtures::patch::MyStructEnsureStruct MyStructPatchStruct::get_ensure() && {
  return std::move(__fbthrift_field_ensure);
}


void swap([[maybe_unused]] MyStructPatchStruct& a, [[maybe_unused]] MyStructPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__fbthrift_field_remove, b.__fbthrift_field_remove);
}

template void MyStructPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructFieldPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructEnsureStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructFieldPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructField10PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructField10PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructField10PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructField10Patch";
}

const folly::StringPiece MyStructField10PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructField10PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStructField10PatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStructField10PatchStruct>::name;
}


MyStructField10PatchStruct::MyStructField10PatchStruct(apache::thrift::FragileConstructor, ::test::fixtures::patch::MyEnum assign__arg, bool clear__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void MyStructField10PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign = ::test::fixtures::patch::MyEnum();
  this->__fbthrift_field_clear = bool();
  __isset = {};
}

void MyStructField10PatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
}

bool MyStructField10PatchStruct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0)) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear);
}

bool MyStructField10PatchStruct::operator==([[maybe_unused]] const MyStructField10PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyStructField10PatchStruct::operator<([[maybe_unused]] const MyStructField10PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] MyStructField10PatchStruct& a, [[maybe_unused]] MyStructField10PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__isset, b.__isset);
}

template void MyStructField10PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField10PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField10PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField10PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField10PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField10PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField10PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField10PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructField23PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructField23PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructField23PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructField23Patch";
}

const folly::StringPiece MyStructField23PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructField23PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStructField23PatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStructField23PatchStruct>::name;
}


MyStructField23PatchStruct::MyStructField23PatchStruct(apache::thrift::FragileConstructor, ::test::fixtures::patch::MyEnum assign__arg, bool clear__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void MyStructField23PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign = ::test::fixtures::patch::MyEnum();
  this->__fbthrift_field_clear = bool();
  __isset = {};
}

void MyStructField23PatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
}

bool MyStructField23PatchStruct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0)) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear);
}

bool MyStructField23PatchStruct::operator==([[maybe_unused]] const MyStructField23PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyStructField23PatchStruct::operator<([[maybe_unused]] const MyStructField23PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] MyStructField23PatchStruct& a, [[maybe_unused]] MyStructField23PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__isset, b.__isset);
}

template void MyStructField23PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField23PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField23PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField23PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField23PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField23PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField23PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField23PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructField26PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructField26PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructField26PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructField26Patch";
}

const folly::StringPiece MyStructField26PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructField26PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStructField26PatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStructField26PatchStruct>::name;
}

MyStructField26PatchStruct::MyStructField26PatchStruct(const MyStructField26PatchStruct&) = default;
MyStructField26PatchStruct& MyStructField26PatchStruct::operator=(const MyStructField26PatchStruct&) = default;
MyStructField26PatchStruct::MyStructField26PatchStruct() :
      __fbthrift_field_clear() {
}


MyStructField26PatchStruct::~MyStructField26PatchStruct() {}

MyStructField26PatchStruct::MyStructField26PatchStruct([[maybe_unused]] MyStructField26PatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_prepend(std::move(other.__fbthrift_field_prepend)),
    __fbthrift_field_append(std::move(other.__fbthrift_field_append)),
    __isset(other.__isset) {
}

MyStructField26PatchStruct& MyStructField26PatchStruct::operator=([[maybe_unused]] MyStructField26PatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_prepend = std::move(other.__fbthrift_field_prepend);
    this->__fbthrift_field_append = std::move(other.__fbthrift_field_append);
    __isset = other.__isset;
    return *this;
}


MyStructField26PatchStruct::MyStructField26PatchStruct(apache::thrift::FragileConstructor, ::std::vector<::std::int16_t> assign__arg, bool clear__arg, ::std::vector<::std::int16_t> prepend__arg, ::std::vector<::std::int16_t> append__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_prepend(std::move(prepend__arg)),
    __fbthrift_field_append(std::move(append__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void MyStructField26PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_prepend.clear();
  this->__fbthrift_field_append.clear();
  __isset = {};
}

void MyStructField26PatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_prepend.clear();
  this->__fbthrift_field_append.clear();
}

bool MyStructField26PatchStruct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0)) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::list<::apache::thrift::type::i16_t>>(this->__fbthrift_field_prepend) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::list<::apache::thrift::type::i16_t>>(this->__fbthrift_field_append);
}

bool MyStructField26PatchStruct::operator==([[maybe_unused]] const MyStructField26PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyStructField26PatchStruct::operator<([[maybe_unused]] const MyStructField26PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::std::vector<::std::int16_t>* MyStructField26PatchStruct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::vector<::std::int16_t>* MyStructField26PatchStruct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

const ::std::vector<::std::int16_t>& MyStructField26PatchStruct::get_prepend() const& {
  return __fbthrift_field_prepend;
}

::std::vector<::std::int16_t> MyStructField26PatchStruct::get_prepend() && {
  return std::move(__fbthrift_field_prepend);
}

const ::std::vector<::std::int16_t>& MyStructField26PatchStruct::get_append() const& {
  return __fbthrift_field_append;
}

::std::vector<::std::int16_t> MyStructField26PatchStruct::get_append() && {
  return std::move(__fbthrift_field_append);
}


void swap([[maybe_unused]] MyStructField26PatchStruct& a, [[maybe_unused]] MyStructField26PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_prepend, b.__fbthrift_field_prepend);
  swap(a.__fbthrift_field_append, b.__fbthrift_field_append);
  swap(a.__isset, b.__isset);
}

template void MyStructField26PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField26PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField26PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField26PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField26PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField26PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField26PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField26PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructField27PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructField27PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructField27PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructField27Patch";
}

const folly::StringPiece MyStructField27PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructField27PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStructField27PatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStructField27PatchStruct>::name;
}

MyStructField27PatchStruct::MyStructField27PatchStruct(const MyStructField27PatchStruct&) = default;
MyStructField27PatchStruct& MyStructField27PatchStruct::operator=(const MyStructField27PatchStruct&) = default;
MyStructField27PatchStruct::MyStructField27PatchStruct() :
      __fbthrift_field_clear() {
}


MyStructField27PatchStruct::~MyStructField27PatchStruct() {}

MyStructField27PatchStruct::MyStructField27PatchStruct([[maybe_unused]] MyStructField27PatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_remove(std::move(other.__fbthrift_field_remove)),
    __fbthrift_field_add(std::move(other.__fbthrift_field_add)),
    __isset(other.__isset) {
}

MyStructField27PatchStruct& MyStructField27PatchStruct::operator=([[maybe_unused]] MyStructField27PatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_remove = std::move(other.__fbthrift_field_remove);
    this->__fbthrift_field_add = std::move(other.__fbthrift_field_add);
    __isset = other.__isset;
    return *this;
}


MyStructField27PatchStruct::MyStructField27PatchStruct(apache::thrift::FragileConstructor, ::std::set<::std::string> assign__arg, bool clear__arg, ::std::set<::std::string> remove__arg, ::std::set<::std::string> add__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_remove(std::move(remove__arg)),
    __fbthrift_field_add(std::move(add__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void MyStructField27PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_remove.clear();
  this->__fbthrift_field_add.clear();
  __isset = {};
}

void MyStructField27PatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_remove.clear();
  this->__fbthrift_field_add.clear();
}

bool MyStructField27PatchStruct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0)) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::set<::apache::thrift::type::string_t>>(this->__fbthrift_field_remove) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::set<::apache::thrift::type::string_t>>(this->__fbthrift_field_add);
}

bool MyStructField27PatchStruct::operator==([[maybe_unused]] const MyStructField27PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyStructField27PatchStruct::operator<([[maybe_unused]] const MyStructField27PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::std::set<::std::string>* MyStructField27PatchStruct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::set<::std::string>* MyStructField27PatchStruct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

const ::std::set<::std::string>& MyStructField27PatchStruct::get_remove() const& {
  return __fbthrift_field_remove;
}

::std::set<::std::string> MyStructField27PatchStruct::get_remove() && {
  return std::move(__fbthrift_field_remove);
}

const ::std::set<::std::string>& MyStructField27PatchStruct::get_add() const& {
  return __fbthrift_field_add;
}

::std::set<::std::string> MyStructField27PatchStruct::get_add() && {
  return std::move(__fbthrift_field_add);
}


void swap([[maybe_unused]] MyStructField27PatchStruct& a, [[maybe_unused]] MyStructField27PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_remove, b.__fbthrift_field_remove);
  swap(a.__fbthrift_field_add, b.__fbthrift_field_add);
  swap(a.__isset, b.__isset);
}

template void MyStructField27PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField27PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField27PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField27PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField27PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField27PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField27PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField27PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructField28PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructField28PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructField28PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructField28Patch";
}

const folly::StringPiece MyStructField28PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructField28PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStructField28PatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStructField28PatchStruct>::name;
}

MyStructField28PatchStruct::MyStructField28PatchStruct(const MyStructField28PatchStruct&) = default;
MyStructField28PatchStruct& MyStructField28PatchStruct::operator=(const MyStructField28PatchStruct&) = default;
MyStructField28PatchStruct::MyStructField28PatchStruct() :
      __fbthrift_field_clear() {
}


MyStructField28PatchStruct::~MyStructField28PatchStruct() {}

MyStructField28PatchStruct::MyStructField28PatchStruct([[maybe_unused]] MyStructField28PatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_add(std::move(other.__fbthrift_field_add)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_remove(std::move(other.__fbthrift_field_remove)),
    __fbthrift_field_put(std::move(other.__fbthrift_field_put)),
    __isset(other.__isset) {
}

MyStructField28PatchStruct& MyStructField28PatchStruct::operator=([[maybe_unused]] MyStructField28PatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_add = std::move(other.__fbthrift_field_add);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_remove = std::move(other.__fbthrift_field_remove);
    this->__fbthrift_field_put = std::move(other.__fbthrift_field_put);
    __isset = other.__isset;
    return *this;
}


MyStructField28PatchStruct::MyStructField28PatchStruct(apache::thrift::FragileConstructor, ::std::map<::std::string, ::std::string> assign__arg, bool clear__arg, ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch> patchPrior__arg, ::std::map<::std::string, ::std::string> add__arg, ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch> patch__arg, ::std::unordered_set<::std::string> remove__arg, ::std::map<::std::string, ::std::string> put__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_add(std::move(add__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_remove(std::move(remove__arg)),
    __fbthrift_field_put(std::move(put__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void MyStructField28PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_patchPrior.clear();
  this->__fbthrift_field_add.clear();
  this->__fbthrift_field_patch.clear();
  this->__fbthrift_field_remove.clear();
  this->__fbthrift_field_put.clear();
  __isset = {};
}

void MyStructField28PatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_patchPrior.clear();
  this->__fbthrift_field_add.clear();
  this->__fbthrift_field_patch.clear();
  this->__fbthrift_field_remove.clear();
  this->__fbthrift_field_put.clear();
}

bool MyStructField28PatchStruct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0)) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::cpp_type<::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>>>(this->__fbthrift_field_patchPrior) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>>(this->__fbthrift_field_add) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::cpp_type<::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>>>(this->__fbthrift_field_patch) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::cpp_type<::std::unordered_set<::std::string>, ::apache::thrift::type::set<::apache::thrift::type::string_t>>>(this->__fbthrift_field_remove) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>>(this->__fbthrift_field_put);
}

bool MyStructField28PatchStruct::operator==([[maybe_unused]] const MyStructField28PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyStructField28PatchStruct::operator<([[maybe_unused]] const MyStructField28PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::std::map<::std::string, ::std::string>* MyStructField28PatchStruct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::map<::std::string, ::std::string>* MyStructField28PatchStruct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

const ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>& MyStructField28PatchStruct::get_patchPrior() const& {
  return __fbthrift_field_patchPrior;
}

::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch> MyStructField28PatchStruct::get_patchPrior() && {
  return std::move(__fbthrift_field_patchPrior);
}

const ::std::map<::std::string, ::std::string>& MyStructField28PatchStruct::get_add() const& {
  return __fbthrift_field_add;
}

::std::map<::std::string, ::std::string> MyStructField28PatchStruct::get_add() && {
  return std::move(__fbthrift_field_add);
}

const ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>& MyStructField28PatchStruct::get_patch() const& {
  return __fbthrift_field_patch;
}

::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch> MyStructField28PatchStruct::get_patch() && {
  return std::move(__fbthrift_field_patch);
}

const ::std::unordered_set<::std::string>& MyStructField28PatchStruct::get_remove() const& {
  return __fbthrift_field_remove;
}

::std::unordered_set<::std::string> MyStructField28PatchStruct::get_remove() && {
  return std::move(__fbthrift_field_remove);
}

const ::std::map<::std::string, ::std::string>& MyStructField28PatchStruct::get_put() const& {
  return __fbthrift_field_put;
}

::std::map<::std::string, ::std::string> MyStructField28PatchStruct::get_put() && {
  return std::move(__fbthrift_field_put);
}


void swap([[maybe_unused]] MyStructField28PatchStruct& a, [[maybe_unused]] MyStructField28PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_add, b.__fbthrift_field_add);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__fbthrift_field_remove, b.__fbthrift_field_remove);
  swap(a.__fbthrift_field_put, b.__fbthrift_field_put);
  swap(a.__isset, b.__isset);
}

template void MyStructField28PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField28PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField28PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField28PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField28PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField28PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField28PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField28PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructField28PatchStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructField28PatchStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructField29PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructField29PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructField29PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructField29Patch";
}

const folly::StringPiece MyStructField29PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructField29PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStructField29PatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStructField29PatchStruct>::name;
}

MyStructField29PatchStruct::MyStructField29PatchStruct(const MyStructField29PatchStruct&) = default;
MyStructField29PatchStruct& MyStructField29PatchStruct::operator=(const MyStructField29PatchStruct&) = default;
MyStructField29PatchStruct::MyStructField29PatchStruct() :
      __fbthrift_field_clear() {
}


MyStructField29PatchStruct::~MyStructField29PatchStruct() {}

MyStructField29PatchStruct::MyStructField29PatchStruct([[maybe_unused]] MyStructField29PatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_prepend(std::move(other.__fbthrift_field_prepend)),
    __fbthrift_field_append(std::move(other.__fbthrift_field_append)),
    __isset(other.__isset) {
}

MyStructField29PatchStruct& MyStructField29PatchStruct::operator=([[maybe_unused]] MyStructField29PatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_prepend = std::move(other.__fbthrift_field_prepend);
    this->__fbthrift_field_append = std::move(other.__fbthrift_field_append);
    __isset = other.__isset;
    return *this;
}


MyStructField29PatchStruct::MyStructField29PatchStruct(apache::thrift::FragileConstructor, ::std::vector<::std::map<::std::string, ::std::int32_t>> assign__arg, bool clear__arg, ::std::vector<::std::map<::std::string, ::std::int32_t>> prepend__arg, ::std::vector<::std::map<::std::string, ::std::int32_t>> append__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_prepend(std::move(prepend__arg)),
    __fbthrift_field_append(std::move(append__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void MyStructField29PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_prepend.clear();
  this->__fbthrift_field_append.clear();
  __isset = {};
}

void MyStructField29PatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_prepend.clear();
  this->__fbthrift_field_append.clear();
}

bool MyStructField29PatchStruct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0)) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::list<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>>>(this->__fbthrift_field_prepend) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::list<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>>>(this->__fbthrift_field_append);
}

bool MyStructField29PatchStruct::operator==([[maybe_unused]] const MyStructField29PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyStructField29PatchStruct::operator<([[maybe_unused]] const MyStructField29PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::std::vector<::std::map<::std::string, ::std::int32_t>>* MyStructField29PatchStruct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::vector<::std::map<::std::string, ::std::int32_t>>* MyStructField29PatchStruct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

const ::std::vector<::std::map<::std::string, ::std::int32_t>>& MyStructField29PatchStruct::get_prepend() const& {
  return __fbthrift_field_prepend;
}

::std::vector<::std::map<::std::string, ::std::int32_t>> MyStructField29PatchStruct::get_prepend() && {
  return std::move(__fbthrift_field_prepend);
}

const ::std::vector<::std::map<::std::string, ::std::int32_t>>& MyStructField29PatchStruct::get_append() const& {
  return __fbthrift_field_append;
}

::std::vector<::std::map<::std::string, ::std::int32_t>> MyStructField29PatchStruct::get_append() && {
  return std::move(__fbthrift_field_append);
}


void swap([[maybe_unused]] MyStructField29PatchStruct& a, [[maybe_unused]] MyStructField29PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_prepend, b.__fbthrift_field_prepend);
  swap(a.__fbthrift_field_append, b.__fbthrift_field_append);
  swap(a.__isset, b.__isset);
}

template void MyStructField29PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField29PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField29PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField29PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField29PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField29PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField29PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField29PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructField30PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructField30PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructField30PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructField30Patch";
}

const folly::StringPiece MyStructField30PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructField30PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStructField30PatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStructField30PatchStruct>::name;
}

MyStructField30PatchStruct::MyStructField30PatchStruct(const MyStructField30PatchStruct&) = default;
MyStructField30PatchStruct& MyStructField30PatchStruct::operator=(const MyStructField30PatchStruct&) = default;
MyStructField30PatchStruct::MyStructField30PatchStruct() :
      __fbthrift_field_clear() {
}


MyStructField30PatchStruct::~MyStructField30PatchStruct() {}

MyStructField30PatchStruct::MyStructField30PatchStruct([[maybe_unused]] MyStructField30PatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_add(std::move(other.__fbthrift_field_add)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_remove(std::move(other.__fbthrift_field_remove)),
    __fbthrift_field_put(std::move(other.__fbthrift_field_put)),
    __isset(other.__isset) {
}

MyStructField30PatchStruct& MyStructField30PatchStruct::operator=([[maybe_unused]] MyStructField30PatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_add = std::move(other.__fbthrift_field_add);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_remove = std::move(other.__fbthrift_field_remove);
    this->__fbthrift_field_put = std::move(other.__fbthrift_field_put);
    __isset = other.__isset;
    return *this;
}


MyStructField30PatchStruct::MyStructField30PatchStruct(apache::thrift::FragileConstructor, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> assign__arg, bool clear__arg, ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1> patchPrior__arg, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> add__arg, ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1> patch__arg, ::std::unordered_set<::std::string> remove__arg, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> put__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_add(std::move(add__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_remove(std::move(remove__arg)),
    __fbthrift_field_put(std::move(put__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void MyStructField30PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_patchPrior.clear();
  this->__fbthrift_field_add.clear();
  this->__fbthrift_field_patch.clear();
  this->__fbthrift_field_remove.clear();
  this->__fbthrift_field_put.clear();
  __isset = {};
}

void MyStructField30PatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_patchPrior.clear();
  this->__fbthrift_field_add.clear();
  this->__fbthrift_field_patch.clear();
  this->__fbthrift_field_remove.clear();
  this->__fbthrift_field_put.clear();
}

bool MyStructField30PatchStruct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0)) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::cpp_type<::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30Patch1Struct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField30Patch1Struct>>>>>(this->__fbthrift_field_patchPrior) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>>>(this->__fbthrift_field_add) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::cpp_type<::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30Patch1Struct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField30Patch1Struct>>>>>(this->__fbthrift_field_patch) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::cpp_type<::std::unordered_set<::std::string>, ::apache::thrift::type::set<::apache::thrift::type::string_t>>>(this->__fbthrift_field_remove) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>>>(this->__fbthrift_field_put);
}

bool MyStructField30PatchStruct::operator==([[maybe_unused]] const MyStructField30PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyStructField30PatchStruct::operator<([[maybe_unused]] const MyStructField30PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>* MyStructField30PatchStruct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>* MyStructField30PatchStruct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

const ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>& MyStructField30PatchStruct::get_patchPrior() const& {
  return __fbthrift_field_patchPrior;
}

::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1> MyStructField30PatchStruct::get_patchPrior() && {
  return std::move(__fbthrift_field_patchPrior);
}

const ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>& MyStructField30PatchStruct::get_add() const& {
  return __fbthrift_field_add;
}

::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> MyStructField30PatchStruct::get_add() && {
  return std::move(__fbthrift_field_add);
}

const ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>& MyStructField30PatchStruct::get_patch() const& {
  return __fbthrift_field_patch;
}

::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1> MyStructField30PatchStruct::get_patch() && {
  return std::move(__fbthrift_field_patch);
}

const ::std::unordered_set<::std::string>& MyStructField30PatchStruct::get_remove() const& {
  return __fbthrift_field_remove;
}

::std::unordered_set<::std::string> MyStructField30PatchStruct::get_remove() && {
  return std::move(__fbthrift_field_remove);
}

const ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>& MyStructField30PatchStruct::get_put() const& {
  return __fbthrift_field_put;
}

::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> MyStructField30PatchStruct::get_put() && {
  return std::move(__fbthrift_field_put);
}


void swap([[maybe_unused]] MyStructField30PatchStruct& a, [[maybe_unused]] MyStructField30PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_add, b.__fbthrift_field_add);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__fbthrift_field_remove, b.__fbthrift_field_remove);
  swap(a.__fbthrift_field_put, b.__fbthrift_field_put);
  swap(a.__isset, b.__isset);
}

template void MyStructField30PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField30PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField30PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField30PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField30PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField30PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField30PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField30PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructField30PatchStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructField30PatchStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::unordered_map<::std::string, ::test::fixtures::patch::MyStructField30Patch1>>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructField30Patch1Struct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructField30Patch1Struct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructField30Patch1Struct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructField30Patch1";
}

const folly::StringPiece MyStructField30Patch1Struct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructField30Patch1Struct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStructField30Patch1Struct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStructField30Patch1Struct>::name;
}

MyStructField30Patch1Struct::MyStructField30Patch1Struct(const MyStructField30Patch1Struct&) = default;
MyStructField30Patch1Struct& MyStructField30Patch1Struct::operator=(const MyStructField30Patch1Struct&) = default;
MyStructField30Patch1Struct::MyStructField30Patch1Struct() :
      __fbthrift_field_clear() {
}


MyStructField30Patch1Struct::~MyStructField30Patch1Struct() {}

MyStructField30Patch1Struct::MyStructField30Patch1Struct([[maybe_unused]] MyStructField30Patch1Struct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_add(std::move(other.__fbthrift_field_add)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_remove(std::move(other.__fbthrift_field_remove)),
    __fbthrift_field_put(std::move(other.__fbthrift_field_put)),
    __isset(other.__isset) {
}

MyStructField30Patch1Struct& MyStructField30Patch1Struct::operator=([[maybe_unused]] MyStructField30Patch1Struct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_add = std::move(other.__fbthrift_field_add);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_remove = std::move(other.__fbthrift_field_remove);
    this->__fbthrift_field_put = std::move(other.__fbthrift_field_put);
    __isset = other.__isset;
    return *this;
}


MyStructField30Patch1Struct::MyStructField30Patch1Struct(apache::thrift::FragileConstructor, ::std::map<::std::string, ::std::int32_t> assign__arg, bool clear__arg, ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch> patchPrior__arg, ::std::map<::std::string, ::std::int32_t> add__arg, ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch> patch__arg, ::std::unordered_set<::std::string> remove__arg, ::std::map<::std::string, ::std::int32_t> put__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_add(std::move(add__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_remove(std::move(remove__arg)),
    __fbthrift_field_put(std::move(put__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void MyStructField30Patch1Struct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_patchPrior.clear();
  this->__fbthrift_field_add.clear();
  this->__fbthrift_field_patch.clear();
  this->__fbthrift_field_remove.clear();
  this->__fbthrift_field_put.clear();
  __isset = {};
}

void MyStructField30Patch1Struct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_patchPrior.clear();
  this->__fbthrift_field_add.clear();
  this->__fbthrift_field_patch.clear();
  this->__fbthrift_field_remove.clear();
  this->__fbthrift_field_put.clear();
}

bool MyStructField30Patch1Struct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0)) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::cpp_type<::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>>>(this->__fbthrift_field_patchPrior) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>>(this->__fbthrift_field_add) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::cpp_type<::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>>>(this->__fbthrift_field_patch) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::cpp_type<::std::unordered_set<::std::string>, ::apache::thrift::type::set<::apache::thrift::type::string_t>>>(this->__fbthrift_field_remove) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::i32_t>>(this->__fbthrift_field_put);
}

bool MyStructField30Patch1Struct::operator==([[maybe_unused]] const MyStructField30Patch1Struct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyStructField30Patch1Struct::operator<([[maybe_unused]] const MyStructField30Patch1Struct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::std::map<::std::string, ::std::int32_t>* MyStructField30Patch1Struct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::map<::std::string, ::std::int32_t>* MyStructField30Patch1Struct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

const ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>& MyStructField30Patch1Struct::get_patchPrior() const& {
  return __fbthrift_field_patchPrior;
}

::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch> MyStructField30Patch1Struct::get_patchPrior() && {
  return std::move(__fbthrift_field_patchPrior);
}

const ::std::map<::std::string, ::std::int32_t>& MyStructField30Patch1Struct::get_add() const& {
  return __fbthrift_field_add;
}

::std::map<::std::string, ::std::int32_t> MyStructField30Patch1Struct::get_add() && {
  return std::move(__fbthrift_field_add);
}

const ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>& MyStructField30Patch1Struct::get_patch() const& {
  return __fbthrift_field_patch;
}

::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch> MyStructField30Patch1Struct::get_patch() && {
  return std::move(__fbthrift_field_patch);
}

const ::std::unordered_set<::std::string>& MyStructField30Patch1Struct::get_remove() const& {
  return __fbthrift_field_remove;
}

::std::unordered_set<::std::string> MyStructField30Patch1Struct::get_remove() && {
  return std::move(__fbthrift_field_remove);
}

const ::std::map<::std::string, ::std::int32_t>& MyStructField30Patch1Struct::get_put() const& {
  return __fbthrift_field_put;
}

::std::map<::std::string, ::std::int32_t> MyStructField30Patch1Struct::get_put() && {
  return std::move(__fbthrift_field_put);
}


void swap([[maybe_unused]] MyStructField30Patch1Struct& a, [[maybe_unused]] MyStructField30Patch1Struct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_add, b.__fbthrift_field_add);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__fbthrift_field_remove, b.__fbthrift_field_remove);
  swap(a.__fbthrift_field_put, b.__fbthrift_field_put);
  swap(a.__isset, b.__isset);
}

template void MyStructField30Patch1Struct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField30Patch1Struct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField30Patch1Struct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField30Patch1Struct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField30Patch1Struct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField30Patch1Struct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField30Patch1Struct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField30Patch1Struct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructField30Patch1Struct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructField30Patch1Struct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::unordered_map<::std::string, ::apache::thrift::op::I32Patch>>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructFieldPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructFieldPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructFieldPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructFieldPatch";
}

const folly::StringPiece MyStructFieldPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructFieldPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStructFieldPatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStructFieldPatchStruct>::name;
}

MyStructFieldPatchStruct::MyStructFieldPatchStruct(const MyStructFieldPatchStruct& srcObj) :
    __fbthrift_field_structWithCustomDefault(srcObj.__fbthrift_field_structWithCustomDefault),
    __fbthrift_field_i32WithCustomDefault(srcObj.__fbthrift_field_i32WithCustomDefault),
    __fbthrift_field_mapMap(srcObj.__fbthrift_field_mapMap),
    __fbthrift_field_listMap(srcObj.__fbthrift_field_listMap),
    __fbthrift_field_optMapVal(srcObj.__fbthrift_field_optMapVal),
    __fbthrift_field_optSetVal(srcObj.__fbthrift_field_optSetVal),
    __fbthrift_field_optListVal(srcObj.__fbthrift_field_optListVal),
    __fbthrift_field_optLateStructVal(srcObj.__fbthrift_field_optLateStructVal),
    __fbthrift_field_optStructVal(srcObj.__fbthrift_field_optStructVal),
    __fbthrift_field_optEnumVal(srcObj.__fbthrift_field_optEnumVal),
    __fbthrift_field_optBinaryVal(srcObj.__fbthrift_field_optBinaryVal),
    __fbthrift_field_optStringVal(srcObj.__fbthrift_field_optStringVal),
    __fbthrift_field_optDoubleVal(srcObj.__fbthrift_field_optDoubleVal),
    __fbthrift_field_optFloatVal(srcObj.__fbthrift_field_optFloatVal),
    __fbthrift_field_optI64Val(srcObj.__fbthrift_field_optI64Val),
    __fbthrift_field_optI32Val(srcObj.__fbthrift_field_optI32Val),
    __fbthrift_field_optI16Val(srcObj.__fbthrift_field_optI16Val),
    __fbthrift_field_optByteVal(srcObj.__fbthrift_field_optByteVal),
    __fbthrift_field_optBoolVal(srcObj.__fbthrift_field_optBoolVal),
    __fbthrift_field_lateStructVal(srcObj.__fbthrift_field_lateStructVal),
    __fbthrift_field_unionVal(srcObj.__fbthrift_field_unionVal),
    __fbthrift_field_structVal(srcObj.__fbthrift_field_structVal),
    __fbthrift_field_enumVal(srcObj.__fbthrift_field_enumVal),
    __fbthrift_field_binaryVal(srcObj.__fbthrift_field_binaryVal),
    __fbthrift_field_stringVal(srcObj.__fbthrift_field_stringVal),
    __fbthrift_field_doubleVal(srcObj.__fbthrift_field_doubleVal),
    __fbthrift_field_floatVal(srcObj.__fbthrift_field_floatVal),
    __fbthrift_field_i64Val(srcObj.__fbthrift_field_i64Val),
    __fbthrift_field_i32Val(srcObj.__fbthrift_field_i32Val),
    __fbthrift_field_i16Val(srcObj.__fbthrift_field_i16Val),
    __fbthrift_field_byteVal(srcObj.__fbthrift_field_byteVal),
    __fbthrift_field_boolVal(srcObj.__fbthrift_field_boolVal),
    __fbthrift_field_structWithFieldCustomDefault(srcObj.__fbthrift_field_structWithFieldCustomDefault) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>, -32>(*__fbthrift_field_structWithCustomDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, -31>(*__fbthrift_field_i32WithCustomDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30PatchStruct>, -30>(*__fbthrift_field_mapMap, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField29PatchStruct>, -29>(*__fbthrift_field_listMap, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField28PatchStruct>, -28>(*__fbthrift_field_optMapVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::patch::MyStructField27PatchStruct>, -27>(*__fbthrift_field_optSetVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField26PatchStruct>, -26>(*__fbthrift_field_optListVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, -25>(*__fbthrift_field_optLateStructVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, -24>(*__fbthrift_field_optStructVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField23PatchStruct>, -23>(*__fbthrift_field_optEnumVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, -22>(*__fbthrift_field_optBinaryVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, -21>(*__fbthrift_field_optStringVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, -20>(*__fbthrift_field_optDoubleVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, -19>(*__fbthrift_field_optFloatVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, -18>(*__fbthrift_field_optI64Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, -17>(*__fbthrift_field_optI32Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, -16>(*__fbthrift_field_optI16Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, -15>(*__fbthrift_field_optByteVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, -14>(*__fbthrift_field_optBoolVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, -13>(*__fbthrift_field_lateStructVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::MyUnionPatchStruct>, -12>(*__fbthrift_field_unionVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, -11>(*__fbthrift_field_structVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField10PatchStruct>, -10>(*__fbthrift_field_enumVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, -9>(*__fbthrift_field_binaryVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, -8>(*__fbthrift_field_stringVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, -7>(*__fbthrift_field_doubleVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, -6>(*__fbthrift_field_floatVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, -5>(*__fbthrift_field_i64Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, -4>(*__fbthrift_field_i32Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, -3>(*__fbthrift_field_i16Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, -2>(*__fbthrift_field_byteVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, -1>(*__fbthrift_field_boolVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, 1>(*__fbthrift_field_structWithFieldCustomDefault, *this);
}

static void __fbthrift_swap(MyStructFieldPatchStruct& lhs, MyStructFieldPatchStruct& rhs) { swap(lhs, rhs); }
MyStructFieldPatchStruct& MyStructFieldPatchStruct::operator=(const MyStructFieldPatchStruct& other) {
  MyStructFieldPatchStruct tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

MyStructFieldPatchStruct::MyStructFieldPatchStruct() :
      __fbthrift_field_structWithCustomDefault(::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataWithCustomDefaultPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>>>())),
      __fbthrift_field_i32WithCustomDefault(::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>())),
      __fbthrift_field_mapMap(::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField30Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField30PatchStruct>>>())),
      __fbthrift_field_listMap(::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField29Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField29PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField29PatchStruct>>>())),
      __fbthrift_field_optMapVal(::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField28Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField28PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField28PatchStruct>>>())),
      __fbthrift_field_optSetVal(::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField27Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::patch::MyStructField27PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField27PatchStruct>>>())),
      __fbthrift_field_optListVal(::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField26Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField26PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField26PatchStruct>>>())),
      __fbthrift_field_optLateStructVal(::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>())),
      __fbthrift_field_optStructVal(::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>())),
      __fbthrift_field_optEnumVal(::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField23Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField23PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField23PatchStruct>>>())),
      __fbthrift_field_optBinaryVal(::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>())),
      __fbthrift_field_optStringVal(::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>())),
      __fbthrift_field_optDoubleVal(::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>())),
      __fbthrift_field_optFloatVal(::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>())),
      __fbthrift_field_optI64Val(::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>())),
      __fbthrift_field_optI32Val(::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>())),
      __fbthrift_field_optI16Val(::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>())),
      __fbthrift_field_optByteVal(::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>())),
      __fbthrift_field_optBoolVal(::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>())),
      __fbthrift_field_lateStructVal(::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>())),
      __fbthrift_field_unionVal(::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnionPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::MyUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionPatchStruct>>>())),
      __fbthrift_field_structVal(::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>())),
      __fbthrift_field_enumVal(::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField10Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField10PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField10PatchStruct>>>())),
      __fbthrift_field_binaryVal(::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>())),
      __fbthrift_field_stringVal(::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>())),
      __fbthrift_field_doubleVal(::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>())),
      __fbthrift_field_floatVal(::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>())),
      __fbthrift_field_i64Val(::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>())),
      __fbthrift_field_i32Val(::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>())),
      __fbthrift_field_i16Val(::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>())),
      __fbthrift_field_byteVal(::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>())),
      __fbthrift_field_boolVal(::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>())),
      __fbthrift_field_structWithFieldCustomDefault(::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>())) {
}


MyStructFieldPatchStruct::~MyStructFieldPatchStruct() {}

MyStructFieldPatchStruct::MyStructFieldPatchStruct([[maybe_unused]] MyStructFieldPatchStruct&& other) noexcept :
    __fbthrift_field_structWithCustomDefault(std::move(other.__fbthrift_field_structWithCustomDefault)),
    __fbthrift_field_i32WithCustomDefault(std::move(other.__fbthrift_field_i32WithCustomDefault)),
    __fbthrift_field_mapMap(std::move(other.__fbthrift_field_mapMap)),
    __fbthrift_field_listMap(std::move(other.__fbthrift_field_listMap)),
    __fbthrift_field_optMapVal(std::move(other.__fbthrift_field_optMapVal)),
    __fbthrift_field_optSetVal(std::move(other.__fbthrift_field_optSetVal)),
    __fbthrift_field_optListVal(std::move(other.__fbthrift_field_optListVal)),
    __fbthrift_field_optLateStructVal(std::move(other.__fbthrift_field_optLateStructVal)),
    __fbthrift_field_optStructVal(std::move(other.__fbthrift_field_optStructVal)),
    __fbthrift_field_optEnumVal(std::move(other.__fbthrift_field_optEnumVal)),
    __fbthrift_field_optBinaryVal(std::move(other.__fbthrift_field_optBinaryVal)),
    __fbthrift_field_optStringVal(std::move(other.__fbthrift_field_optStringVal)),
    __fbthrift_field_optDoubleVal(std::move(other.__fbthrift_field_optDoubleVal)),
    __fbthrift_field_optFloatVal(std::move(other.__fbthrift_field_optFloatVal)),
    __fbthrift_field_optI64Val(std::move(other.__fbthrift_field_optI64Val)),
    __fbthrift_field_optI32Val(std::move(other.__fbthrift_field_optI32Val)),
    __fbthrift_field_optI16Val(std::move(other.__fbthrift_field_optI16Val)),
    __fbthrift_field_optByteVal(std::move(other.__fbthrift_field_optByteVal)),
    __fbthrift_field_optBoolVal(std::move(other.__fbthrift_field_optBoolVal)),
    __fbthrift_field_lateStructVal(std::move(other.__fbthrift_field_lateStructVal)),
    __fbthrift_field_unionVal(std::move(other.__fbthrift_field_unionVal)),
    __fbthrift_field_structVal(std::move(other.__fbthrift_field_structVal)),
    __fbthrift_field_enumVal(std::move(other.__fbthrift_field_enumVal)),
    __fbthrift_field_binaryVal(std::move(other.__fbthrift_field_binaryVal)),
    __fbthrift_field_stringVal(std::move(other.__fbthrift_field_stringVal)),
    __fbthrift_field_doubleVal(std::move(other.__fbthrift_field_doubleVal)),
    __fbthrift_field_floatVal(std::move(other.__fbthrift_field_floatVal)),
    __fbthrift_field_i64Val(std::move(other.__fbthrift_field_i64Val)),
    __fbthrift_field_i32Val(std::move(other.__fbthrift_field_i32Val)),
    __fbthrift_field_i16Val(std::move(other.__fbthrift_field_i16Val)),
    __fbthrift_field_byteVal(std::move(other.__fbthrift_field_byteVal)),
    __fbthrift_field_boolVal(std::move(other.__fbthrift_field_boolVal)),
    __fbthrift_field_structWithFieldCustomDefault(std::move(other.__fbthrift_field_structWithFieldCustomDefault)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>, -32>(*__fbthrift_field_structWithCustomDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, -31>(*__fbthrift_field_i32WithCustomDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30PatchStruct>, -30>(*__fbthrift_field_mapMap, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField29PatchStruct>, -29>(*__fbthrift_field_listMap, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField28PatchStruct>, -28>(*__fbthrift_field_optMapVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::patch::MyStructField27PatchStruct>, -27>(*__fbthrift_field_optSetVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField26PatchStruct>, -26>(*__fbthrift_field_optListVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, -25>(*__fbthrift_field_optLateStructVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, -24>(*__fbthrift_field_optStructVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField23PatchStruct>, -23>(*__fbthrift_field_optEnumVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, -22>(*__fbthrift_field_optBinaryVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, -21>(*__fbthrift_field_optStringVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, -20>(*__fbthrift_field_optDoubleVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, -19>(*__fbthrift_field_optFloatVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, -18>(*__fbthrift_field_optI64Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, -17>(*__fbthrift_field_optI32Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, -16>(*__fbthrift_field_optI16Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, -15>(*__fbthrift_field_optByteVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, -14>(*__fbthrift_field_optBoolVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, -13>(*__fbthrift_field_lateStructVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::MyUnionPatchStruct>, -12>(*__fbthrift_field_unionVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, -11>(*__fbthrift_field_structVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField10PatchStruct>, -10>(*__fbthrift_field_enumVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, -9>(*__fbthrift_field_binaryVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, -8>(*__fbthrift_field_stringVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, -7>(*__fbthrift_field_doubleVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, -6>(*__fbthrift_field_floatVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, -5>(*__fbthrift_field_i64Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, -4>(*__fbthrift_field_i32Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, -3>(*__fbthrift_field_i16Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, -2>(*__fbthrift_field_byteVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, -1>(*__fbthrift_field_boolVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, 1>(*__fbthrift_field_structWithFieldCustomDefault, *this);
}

MyStructFieldPatchStruct& MyStructFieldPatchStruct::operator=([[maybe_unused]] MyStructFieldPatchStruct&& other) noexcept {
    this->__fbthrift_field_structWithCustomDefault = std::move(other.__fbthrift_field_structWithCustomDefault);
    this->__fbthrift_field_i32WithCustomDefault = std::move(other.__fbthrift_field_i32WithCustomDefault);
    this->__fbthrift_field_mapMap = std::move(other.__fbthrift_field_mapMap);
    this->__fbthrift_field_listMap = std::move(other.__fbthrift_field_listMap);
    this->__fbthrift_field_optMapVal = std::move(other.__fbthrift_field_optMapVal);
    this->__fbthrift_field_optSetVal = std::move(other.__fbthrift_field_optSetVal);
    this->__fbthrift_field_optListVal = std::move(other.__fbthrift_field_optListVal);
    this->__fbthrift_field_optLateStructVal = std::move(other.__fbthrift_field_optLateStructVal);
    this->__fbthrift_field_optStructVal = std::move(other.__fbthrift_field_optStructVal);
    this->__fbthrift_field_optEnumVal = std::move(other.__fbthrift_field_optEnumVal);
    this->__fbthrift_field_optBinaryVal = std::move(other.__fbthrift_field_optBinaryVal);
    this->__fbthrift_field_optStringVal = std::move(other.__fbthrift_field_optStringVal);
    this->__fbthrift_field_optDoubleVal = std::move(other.__fbthrift_field_optDoubleVal);
    this->__fbthrift_field_optFloatVal = std::move(other.__fbthrift_field_optFloatVal);
    this->__fbthrift_field_optI64Val = std::move(other.__fbthrift_field_optI64Val);
    this->__fbthrift_field_optI32Val = std::move(other.__fbthrift_field_optI32Val);
    this->__fbthrift_field_optI16Val = std::move(other.__fbthrift_field_optI16Val);
    this->__fbthrift_field_optByteVal = std::move(other.__fbthrift_field_optByteVal);
    this->__fbthrift_field_optBoolVal = std::move(other.__fbthrift_field_optBoolVal);
    this->__fbthrift_field_lateStructVal = std::move(other.__fbthrift_field_lateStructVal);
    this->__fbthrift_field_unionVal = std::move(other.__fbthrift_field_unionVal);
    this->__fbthrift_field_structVal = std::move(other.__fbthrift_field_structVal);
    this->__fbthrift_field_enumVal = std::move(other.__fbthrift_field_enumVal);
    this->__fbthrift_field_binaryVal = std::move(other.__fbthrift_field_binaryVal);
    this->__fbthrift_field_stringVal = std::move(other.__fbthrift_field_stringVal);
    this->__fbthrift_field_doubleVal = std::move(other.__fbthrift_field_doubleVal);
    this->__fbthrift_field_floatVal = std::move(other.__fbthrift_field_floatVal);
    this->__fbthrift_field_i64Val = std::move(other.__fbthrift_field_i64Val);
    this->__fbthrift_field_i32Val = std::move(other.__fbthrift_field_i32Val);
    this->__fbthrift_field_i16Val = std::move(other.__fbthrift_field_i16Val);
    this->__fbthrift_field_byteVal = std::move(other.__fbthrift_field_byteVal);
    this->__fbthrift_field_boolVal = std::move(other.__fbthrift_field_boolVal);
    this->__fbthrift_field_structWithFieldCustomDefault = std::move(other.__fbthrift_field_structWithFieldCustomDefault);
    return *this;
}


MyStructFieldPatchStruct::MyStructFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataWithCustomDefaultPatch> structWithCustomDefault__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch> i32WithCustomDefault__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField30Patch> mapMap__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField29Patch> listMap__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField28Patch> optMapVal__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField27Patch> optSetVal__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField26Patch> optListVal__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch> optLateStructVal__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch> optStructVal__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField23Patch> optEnumVal__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch> optBinaryVal__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch> optStringVal__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch> optDoubleVal__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch> optFloatVal__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch> optI64Val__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch> optI32Val__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch> optI16Val__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch> optByteVal__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch> optBoolVal__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch> lateStructVal__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnionPatch> unionVal__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch> structVal__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField10Patch> enumVal__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch> binaryVal__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch> stringVal__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch> doubleVal__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch> floatVal__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch> i64Val__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch> i32Val__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch> i16Val__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch> byteVal__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch> boolVal__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch> structWithFieldCustomDefault__arg) :
    __fbthrift_field_structWithCustomDefault(std::move(structWithCustomDefault__arg)),
    __fbthrift_field_i32WithCustomDefault(std::move(i32WithCustomDefault__arg)),
    __fbthrift_field_mapMap(std::move(mapMap__arg)),
    __fbthrift_field_listMap(std::move(listMap__arg)),
    __fbthrift_field_optMapVal(std::move(optMapVal__arg)),
    __fbthrift_field_optSetVal(std::move(optSetVal__arg)),
    __fbthrift_field_optListVal(std::move(optListVal__arg)),
    __fbthrift_field_optLateStructVal(std::move(optLateStructVal__arg)),
    __fbthrift_field_optStructVal(std::move(optStructVal__arg)),
    __fbthrift_field_optEnumVal(std::move(optEnumVal__arg)),
    __fbthrift_field_optBinaryVal(std::move(optBinaryVal__arg)),
    __fbthrift_field_optStringVal(std::move(optStringVal__arg)),
    __fbthrift_field_optDoubleVal(std::move(optDoubleVal__arg)),
    __fbthrift_field_optFloatVal(std::move(optFloatVal__arg)),
    __fbthrift_field_optI64Val(std::move(optI64Val__arg)),
    __fbthrift_field_optI32Val(std::move(optI32Val__arg)),
    __fbthrift_field_optI16Val(std::move(optI16Val__arg)),
    __fbthrift_field_optByteVal(std::move(optByteVal__arg)),
    __fbthrift_field_optBoolVal(std::move(optBoolVal__arg)),
    __fbthrift_field_lateStructVal(std::move(lateStructVal__arg)),
    __fbthrift_field_unionVal(std::move(unionVal__arg)),
    __fbthrift_field_structVal(std::move(structVal__arg)),
    __fbthrift_field_enumVal(std::move(enumVal__arg)),
    __fbthrift_field_binaryVal(std::move(binaryVal__arg)),
    __fbthrift_field_stringVal(std::move(stringVal__arg)),
    __fbthrift_field_doubleVal(std::move(doubleVal__arg)),
    __fbthrift_field_floatVal(std::move(floatVal__arg)),
    __fbthrift_field_i64Val(std::move(i64Val__arg)),
    __fbthrift_field_i32Val(std::move(i32Val__arg)),
    __fbthrift_field_i16Val(std::move(i16Val__arg)),
    __fbthrift_field_byteVal(std::move(byteVal__arg)),
    __fbthrift_field_boolVal(std::move(boolVal__arg)),
    __fbthrift_field_structWithFieldCustomDefault(std::move(structWithFieldCustomDefault__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>, -32>(*__fbthrift_field_structWithCustomDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, -31>(*__fbthrift_field_i32WithCustomDefault, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30PatchStruct>, -30>(*__fbthrift_field_mapMap, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField29PatchStruct>, -29>(*__fbthrift_field_listMap, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField28PatchStruct>, -28>(*__fbthrift_field_optMapVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::patch::MyStructField27PatchStruct>, -27>(*__fbthrift_field_optSetVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField26PatchStruct>, -26>(*__fbthrift_field_optListVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, -25>(*__fbthrift_field_optLateStructVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, -24>(*__fbthrift_field_optStructVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField23PatchStruct>, -23>(*__fbthrift_field_optEnumVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, -22>(*__fbthrift_field_optBinaryVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, -21>(*__fbthrift_field_optStringVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, -20>(*__fbthrift_field_optDoubleVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, -19>(*__fbthrift_field_optFloatVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, -18>(*__fbthrift_field_optI64Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, -17>(*__fbthrift_field_optI32Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, -16>(*__fbthrift_field_optI16Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, -15>(*__fbthrift_field_optByteVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, -14>(*__fbthrift_field_optBoolVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, -13>(*__fbthrift_field_lateStructVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::MyUnionPatchStruct>, -12>(*__fbthrift_field_unionVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, -11>(*__fbthrift_field_structVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField10PatchStruct>, -10>(*__fbthrift_field_enumVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, -9>(*__fbthrift_field_binaryVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, -8>(*__fbthrift_field_stringVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, -7>(*__fbthrift_field_doubleVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, -6>(*__fbthrift_field_floatVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, -5>(*__fbthrift_field_i64Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, -4>(*__fbthrift_field_i32Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, -3>(*__fbthrift_field_i16Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, -2>(*__fbthrift_field_byteVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, -1>(*__fbthrift_field_boolVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, 1>(*__fbthrift_field_structWithFieldCustomDefault, *this);
}


void MyStructFieldPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_structWithCustomDefault = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataWithCustomDefaultPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>>>());
  this->__fbthrift_field_i32WithCustomDefault = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>());
  this->__fbthrift_field_mapMap = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField30Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField30PatchStruct>>>());
  this->__fbthrift_field_listMap = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField29Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField29PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField29PatchStruct>>>());
  this->__fbthrift_field_optMapVal = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField28Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField28PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField28PatchStruct>>>());
  this->__fbthrift_field_optSetVal = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField27Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::patch::MyStructField27PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField27PatchStruct>>>());
  this->__fbthrift_field_optListVal = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField26Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField26PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField26PatchStruct>>>());
  this->__fbthrift_field_optLateStructVal = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>());
  this->__fbthrift_field_optStructVal = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>());
  this->__fbthrift_field_optEnumVal = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField23Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField23PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField23PatchStruct>>>());
  this->__fbthrift_field_optBinaryVal = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>());
  this->__fbthrift_field_optStringVal = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>());
  this->__fbthrift_field_optDoubleVal = ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>());
  this->__fbthrift_field_optFloatVal = ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>());
  this->__fbthrift_field_optI64Val = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>());
  this->__fbthrift_field_optI32Val = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>());
  this->__fbthrift_field_optI16Val = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>());
  this->__fbthrift_field_optByteVal = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>());
  this->__fbthrift_field_optBoolVal = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>());
  this->__fbthrift_field_lateStructVal = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>());
  this->__fbthrift_field_unionVal = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnionPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::MyUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionPatchStruct>>>());
  this->__fbthrift_field_structVal = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>());
  this->__fbthrift_field_enumVal = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField10Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField10PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField10PatchStruct>>>());
  this->__fbthrift_field_binaryVal = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>());
  this->__fbthrift_field_stringVal = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>());
  this->__fbthrift_field_doubleVal = ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>());
  this->__fbthrift_field_floatVal = ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>());
  this->__fbthrift_field_i64Val = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>());
  this->__fbthrift_field_i32Val = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>());
  this->__fbthrift_field_i16Val = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>());
  this->__fbthrift_field_byteVal = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>());
  this->__fbthrift_field_boolVal = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>());
  this->__fbthrift_field_structWithFieldCustomDefault = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>());
}

void MyStructFieldPatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_structWithCustomDefault = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataWithCustomDefaultPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>>>());
  this->__fbthrift_field_i32WithCustomDefault = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>());
  this->__fbthrift_field_mapMap = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField30Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField30PatchStruct>>>());
  this->__fbthrift_field_listMap = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField29Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField29PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField29PatchStruct>>>());
  this->__fbthrift_field_optMapVal = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField28Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField28PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField28PatchStruct>>>());
  this->__fbthrift_field_optSetVal = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField27Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::patch::MyStructField27PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField27PatchStruct>>>());
  this->__fbthrift_field_optListVal = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField26Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField26PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField26PatchStruct>>>());
  this->__fbthrift_field_optLateStructVal = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>());
  this->__fbthrift_field_optStructVal = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>());
  this->__fbthrift_field_optEnumVal = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField23Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField23PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField23PatchStruct>>>());
  this->__fbthrift_field_optBinaryVal = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>());
  this->__fbthrift_field_optStringVal = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>());
  this->__fbthrift_field_optDoubleVal = ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>());
  this->__fbthrift_field_optFloatVal = ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>());
  this->__fbthrift_field_optI64Val = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>());
  this->__fbthrift_field_optI32Val = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>());
  this->__fbthrift_field_optI16Val = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>());
  this->__fbthrift_field_optByteVal = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>());
  this->__fbthrift_field_optBoolVal = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>());
  this->__fbthrift_field_lateStructVal = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LateDefStructPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>());
  this->__fbthrift_field_unionVal = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyUnionPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::MyUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionPatchStruct>>>());
  this->__fbthrift_field_structVal = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>());
  this->__fbthrift_field_enumVal = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyStructField10Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField10PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField10PatchStruct>>>());
  this->__fbthrift_field_binaryVal = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BinaryPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>());
  this->__fbthrift_field_stringVal = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>());
  this->__fbthrift_field_doubleVal = ::apache::thrift::detail::boxed_value<::apache::thrift::op::DoublePatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>());
  this->__fbthrift_field_floatVal = ::apache::thrift::detail::boxed_value<::apache::thrift::op::FloatPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>());
  this->__fbthrift_field_i64Val = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>());
  this->__fbthrift_field_i32Val = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I32Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>());
  this->__fbthrift_field_i16Val = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I16Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>());
  this->__fbthrift_field_byteVal = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BytePatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>());
  this->__fbthrift_field_boolVal = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>());
  this->__fbthrift_field_structWithFieldCustomDefault = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::MyDataPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>());
}

bool MyStructFieldPatchStruct::__fbthrift_is_empty() const {
  return (this->__fbthrift_field_structWithCustomDefault.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>>>(*this->__fbthrift_field_structWithCustomDefault)) &&
 (this->__fbthrift_field_i32WithCustomDefault.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>(*this->__fbthrift_field_i32WithCustomDefault)) &&
 (this->__fbthrift_field_mapMap.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField30PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField30PatchStruct>>>(*this->__fbthrift_field_mapMap)) &&
 (this->__fbthrift_field_listMap.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField29PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField29PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField29PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField29PatchStruct>>>(*this->__fbthrift_field_listMap)) &&
 (this->__fbthrift_field_optMapVal.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField28PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField28PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField28PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField28PatchStruct>>>(*this->__fbthrift_field_optMapVal)) &&
 (this->__fbthrift_field_optSetVal.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::patch::MyStructField27PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField27PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::patch::MyStructField27PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField27PatchStruct>>>(*this->__fbthrift_field_optSetVal)) &&
 (this->__fbthrift_field_optListVal.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField26PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField26PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField26PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField26PatchStruct>>>(*this->__fbthrift_field_optListVal)) &&
 (this->__fbthrift_field_optLateStructVal.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>(*this->__fbthrift_field_optLateStructVal)) &&
 (this->__fbthrift_field_optStructVal.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>(*this->__fbthrift_field_optStructVal)) &&
 (this->__fbthrift_field_optEnumVal.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField23PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField23PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField23PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField23PatchStruct>>>(*this->__fbthrift_field_optEnumVal)) &&
 (this->__fbthrift_field_optBinaryVal.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>(*this->__fbthrift_field_optBinaryVal)) &&
 (this->__fbthrift_field_optStringVal.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>(*this->__fbthrift_field_optStringVal)) &&
 (this->__fbthrift_field_optDoubleVal.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>(*this->__fbthrift_field_optDoubleVal)) &&
 (this->__fbthrift_field_optFloatVal.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>(*this->__fbthrift_field_optFloatVal)) &&
 (this->__fbthrift_field_optI64Val.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>(*this->__fbthrift_field_optI64Val)) &&
 (this->__fbthrift_field_optI32Val.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>(*this->__fbthrift_field_optI32Val)) &&
 (this->__fbthrift_field_optI16Val.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>(*this->__fbthrift_field_optI16Val)) &&
 (this->__fbthrift_field_optByteVal.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>(*this->__fbthrift_field_optByteVal)) &&
 (this->__fbthrift_field_optBoolVal.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>(*this->__fbthrift_field_optBoolVal)) &&
 (this->__fbthrift_field_lateStructVal.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructPatchStruct>>>(*this->__fbthrift_field_lateStructVal)) &&
 (this->__fbthrift_field_unionVal.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::MyUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionPatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::MyUnionPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyUnionPatchStruct>>>(*this->__fbthrift_field_unionVal)) &&
 (this->__fbthrift_field_structVal.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>(*this->__fbthrift_field_structVal)) &&
 (this->__fbthrift_field_enumVal.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField10PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField10PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField10PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyStructField10PatchStruct>>>(*this->__fbthrift_field_enumVal)) &&
 (this->__fbthrift_field_binaryVal.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BinaryPatchStruct>>>(*this->__fbthrift_field_binaryVal)) &&
 (this->__fbthrift_field_stringVal.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>(*this->__fbthrift_field_stringVal)) &&
 (this->__fbthrift_field_doubleVal.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::DoublePatchStruct>>>(*this->__fbthrift_field_doubleVal)) &&
 (this->__fbthrift_field_floatVal.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::FloatPatchStruct>>>(*this->__fbthrift_field_floatVal)) &&
 (this->__fbthrift_field_i64Val.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>(*this->__fbthrift_field_i64Val)) &&
 (this->__fbthrift_field_i32Val.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I32PatchStruct>>>(*this->__fbthrift_field_i32Val)) &&
 (this->__fbthrift_field_i16Val.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I16PatchStruct>>>(*this->__fbthrift_field_i16Val)) &&
 (this->__fbthrift_field_byteVal.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BytePatchStruct>>>(*this->__fbthrift_field_byteVal)) &&
 (this->__fbthrift_field_boolVal.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>(*this->__fbthrift_field_boolVal)) &&
 (this->__fbthrift_field_structWithFieldCustomDefault.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::MyDataPatchStruct>>>(*this->__fbthrift_field_structWithFieldCustomDefault));
}

bool MyStructFieldPatchStruct::operator==([[maybe_unused]] const MyStructFieldPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyStructFieldPatchStruct::operator<([[maybe_unused]] const MyStructFieldPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] MyStructFieldPatchStruct& a, [[maybe_unused]] MyStructFieldPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_structWithCustomDefault, b.__fbthrift_field_structWithCustomDefault);
  swap(a.__fbthrift_field_i32WithCustomDefault, b.__fbthrift_field_i32WithCustomDefault);
  swap(a.__fbthrift_field_mapMap, b.__fbthrift_field_mapMap);
  swap(a.__fbthrift_field_listMap, b.__fbthrift_field_listMap);
  swap(a.__fbthrift_field_optMapVal, b.__fbthrift_field_optMapVal);
  swap(a.__fbthrift_field_optSetVal, b.__fbthrift_field_optSetVal);
  swap(a.__fbthrift_field_optListVal, b.__fbthrift_field_optListVal);
  swap(a.__fbthrift_field_optLateStructVal, b.__fbthrift_field_optLateStructVal);
  swap(a.__fbthrift_field_optStructVal, b.__fbthrift_field_optStructVal);
  swap(a.__fbthrift_field_optEnumVal, b.__fbthrift_field_optEnumVal);
  swap(a.__fbthrift_field_optBinaryVal, b.__fbthrift_field_optBinaryVal);
  swap(a.__fbthrift_field_optStringVal, b.__fbthrift_field_optStringVal);
  swap(a.__fbthrift_field_optDoubleVal, b.__fbthrift_field_optDoubleVal);
  swap(a.__fbthrift_field_optFloatVal, b.__fbthrift_field_optFloatVal);
  swap(a.__fbthrift_field_optI64Val, b.__fbthrift_field_optI64Val);
  swap(a.__fbthrift_field_optI32Val, b.__fbthrift_field_optI32Val);
  swap(a.__fbthrift_field_optI16Val, b.__fbthrift_field_optI16Val);
  swap(a.__fbthrift_field_optByteVal, b.__fbthrift_field_optByteVal);
  swap(a.__fbthrift_field_optBoolVal, b.__fbthrift_field_optBoolVal);
  swap(a.__fbthrift_field_lateStructVal, b.__fbthrift_field_lateStructVal);
  swap(a.__fbthrift_field_unionVal, b.__fbthrift_field_unionVal);
  swap(a.__fbthrift_field_structVal, b.__fbthrift_field_structVal);
  swap(a.__fbthrift_field_enumVal, b.__fbthrift_field_enumVal);
  swap(a.__fbthrift_field_binaryVal, b.__fbthrift_field_binaryVal);
  swap(a.__fbthrift_field_stringVal, b.__fbthrift_field_stringVal);
  swap(a.__fbthrift_field_doubleVal, b.__fbthrift_field_doubleVal);
  swap(a.__fbthrift_field_floatVal, b.__fbthrift_field_floatVal);
  swap(a.__fbthrift_field_i64Val, b.__fbthrift_field_i64Val);
  swap(a.__fbthrift_field_i32Val, b.__fbthrift_field_i32Val);
  swap(a.__fbthrift_field_i16Val, b.__fbthrift_field_i16Val);
  swap(a.__fbthrift_field_byteVal, b.__fbthrift_field_byteVal);
  swap(a.__fbthrift_field_boolVal, b.__fbthrift_field_boolVal);
  swap(a.__fbthrift_field_structWithFieldCustomDefault, b.__fbthrift_field_structWithFieldCustomDefault);
}

template void MyStructFieldPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructFieldPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructFieldPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructFieldPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructFieldPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructFieldPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructFieldPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructFieldPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataWithCustomDefaultPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I32Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField30Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField29Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField28Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField27Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField26Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::LateDefStructPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField23Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::BinaryPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::StringPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::DoublePatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::FloatPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I64Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I32Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I16Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::BytePatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::BoolPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::LateDefStructPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyUnionPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField10Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::BinaryPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::StringPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::DoublePatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::FloatPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I64Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I32Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I16Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::BytePatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::BoolPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructEnsureStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructEnsureStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructEnsureStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructEnsureStruct";
}

const folly::StringPiece MyStructEnsureStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructEnsureStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStructEnsureStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStructEnsureStruct>::name;
}

MyStructEnsureStruct::MyStructEnsureStruct(const MyStructEnsureStruct&) = default;
MyStructEnsureStruct& MyStructEnsureStruct::operator=(const MyStructEnsureStruct&) = default;
MyStructEnsureStruct::MyStructEnsureStruct() :
      __fbthrift_field_i32WithCustomDefault(),
      __fbthrift_field_optEnumVal(),
      __fbthrift_field_optDoubleVal(),
      __fbthrift_field_optFloatVal(),
      __fbthrift_field_optI64Val(),
      __fbthrift_field_optI32Val(),
      __fbthrift_field_optI16Val(),
      __fbthrift_field_optByteVal(),
      __fbthrift_field_optBoolVal(),
      __fbthrift_field_enumVal(),
      __fbthrift_field_doubleVal(),
      __fbthrift_field_floatVal(),
      __fbthrift_field_i64Val(),
      __fbthrift_field_i32Val(),
      __fbthrift_field_i16Val(),
      __fbthrift_field_byteVal(),
      __fbthrift_field_boolVal() {
}


MyStructEnsureStruct::~MyStructEnsureStruct() {}

MyStructEnsureStruct::MyStructEnsureStruct([[maybe_unused]] MyStructEnsureStruct&& other) noexcept :
    __fbthrift_field_structWithCustomDefault(std::move(other.__fbthrift_field_structWithCustomDefault)),
    __fbthrift_field_i32WithCustomDefault(std::move(other.__fbthrift_field_i32WithCustomDefault)),
    __fbthrift_field_mapMap(std::move(other.__fbthrift_field_mapMap)),
    __fbthrift_field_listMap(std::move(other.__fbthrift_field_listMap)),
    __fbthrift_field_optMapVal(std::move(other.__fbthrift_field_optMapVal)),
    __fbthrift_field_optSetVal(std::move(other.__fbthrift_field_optSetVal)),
    __fbthrift_field_optListVal(std::move(other.__fbthrift_field_optListVal)),
    __fbthrift_field_optLateStructVal(std::move(other.__fbthrift_field_optLateStructVal)),
    __fbthrift_field_optStructVal(std::move(other.__fbthrift_field_optStructVal)),
    __fbthrift_field_optEnumVal(std::move(other.__fbthrift_field_optEnumVal)),
    __fbthrift_field_optBinaryVal(std::move(other.__fbthrift_field_optBinaryVal)),
    __fbthrift_field_optStringVal(std::move(other.__fbthrift_field_optStringVal)),
    __fbthrift_field_optDoubleVal(std::move(other.__fbthrift_field_optDoubleVal)),
    __fbthrift_field_optFloatVal(std::move(other.__fbthrift_field_optFloatVal)),
    __fbthrift_field_optI64Val(std::move(other.__fbthrift_field_optI64Val)),
    __fbthrift_field_optI32Val(std::move(other.__fbthrift_field_optI32Val)),
    __fbthrift_field_optI16Val(std::move(other.__fbthrift_field_optI16Val)),
    __fbthrift_field_optByteVal(std::move(other.__fbthrift_field_optByteVal)),
    __fbthrift_field_optBoolVal(std::move(other.__fbthrift_field_optBoolVal)),
    __fbthrift_field_lateStructVal(std::move(other.__fbthrift_field_lateStructVal)),
    __fbthrift_field_unionVal(std::move(other.__fbthrift_field_unionVal)),
    __fbthrift_field_structVal(std::move(other.__fbthrift_field_structVal)),
    __fbthrift_field_enumVal(std::move(other.__fbthrift_field_enumVal)),
    __fbthrift_field_binaryVal(std::move(other.__fbthrift_field_binaryVal)),
    __fbthrift_field_stringVal(std::move(other.__fbthrift_field_stringVal)),
    __fbthrift_field_doubleVal(std::move(other.__fbthrift_field_doubleVal)),
    __fbthrift_field_floatVal(std::move(other.__fbthrift_field_floatVal)),
    __fbthrift_field_i64Val(std::move(other.__fbthrift_field_i64Val)),
    __fbthrift_field_i32Val(std::move(other.__fbthrift_field_i32Val)),
    __fbthrift_field_i16Val(std::move(other.__fbthrift_field_i16Val)),
    __fbthrift_field_byteVal(std::move(other.__fbthrift_field_byteVal)),
    __fbthrift_field_boolVal(std::move(other.__fbthrift_field_boolVal)),
    __fbthrift_field_structWithFieldCustomDefault(std::move(other.__fbthrift_field_structWithFieldCustomDefault)),
    __isset(other.__isset) {
}

MyStructEnsureStruct& MyStructEnsureStruct::operator=([[maybe_unused]] MyStructEnsureStruct&& other) noexcept {
    this->__fbthrift_field_structWithCustomDefault = std::move(other.__fbthrift_field_structWithCustomDefault);
    this->__fbthrift_field_i32WithCustomDefault = std::move(other.__fbthrift_field_i32WithCustomDefault);
    this->__fbthrift_field_mapMap = std::move(other.__fbthrift_field_mapMap);
    this->__fbthrift_field_listMap = std::move(other.__fbthrift_field_listMap);
    this->__fbthrift_field_optMapVal = std::move(other.__fbthrift_field_optMapVal);
    this->__fbthrift_field_optSetVal = std::move(other.__fbthrift_field_optSetVal);
    this->__fbthrift_field_optListVal = std::move(other.__fbthrift_field_optListVal);
    this->__fbthrift_field_optLateStructVal = std::move(other.__fbthrift_field_optLateStructVal);
    this->__fbthrift_field_optStructVal = std::move(other.__fbthrift_field_optStructVal);
    this->__fbthrift_field_optEnumVal = std::move(other.__fbthrift_field_optEnumVal);
    this->__fbthrift_field_optBinaryVal = std::move(other.__fbthrift_field_optBinaryVal);
    this->__fbthrift_field_optStringVal = std::move(other.__fbthrift_field_optStringVal);
    this->__fbthrift_field_optDoubleVal = std::move(other.__fbthrift_field_optDoubleVal);
    this->__fbthrift_field_optFloatVal = std::move(other.__fbthrift_field_optFloatVal);
    this->__fbthrift_field_optI64Val = std::move(other.__fbthrift_field_optI64Val);
    this->__fbthrift_field_optI32Val = std::move(other.__fbthrift_field_optI32Val);
    this->__fbthrift_field_optI16Val = std::move(other.__fbthrift_field_optI16Val);
    this->__fbthrift_field_optByteVal = std::move(other.__fbthrift_field_optByteVal);
    this->__fbthrift_field_optBoolVal = std::move(other.__fbthrift_field_optBoolVal);
    this->__fbthrift_field_lateStructVal = std::move(other.__fbthrift_field_lateStructVal);
    this->__fbthrift_field_unionVal = std::move(other.__fbthrift_field_unionVal);
    this->__fbthrift_field_structVal = std::move(other.__fbthrift_field_structVal);
    this->__fbthrift_field_enumVal = std::move(other.__fbthrift_field_enumVal);
    this->__fbthrift_field_binaryVal = std::move(other.__fbthrift_field_binaryVal);
    this->__fbthrift_field_stringVal = std::move(other.__fbthrift_field_stringVal);
    this->__fbthrift_field_doubleVal = std::move(other.__fbthrift_field_doubleVal);
    this->__fbthrift_field_floatVal = std::move(other.__fbthrift_field_floatVal);
    this->__fbthrift_field_i64Val = std::move(other.__fbthrift_field_i64Val);
    this->__fbthrift_field_i32Val = std::move(other.__fbthrift_field_i32Val);
    this->__fbthrift_field_i16Val = std::move(other.__fbthrift_field_i16Val);
    this->__fbthrift_field_byteVal = std::move(other.__fbthrift_field_byteVal);
    this->__fbthrift_field_boolVal = std::move(other.__fbthrift_field_boolVal);
    this->__fbthrift_field_structWithFieldCustomDefault = std::move(other.__fbthrift_field_structWithFieldCustomDefault);
    __isset = other.__isset;
    return *this;
}


MyStructEnsureStruct::MyStructEnsureStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyDataWithCustomDefault> structWithCustomDefault__arg, ::std::int32_t i32WithCustomDefault__arg, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>> mapMap__arg, ::std::vector<::std::map<::std::string, ::std::int32_t>> listMap__arg, ::std::map<::std::string, ::std::string> optMapVal__arg, ::std::set<::std::string> optSetVal__arg, ::std::vector<::std::int16_t> optListVal__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct> optLateStructVal__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData> optStructVal__arg, ::test::fixtures::patch::MyEnum optEnumVal__arg, folly::IOBuf optBinaryVal__arg, ::std::string optStringVal__arg, double optDoubleVal__arg, float optFloatVal__arg, ::std::int64_t optI64Val__arg, ::std::int32_t optI32Val__arg, ::std::int16_t optI16Val__arg, ::std::int8_t optByteVal__arg, bool optBoolVal__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct> lateStructVal__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion> unionVal__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData> structVal__arg, ::test::fixtures::patch::MyEnum enumVal__arg, folly::IOBuf binaryVal__arg, ::std::string stringVal__arg, double doubleVal__arg, float floatVal__arg, ::std::int64_t i64Val__arg, ::std::int32_t i32Val__arg, ::std::int16_t i16Val__arg, ::std::int8_t byteVal__arg, bool boolVal__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData> structWithFieldCustomDefault__arg) :
    __fbthrift_field_structWithCustomDefault(std::move(structWithCustomDefault__arg)),
    __fbthrift_field_i32WithCustomDefault(std::move(i32WithCustomDefault__arg)),
    __fbthrift_field_mapMap(std::move(mapMap__arg)),
    __fbthrift_field_listMap(std::move(listMap__arg)),
    __fbthrift_field_optMapVal(std::move(optMapVal__arg)),
    __fbthrift_field_optSetVal(std::move(optSetVal__arg)),
    __fbthrift_field_optListVal(std::move(optListVal__arg)),
    __fbthrift_field_optLateStructVal(std::move(optLateStructVal__arg)),
    __fbthrift_field_optStructVal(std::move(optStructVal__arg)),
    __fbthrift_field_optEnumVal(std::move(optEnumVal__arg)),
    __fbthrift_field_optBinaryVal(std::move(optBinaryVal__arg)),
    __fbthrift_field_optStringVal(std::move(optStringVal__arg)),
    __fbthrift_field_optDoubleVal(std::move(optDoubleVal__arg)),
    __fbthrift_field_optFloatVal(std::move(optFloatVal__arg)),
    __fbthrift_field_optI64Val(std::move(optI64Val__arg)),
    __fbthrift_field_optI32Val(std::move(optI32Val__arg)),
    __fbthrift_field_optI16Val(std::move(optI16Val__arg)),
    __fbthrift_field_optByteVal(std::move(optByteVal__arg)),
    __fbthrift_field_optBoolVal(std::move(optBoolVal__arg)),
    __fbthrift_field_lateStructVal(std::move(lateStructVal__arg)),
    __fbthrift_field_unionVal(std::move(unionVal__arg)),
    __fbthrift_field_structVal(std::move(structVal__arg)),
    __fbthrift_field_enumVal(std::move(enumVal__arg)),
    __fbthrift_field_binaryVal(std::move(binaryVal__arg)),
    __fbthrift_field_stringVal(std::move(stringVal__arg)),
    __fbthrift_field_doubleVal(std::move(doubleVal__arg)),
    __fbthrift_field_floatVal(std::move(floatVal__arg)),
    __fbthrift_field_i64Val(std::move(i64Val__arg)),
    __fbthrift_field_i32Val(std::move(i32Val__arg)),
    __fbthrift_field_i16Val(std::move(i16Val__arg)),
    __fbthrift_field_byteVal(std::move(byteVal__arg)),
    __fbthrift_field_boolVal(std::move(boolVal__arg)),
    __fbthrift_field_structWithFieldCustomDefault(std::move(structWithFieldCustomDefault__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
  __isset.set(folly::index_constant<13>(), true);
  __isset.set(folly::index_constant<14>(), true);
  __isset.set(folly::index_constant<15>(), true);
  __isset.set(folly::index_constant<16>(), true);
  __isset.set(folly::index_constant<17>(), true);
  __isset.set(folly::index_constant<18>(), true);
  __isset.set(folly::index_constant<19>(), true);
  __isset.set(folly::index_constant<20>(), true);
  __isset.set(folly::index_constant<21>(), true);
  __isset.set(folly::index_constant<22>(), true);
  __isset.set(folly::index_constant<23>(), true);
  __isset.set(folly::index_constant<24>(), true);
  __isset.set(folly::index_constant<25>(), true);
}


void MyStructEnsureStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_structWithCustomDefault.reset();
  this->__fbthrift_field_i32WithCustomDefault = ::std::int32_t();
  this->__fbthrift_field_mapMap.clear();
  this->__fbthrift_field_listMap.clear();
  this->__fbthrift_field_optMapVal.clear();
  this->__fbthrift_field_optSetVal.clear();
  this->__fbthrift_field_optListVal.clear();
  this->__fbthrift_field_optStructVal.reset();
  this->__fbthrift_field_optEnumVal = ::test::fixtures::patch::MyEnum();
  this->__fbthrift_field_optBinaryVal = apache::thrift::StringTraits<folly::IOBuf>::fromStringLiteral("");
  this->__fbthrift_field_optStringVal = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_optDoubleVal = double();
  this->__fbthrift_field_optFloatVal = float();
  this->__fbthrift_field_optI64Val = ::std::int64_t();
  this->__fbthrift_field_optI32Val = ::std::int32_t();
  this->__fbthrift_field_optI16Val = ::std::int16_t();
  this->__fbthrift_field_optByteVal = ::std::int8_t();
  this->__fbthrift_field_optBoolVal = bool();
  this->__fbthrift_field_unionVal.reset();
  this->__fbthrift_field_structVal.reset();
  this->__fbthrift_field_enumVal = ::test::fixtures::patch::MyEnum();
  this->__fbthrift_field_binaryVal = apache::thrift::StringTraits<folly::IOBuf>::fromStringLiteral("");
  this->__fbthrift_field_stringVal = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_doubleVal = double();
  this->__fbthrift_field_floatVal = float();
  this->__fbthrift_field_i64Val = ::std::int64_t();
  this->__fbthrift_field_i32Val = ::std::int32_t();
  this->__fbthrift_field_i16Val = ::std::int16_t();
  this->__fbthrift_field_byteVal = ::std::int8_t();
  this->__fbthrift_field_boolVal = bool();
  this->__fbthrift_field_structWithFieldCustomDefault.reset();
  __isset = {};
}

void MyStructEnsureStruct::__fbthrift_clear_terse_fields() {
}

bool MyStructEnsureStruct::__fbthrift_is_empty() const {
  return !(this->__fbthrift_field_structWithCustomDefault) &&
 !(this->__isset.get(0)) &&
 !(this->__isset.get(1)) &&
 !(this->__isset.get(2)) &&
 !(this->__isset.get(3)) &&
 !(this->__isset.get(4)) &&
 !(this->__isset.get(5)) &&
 !(this->__fbthrift_field_optLateStructVal) &&
 !(this->__fbthrift_field_optStructVal) &&
 !(this->__isset.get(6)) &&
 !(this->__isset.get(7)) &&
 !(this->__isset.get(8)) &&
 !(this->__isset.get(9)) &&
 !(this->__isset.get(10)) &&
 !(this->__isset.get(11)) &&
 !(this->__isset.get(12)) &&
 !(this->__isset.get(13)) &&
 !(this->__isset.get(14)) &&
 !(this->__isset.get(15)) &&
 !(this->__fbthrift_field_lateStructVal) &&
 !(this->__fbthrift_field_unionVal) &&
 !(this->__fbthrift_field_structVal) &&
 !(this->__isset.get(16)) &&
 !(this->__isset.get(17)) &&
 !(this->__isset.get(18)) &&
 !(this->__isset.get(19)) &&
 !(this->__isset.get(20)) &&
 !(this->__isset.get(21)) &&
 !(this->__isset.get(22)) &&
 !(this->__isset.get(23)) &&
 !(this->__isset.get(24)) &&
 !(this->__isset.get(25)) &&
 !(this->__fbthrift_field_structWithFieldCustomDefault);
}

bool MyStructEnsureStruct::operator==([[maybe_unused]] const MyStructEnsureStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool MyStructEnsureStruct::operator<([[maybe_unused]] const MyStructEnsureStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>* MyStructEnsureStruct::get_mapMap() const& {
  return mapMap_ref().has_value() ? std::addressof(__fbthrift_field_mapMap) : nullptr;
}

::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>* MyStructEnsureStruct::get_mapMap() & {
  return mapMap_ref().has_value() ? std::addressof(__fbthrift_field_mapMap) : nullptr;
}

const ::std::vector<::std::map<::std::string, ::std::int32_t>>* MyStructEnsureStruct::get_listMap() const& {
  return listMap_ref().has_value() ? std::addressof(__fbthrift_field_listMap) : nullptr;
}

::std::vector<::std::map<::std::string, ::std::int32_t>>* MyStructEnsureStruct::get_listMap() & {
  return listMap_ref().has_value() ? std::addressof(__fbthrift_field_listMap) : nullptr;
}

const ::std::map<::std::string, ::std::string>* MyStructEnsureStruct::get_optMapVal() const& {
  return optMapVal_ref().has_value() ? std::addressof(__fbthrift_field_optMapVal) : nullptr;
}

::std::map<::std::string, ::std::string>* MyStructEnsureStruct::get_optMapVal() & {
  return optMapVal_ref().has_value() ? std::addressof(__fbthrift_field_optMapVal) : nullptr;
}

const ::std::set<::std::string>* MyStructEnsureStruct::get_optSetVal() const& {
  return optSetVal_ref().has_value() ? std::addressof(__fbthrift_field_optSetVal) : nullptr;
}

::std::set<::std::string>* MyStructEnsureStruct::get_optSetVal() & {
  return optSetVal_ref().has_value() ? std::addressof(__fbthrift_field_optSetVal) : nullptr;
}

const ::std::vector<::std::int16_t>* MyStructEnsureStruct::get_optListVal() const& {
  return optListVal_ref().has_value() ? std::addressof(__fbthrift_field_optListVal) : nullptr;
}

::std::vector<::std::int16_t>* MyStructEnsureStruct::get_optListVal() & {
  return optListVal_ref().has_value() ? std::addressof(__fbthrift_field_optListVal) : nullptr;
}


void swap([[maybe_unused]] MyStructEnsureStruct& a, [[maybe_unused]] MyStructEnsureStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_structWithCustomDefault, b.__fbthrift_field_structWithCustomDefault);
  swap(a.__fbthrift_field_i32WithCustomDefault, b.__fbthrift_field_i32WithCustomDefault);
  swap(a.__fbthrift_field_mapMap, b.__fbthrift_field_mapMap);
  swap(a.__fbthrift_field_listMap, b.__fbthrift_field_listMap);
  swap(a.__fbthrift_field_optMapVal, b.__fbthrift_field_optMapVal);
  swap(a.__fbthrift_field_optSetVal, b.__fbthrift_field_optSetVal);
  swap(a.__fbthrift_field_optListVal, b.__fbthrift_field_optListVal);
  swap(a.__fbthrift_field_optLateStructVal, b.__fbthrift_field_optLateStructVal);
  swap(a.__fbthrift_field_optStructVal, b.__fbthrift_field_optStructVal);
  swap(a.__fbthrift_field_optEnumVal, b.__fbthrift_field_optEnumVal);
  swap(a.__fbthrift_field_optBinaryVal, b.__fbthrift_field_optBinaryVal);
  swap(a.__fbthrift_field_optStringVal, b.__fbthrift_field_optStringVal);
  swap(a.__fbthrift_field_optDoubleVal, b.__fbthrift_field_optDoubleVal);
  swap(a.__fbthrift_field_optFloatVal, b.__fbthrift_field_optFloatVal);
  swap(a.__fbthrift_field_optI64Val, b.__fbthrift_field_optI64Val);
  swap(a.__fbthrift_field_optI32Val, b.__fbthrift_field_optI32Val);
  swap(a.__fbthrift_field_optI16Val, b.__fbthrift_field_optI16Val);
  swap(a.__fbthrift_field_optByteVal, b.__fbthrift_field_optByteVal);
  swap(a.__fbthrift_field_optBoolVal, b.__fbthrift_field_optBoolVal);
  swap(a.__fbthrift_field_lateStructVal, b.__fbthrift_field_lateStructVal);
  swap(a.__fbthrift_field_unionVal, b.__fbthrift_field_unionVal);
  swap(a.__fbthrift_field_structVal, b.__fbthrift_field_structVal);
  swap(a.__fbthrift_field_enumVal, b.__fbthrift_field_enumVal);
  swap(a.__fbthrift_field_binaryVal, b.__fbthrift_field_binaryVal);
  swap(a.__fbthrift_field_stringVal, b.__fbthrift_field_stringVal);
  swap(a.__fbthrift_field_doubleVal, b.__fbthrift_field_doubleVal);
  swap(a.__fbthrift_field_floatVal, b.__fbthrift_field_floatVal);
  swap(a.__fbthrift_field_i64Val, b.__fbthrift_field_i64Val);
  swap(a.__fbthrift_field_i32Val, b.__fbthrift_field_i32Val);
  swap(a.__fbthrift_field_i16Val, b.__fbthrift_field_i16Val);
  swap(a.__fbthrift_field_byteVal, b.__fbthrift_field_byteVal);
  swap(a.__fbthrift_field_boolVal, b.__fbthrift_field_boolVal);
  swap(a.__fbthrift_field_structWithFieldCustomDefault, b.__fbthrift_field_structWithFieldCustomDefault);
  swap(a.__isset, b.__isset);
}

template void MyStructEnsureStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructEnsureStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructEnsureStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructEnsureStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructEnsureStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructEnsureStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructEnsureStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructEnsureStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructEnsureStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataWithCustomDefault>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructEnsureStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::LateDefStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructEnsureStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyData>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructEnsureStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::LateDefStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructEnsureStruct,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::MyUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructEnsureStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyData>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructEnsureStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyData>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::LateDefStructPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::LateDefStructPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* LateDefStructPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/LateDefStructPatch";
}

const folly::StringPiece LateDefStructPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<LateDefStructPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece LateDefStructPatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<LateDefStructPatchStruct>::name;
}

LateDefStructPatchStruct::LateDefStructPatchStruct(const LateDefStructPatchStruct& srcObj) :
    __fbthrift_field_assign(srcObj.__fbthrift_field_assign),
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __fbthrift_field_remove(srcObj.__fbthrift_field_remove) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::LateDefStructFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::LateDefStructFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

static void __fbthrift_swap(LateDefStructPatchStruct& lhs, LateDefStructPatchStruct& rhs) { swap(lhs, rhs); }
LateDefStructPatchStruct& LateDefStructPatchStruct::operator=(const LateDefStructPatchStruct& other) {
  LateDefStructPatchStruct tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

LateDefStructPatchStruct::LateDefStructPatchStruct() :
      __fbthrift_field_clear() {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::LateDefStructFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::LateDefStructFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}


LateDefStructPatchStruct::~LateDefStructPatchStruct() {}

LateDefStructPatchStruct::LateDefStructPatchStruct([[maybe_unused]] LateDefStructPatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_remove(std::move(other.__fbthrift_field_remove)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::LateDefStructFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::LateDefStructFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

LateDefStructPatchStruct& LateDefStructPatchStruct::operator=([[maybe_unused]] LateDefStructPatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_remove = std::move(other.__fbthrift_field_remove);
    return *this;
}


LateDefStructPatchStruct::LateDefStructPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::LateDefStruct> assign__arg, bool clear__arg, ::test::fixtures::patch::LateDefStructFieldPatch patchPrior__arg, ::test::fixtures::patch::LateDefStructEnsureStruct ensure__arg, ::test::fixtures::patch::LateDefStructFieldPatch patch__arg, ::apache::thrift::op::FieldIdList remove__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_remove(std::move(remove__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::LateDefStructFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::LateDefStructFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}


void LateDefStructPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

void LateDefStructPatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

bool LateDefStructPatchStruct::__fbthrift_is_empty() const {
  return !(this->__fbthrift_field_assign) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::LateDefStructFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructFieldPatchStruct>>>(this->__fbthrift_field_patchPrior) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructEnsureStruct>>(this->__fbthrift_field_ensure) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::LateDefStructFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LateDefStructFieldPatchStruct>>>(this->__fbthrift_field_patch) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldIdListToSetAdapter, ::apache::thrift::type::list<::apache::thrift::type::i16_t>>>(this->__fbthrift_field_remove);
}

bool LateDefStructPatchStruct::operator==([[maybe_unused]] const LateDefStructPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool LateDefStructPatchStruct::operator<([[maybe_unused]] const LateDefStructPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::test::fixtures::patch::LateDefStructEnsureStruct& LateDefStructPatchStruct::get_ensure() const& {
  return __fbthrift_field_ensure;
}

::test::fixtures::patch::LateDefStructEnsureStruct LateDefStructPatchStruct::get_ensure() && {
  return std::move(__fbthrift_field_ensure);
}


void swap([[maybe_unused]] LateDefStructPatchStruct& a, [[maybe_unused]] LateDefStructPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__fbthrift_field_remove, b.__fbthrift_field_remove);
}

template void LateDefStructPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t LateDefStructPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t LateDefStructPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t LateDefStructPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void LateDefStructPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t LateDefStructPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t LateDefStructPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t LateDefStructPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        LateDefStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::LateDefStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        LateDefStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::LateDefStructFieldPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        LateDefStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::LateDefStructEnsureStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        LateDefStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::LateDefStructFieldPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::LateDefStructFieldPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::LateDefStructFieldPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* LateDefStructFieldPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/LateDefStructFieldPatch";
}

const folly::StringPiece LateDefStructFieldPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<LateDefStructFieldPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece LateDefStructFieldPatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<LateDefStructFieldPatchStruct>::name;
}


LateDefStructFieldPatchStruct::LateDefStructFieldPatchStruct(apache::thrift::FragileConstructor) {}


void LateDefStructFieldPatchStruct::__fbthrift_clear() {
  // clear all fields
}

void LateDefStructFieldPatchStruct::__fbthrift_clear_terse_fields() {
}

bool LateDefStructFieldPatchStruct::__fbthrift_is_empty() const {
  return true;
}

bool LateDefStructFieldPatchStruct::operator==([[maybe_unused]] const LateDefStructFieldPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool LateDefStructFieldPatchStruct::operator<([[maybe_unused]] const LateDefStructFieldPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] LateDefStructFieldPatchStruct& a, [[maybe_unused]] LateDefStructFieldPatchStruct& b) {
  using ::std::swap;
}

template void LateDefStructFieldPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t LateDefStructFieldPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t LateDefStructFieldPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t LateDefStructFieldPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void LateDefStructFieldPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t LateDefStructFieldPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t LateDefStructFieldPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t LateDefStructFieldPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::LateDefStructEnsureStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::LateDefStructEnsureStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* LateDefStructEnsureStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/LateDefStructEnsureStruct";
}

const folly::StringPiece LateDefStructEnsureStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<LateDefStructEnsureStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece LateDefStructEnsureStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<LateDefStructEnsureStruct>::name;
}


LateDefStructEnsureStruct::LateDefStructEnsureStruct(apache::thrift::FragileConstructor) {}


void LateDefStructEnsureStruct::__fbthrift_clear() {
  // clear all fields
}

void LateDefStructEnsureStruct::__fbthrift_clear_terse_fields() {
}

bool LateDefStructEnsureStruct::__fbthrift_is_empty() const {
  return true;
}

bool LateDefStructEnsureStruct::operator==([[maybe_unused]] const LateDefStructEnsureStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool LateDefStructEnsureStruct::operator<([[maybe_unused]] const LateDefStructEnsureStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] LateDefStructEnsureStruct& a, [[maybe_unused]] LateDefStructEnsureStruct& b) {
  using ::std::swap;
}

template void LateDefStructEnsureStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t LateDefStructEnsureStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t LateDefStructEnsureStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t LateDefStructEnsureStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void LateDefStructEnsureStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t LateDefStructEnsureStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t LateDefStructEnsureStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t LateDefStructEnsureStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::RecursivePatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::RecursivePatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* RecursivePatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/RecursivePatch";
}

const folly::StringPiece RecursivePatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<RecursivePatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece RecursivePatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<RecursivePatchStruct>::name;
}

RecursivePatchStruct::RecursivePatchStruct(const RecursivePatchStruct& srcObj) :
    __fbthrift_field_assign(srcObj.__fbthrift_field_assign),
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __fbthrift_field_remove(srcObj.__fbthrift_field_remove) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RecursiveFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RecursiveFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

static void __fbthrift_swap(RecursivePatchStruct& lhs, RecursivePatchStruct& rhs) { swap(lhs, rhs); }
RecursivePatchStruct& RecursivePatchStruct::operator=(const RecursivePatchStruct& other) {
  RecursivePatchStruct tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

RecursivePatchStruct::RecursivePatchStruct() :
      __fbthrift_field_clear() {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RecursiveFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RecursiveFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}


RecursivePatchStruct::~RecursivePatchStruct() {}

RecursivePatchStruct::RecursivePatchStruct([[maybe_unused]] RecursivePatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_remove(std::move(other.__fbthrift_field_remove)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RecursiveFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RecursiveFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

RecursivePatchStruct& RecursivePatchStruct::operator=([[maybe_unused]] RecursivePatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_remove = std::move(other.__fbthrift_field_remove);
    return *this;
}


RecursivePatchStruct::RecursivePatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Recursive> assign__arg, bool clear__arg, ::test::fixtures::patch::RecursiveFieldPatch patchPrior__arg, ::test::fixtures::patch::RecursiveEnsureStruct ensure__arg, ::test::fixtures::patch::RecursiveFieldPatch patch__arg, ::apache::thrift::op::FieldIdList remove__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_remove(std::move(remove__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RecursiveFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RecursiveFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}


void RecursivePatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.reset();
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RecursiveFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::clear(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RecursiveFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

void RecursivePatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RecursiveFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::detail::st::clear_terse_fields(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RecursiveFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

bool RecursivePatchStruct::__fbthrift_is_empty() const {
  return !(this->__fbthrift_field_assign) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RecursiveFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RecursiveFieldPatchStruct>>>(this->__fbthrift_field_patchPrior) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::struct_t<::test::fixtures::patch::RecursiveEnsureStruct>>(this->__fbthrift_field_ensure) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RecursiveFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RecursiveFieldPatchStruct>>>(this->__fbthrift_field_patch) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldIdListToSetAdapter, ::apache::thrift::type::list<::apache::thrift::type::i16_t>>>(this->__fbthrift_field_remove);
}

bool RecursivePatchStruct::operator==([[maybe_unused]] const RecursivePatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool RecursivePatchStruct::operator<([[maybe_unused]] const RecursivePatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::test::fixtures::patch::RecursiveEnsureStruct& RecursivePatchStruct::get_ensure() const& {
  return __fbthrift_field_ensure;
}

::test::fixtures::patch::RecursiveEnsureStruct RecursivePatchStruct::get_ensure() && {
  return std::move(__fbthrift_field_ensure);
}


void swap([[maybe_unused]] RecursivePatchStruct& a, [[maybe_unused]] RecursivePatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__fbthrift_field_remove, b.__fbthrift_field_remove);
}

template void RecursivePatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t RecursivePatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t RecursivePatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t RecursivePatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void RecursivePatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t RecursivePatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t RecursivePatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t RecursivePatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        RecursivePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::Recursive>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        RecursivePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::RecursiveFieldPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        RecursivePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::RecursiveEnsureStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        RecursivePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::RecursiveFieldPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::RecursiveField1PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::RecursiveField1PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* RecursiveField1PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/RecursiveField1Patch";
}

const folly::StringPiece RecursiveField1PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<RecursiveField1PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece RecursiveField1PatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<RecursiveField1PatchStruct>::name;
}

RecursiveField1PatchStruct::RecursiveField1PatchStruct(const RecursiveField1PatchStruct&) = default;
RecursiveField1PatchStruct& RecursiveField1PatchStruct::operator=(const RecursiveField1PatchStruct&) = default;
RecursiveField1PatchStruct::RecursiveField1PatchStruct() :
      __fbthrift_field_clear() {
}


RecursiveField1PatchStruct::~RecursiveField1PatchStruct() {}

RecursiveField1PatchStruct::RecursiveField1PatchStruct([[maybe_unused]] RecursiveField1PatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __isset(other.__isset) {
}

RecursiveField1PatchStruct& RecursiveField1PatchStruct::operator=([[maybe_unused]] RecursiveField1PatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    __isset = other.__isset;
    return *this;
}


RecursiveField1PatchStruct::RecursiveField1PatchStruct(apache::thrift::FragileConstructor, ::std::map<::std::string, ::test::fixtures::patch::Recursive> assign__arg, bool clear__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void RecursiveField1PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  __isset = {};
}

void RecursiveField1PatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
}

bool RecursiveField1PatchStruct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0)) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear);
}

bool RecursiveField1PatchStruct::operator==([[maybe_unused]] const RecursiveField1PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool RecursiveField1PatchStruct::operator<([[maybe_unused]] const RecursiveField1PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::std::map<::std::string, ::test::fixtures::patch::Recursive>* RecursiveField1PatchStruct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::map<::std::string, ::test::fixtures::patch::Recursive>* RecursiveField1PatchStruct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}


void swap([[maybe_unused]] RecursiveField1PatchStruct& a, [[maybe_unused]] RecursiveField1PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__isset, b.__isset);
}

template void RecursiveField1PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t RecursiveField1PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t RecursiveField1PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t RecursiveField1PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void RecursiveField1PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t RecursiveField1PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t RecursiveField1PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t RecursiveField1PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        RecursiveField1PatchStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::map<::std::string, ::test::fixtures::patch::Recursive>>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::RecursiveFieldPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::RecursiveFieldPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* RecursiveFieldPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/RecursiveFieldPatch";
}

const folly::StringPiece RecursiveFieldPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<RecursiveFieldPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece RecursiveFieldPatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<RecursiveFieldPatchStruct>::name;
}

RecursiveFieldPatchStruct::RecursiveFieldPatchStruct(const RecursiveFieldPatchStruct& srcObj) :
    __fbthrift_field_nodes(srcObj.__fbthrift_field_nodes) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::RecursiveField1PatchStruct>, -1>(*__fbthrift_field_nodes, *this);
}

static void __fbthrift_swap(RecursiveFieldPatchStruct& lhs, RecursiveFieldPatchStruct& rhs) { swap(lhs, rhs); }
RecursiveFieldPatchStruct& RecursiveFieldPatchStruct::operator=(const RecursiveFieldPatchStruct& other) {
  RecursiveFieldPatchStruct tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

RecursiveFieldPatchStruct::RecursiveFieldPatchStruct() :
      __fbthrift_field_nodes(::apache::thrift::detail::boxed_value<::test::fixtures::patch::RecursiveField1Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::RecursiveField1PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RecursiveField1PatchStruct>>>())) {
}


RecursiveFieldPatchStruct::~RecursiveFieldPatchStruct() {}

RecursiveFieldPatchStruct::RecursiveFieldPatchStruct([[maybe_unused]] RecursiveFieldPatchStruct&& other) noexcept :
    __fbthrift_field_nodes(std::move(other.__fbthrift_field_nodes)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::RecursiveField1PatchStruct>, -1>(*__fbthrift_field_nodes, *this);
}

RecursiveFieldPatchStruct& RecursiveFieldPatchStruct::operator=([[maybe_unused]] RecursiveFieldPatchStruct&& other) noexcept {
    this->__fbthrift_field_nodes = std::move(other.__fbthrift_field_nodes);
    return *this;
}


RecursiveFieldPatchStruct::RecursiveFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::RecursiveField1Patch> nodes__arg) :
    __fbthrift_field_nodes(std::move(nodes__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::RecursiveField1PatchStruct>, -1>(*__fbthrift_field_nodes, *this);
}


void RecursiveFieldPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_nodes = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::RecursiveField1Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::RecursiveField1PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RecursiveField1PatchStruct>>>());
}

void RecursiveFieldPatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_nodes = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::RecursiveField1Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::RecursiveField1PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RecursiveField1PatchStruct>>>());
}

bool RecursiveFieldPatchStruct::__fbthrift_is_empty() const {
  return (this->__fbthrift_field_nodes.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::RecursiveField1PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RecursiveField1PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::RecursiveField1PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RecursiveField1PatchStruct>>>(*this->__fbthrift_field_nodes));
}

bool RecursiveFieldPatchStruct::operator==([[maybe_unused]] const RecursiveFieldPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool RecursiveFieldPatchStruct::operator<([[maybe_unused]] const RecursiveFieldPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] RecursiveFieldPatchStruct& a, [[maybe_unused]] RecursiveFieldPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_nodes, b.__fbthrift_field_nodes);
}

template void RecursiveFieldPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t RecursiveFieldPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t RecursiveFieldPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t RecursiveFieldPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void RecursiveFieldPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t RecursiveFieldPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t RecursiveFieldPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t RecursiveFieldPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        RecursiveFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::RecursiveField1Patch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::RecursiveEnsureStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::RecursiveEnsureStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* RecursiveEnsureStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/RecursiveEnsureStruct";
}

const folly::StringPiece RecursiveEnsureStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<RecursiveEnsureStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece RecursiveEnsureStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<RecursiveEnsureStruct>::name;
}

RecursiveEnsureStruct::RecursiveEnsureStruct(const RecursiveEnsureStruct&) = default;
RecursiveEnsureStruct& RecursiveEnsureStruct::operator=(const RecursiveEnsureStruct&) = default;
RecursiveEnsureStruct::RecursiveEnsureStruct() {
}


RecursiveEnsureStruct::~RecursiveEnsureStruct() {}

RecursiveEnsureStruct::RecursiveEnsureStruct([[maybe_unused]] RecursiveEnsureStruct&& other) noexcept :
    __fbthrift_field_nodes(std::move(other.__fbthrift_field_nodes)),
    __isset(other.__isset) {
}

RecursiveEnsureStruct& RecursiveEnsureStruct::operator=([[maybe_unused]] RecursiveEnsureStruct&& other) noexcept {
    this->__fbthrift_field_nodes = std::move(other.__fbthrift_field_nodes);
    __isset = other.__isset;
    return *this;
}


RecursiveEnsureStruct::RecursiveEnsureStruct(apache::thrift::FragileConstructor, ::std::map<::std::string, ::test::fixtures::patch::Recursive> nodes__arg) :
    __fbthrift_field_nodes(std::move(nodes__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void RecursiveEnsureStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_nodes.clear();
  __isset = {};
}

void RecursiveEnsureStruct::__fbthrift_clear_terse_fields() {
}

bool RecursiveEnsureStruct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0));
}

bool RecursiveEnsureStruct::operator==([[maybe_unused]] const RecursiveEnsureStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool RecursiveEnsureStruct::operator<([[maybe_unused]] const RecursiveEnsureStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::std::map<::std::string, ::test::fixtures::patch::Recursive>* RecursiveEnsureStruct::get_nodes() const& {
  return nodes_ref().has_value() ? std::addressof(__fbthrift_field_nodes) : nullptr;
}

::std::map<::std::string, ::test::fixtures::patch::Recursive>* RecursiveEnsureStruct::get_nodes() & {
  return nodes_ref().has_value() ? std::addressof(__fbthrift_field_nodes) : nullptr;
}


void swap([[maybe_unused]] RecursiveEnsureStruct& a, [[maybe_unused]] RecursiveEnsureStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_nodes, b.__fbthrift_field_nodes);
  swap(a.__isset, b.__isset);
}

template void RecursiveEnsureStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t RecursiveEnsureStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t RecursiveEnsureStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t RecursiveEnsureStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void RecursiveEnsureStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t RecursiveEnsureStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t RecursiveEnsureStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t RecursiveEnsureStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        RecursiveEnsureStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::map<::std::string, ::test::fixtures::patch::Recursive>>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::BarPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::BarPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* BarPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/BarPatch";
}

const folly::StringPiece BarPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<BarPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece BarPatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<BarPatchStruct>::name;
}

BarPatchStruct::BarPatchStruct(const BarPatchStruct& srcObj) :
    __fbthrift_field_assign(srcObj.__fbthrift_field_assign),
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __fbthrift_field_remove(srcObj.__fbthrift_field_remove) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::BarFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::BarFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

static void __fbthrift_swap(BarPatchStruct& lhs, BarPatchStruct& rhs) { swap(lhs, rhs); }
BarPatchStruct& BarPatchStruct::operator=(const BarPatchStruct& other) {
  BarPatchStruct tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

BarPatchStruct::BarPatchStruct() :
      __fbthrift_field_clear() {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::BarFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::BarFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}


BarPatchStruct::~BarPatchStruct() {}

BarPatchStruct::BarPatchStruct([[maybe_unused]] BarPatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_remove(std::move(other.__fbthrift_field_remove)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::BarFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::BarFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

BarPatchStruct& BarPatchStruct::operator=([[maybe_unused]] BarPatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_remove = std::move(other.__fbthrift_field_remove);
    return *this;
}


BarPatchStruct::BarPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Bar> assign__arg, bool clear__arg, ::test::fixtures::patch::BarFieldPatch patchPrior__arg, ::test::fixtures::patch::BarEnsureStruct ensure__arg, ::test::fixtures::patch::BarFieldPatch patch__arg, ::apache::thrift::op::FieldIdList remove__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_remove(std::move(remove__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::BarFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::BarFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}


void BarPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.reset();
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::BarFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::clear(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::BarFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

void BarPatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::BarFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::detail::st::clear_terse_fields(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::BarFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

bool BarPatchStruct::__fbthrift_is_empty() const {
  return !(this->__fbthrift_field_assign) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::BarFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::BarFieldPatchStruct>>>(this->__fbthrift_field_patchPrior) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::struct_t<::test::fixtures::patch::BarEnsureStruct>>(this->__fbthrift_field_ensure) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::BarFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::BarFieldPatchStruct>>>(this->__fbthrift_field_patch) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldIdListToSetAdapter, ::apache::thrift::type::list<::apache::thrift::type::i16_t>>>(this->__fbthrift_field_remove);
}

bool BarPatchStruct::operator==([[maybe_unused]] const BarPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool BarPatchStruct::operator<([[maybe_unused]] const BarPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::test::fixtures::patch::BarEnsureStruct& BarPatchStruct::get_ensure() const& {
  return __fbthrift_field_ensure;
}

::test::fixtures::patch::BarEnsureStruct BarPatchStruct::get_ensure() && {
  return std::move(__fbthrift_field_ensure);
}


void swap([[maybe_unused]] BarPatchStruct& a, [[maybe_unused]] BarPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__fbthrift_field_remove, b.__fbthrift_field_remove);
}

template void BarPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t BarPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t BarPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t BarPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void BarPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t BarPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t BarPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t BarPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        BarPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::Bar>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        BarPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::BarFieldPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        BarPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::BarEnsureStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        BarPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::BarFieldPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::BarFieldPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::BarFieldPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* BarFieldPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/BarFieldPatch";
}

const folly::StringPiece BarFieldPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<BarFieldPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece BarFieldPatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<BarFieldPatchStruct>::name;
}

BarFieldPatchStruct::BarFieldPatchStruct(const BarFieldPatchStruct& srcObj) :
    __fbthrift_field_loop(srcObj.__fbthrift_field_loop) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::LoopPatchStruct>, -1>(*__fbthrift_field_loop, *this);
}

static void __fbthrift_swap(BarFieldPatchStruct& lhs, BarFieldPatchStruct& rhs) { swap(lhs, rhs); }
BarFieldPatchStruct& BarFieldPatchStruct::operator=(const BarFieldPatchStruct& other) {
  BarFieldPatchStruct tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

BarFieldPatchStruct::BarFieldPatchStruct() :
      __fbthrift_field_loop(::apache::thrift::detail::boxed_value<::test::fixtures::patch::LoopPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::LoopPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LoopPatchStruct>>>())) {
}


BarFieldPatchStruct::~BarFieldPatchStruct() {}

BarFieldPatchStruct::BarFieldPatchStruct([[maybe_unused]] BarFieldPatchStruct&& other) noexcept :
    __fbthrift_field_loop(std::move(other.__fbthrift_field_loop)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::LoopPatchStruct>, -1>(*__fbthrift_field_loop, *this);
}

BarFieldPatchStruct& BarFieldPatchStruct::operator=([[maybe_unused]] BarFieldPatchStruct&& other) noexcept {
    this->__fbthrift_field_loop = std::move(other.__fbthrift_field_loop);
    return *this;
}


BarFieldPatchStruct::BarFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LoopPatch> loop__arg) :
    __fbthrift_field_loop(std::move(loop__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::LoopPatchStruct>, -1>(*__fbthrift_field_loop, *this);
}


void BarFieldPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_loop = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LoopPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::LoopPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LoopPatchStruct>>>());
}

void BarFieldPatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_loop = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::LoopPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::LoopPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LoopPatchStruct>>>());
}

bool BarFieldPatchStruct::__fbthrift_is_empty() const {
  return (this->__fbthrift_field_loop.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::LoopPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LoopPatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::LoopPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::LoopPatchStruct>>>(*this->__fbthrift_field_loop));
}

bool BarFieldPatchStruct::operator==([[maybe_unused]] const BarFieldPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool BarFieldPatchStruct::operator<([[maybe_unused]] const BarFieldPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] BarFieldPatchStruct& a, [[maybe_unused]] BarFieldPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_loop, b.__fbthrift_field_loop);
}

template void BarFieldPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t BarFieldPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t BarFieldPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t BarFieldPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void BarFieldPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t BarFieldPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t BarFieldPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t BarFieldPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        BarFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::LoopPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::BarEnsureStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::BarEnsureStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* BarEnsureStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/BarEnsureStruct";
}

const folly::StringPiece BarEnsureStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<BarEnsureStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece BarEnsureStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<BarEnsureStruct>::name;
}

BarEnsureStruct::BarEnsureStruct(const BarEnsureStruct&) = default;
BarEnsureStruct& BarEnsureStruct::operator=(const BarEnsureStruct&) = default;
BarEnsureStruct::BarEnsureStruct() {
}


BarEnsureStruct::~BarEnsureStruct() {}

BarEnsureStruct::BarEnsureStruct([[maybe_unused]] BarEnsureStruct&& other) noexcept :
    __fbthrift_field_loop(std::move(other.__fbthrift_field_loop)) {
}

BarEnsureStruct& BarEnsureStruct::operator=([[maybe_unused]] BarEnsureStruct&& other) noexcept {
    this->__fbthrift_field_loop = std::move(other.__fbthrift_field_loop);
    return *this;
}


BarEnsureStruct::BarEnsureStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Loop> loop__arg) :
    __fbthrift_field_loop(std::move(loop__arg)) {
}


void BarEnsureStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_loop.reset();
}

void BarEnsureStruct::__fbthrift_clear_terse_fields() {
}

bool BarEnsureStruct::__fbthrift_is_empty() const {
  return !(this->__fbthrift_field_loop);
}

bool BarEnsureStruct::operator==([[maybe_unused]] const BarEnsureStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool BarEnsureStruct::operator<([[maybe_unused]] const BarEnsureStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] BarEnsureStruct& a, [[maybe_unused]] BarEnsureStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_loop, b.__fbthrift_field_loop);
}

template void BarEnsureStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t BarEnsureStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t BarEnsureStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t BarEnsureStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void BarEnsureStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t BarEnsureStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t BarEnsureStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t BarEnsureStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        BarEnsureStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::Loop>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::LoopPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::LoopPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* LoopPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/LoopPatch";
}

const folly::StringPiece LoopPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<LoopPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece LoopPatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<LoopPatchStruct>::name;
}

LoopPatchStruct::LoopPatchStruct(const LoopPatchStruct&) = default;
LoopPatchStruct& LoopPatchStruct::operator=(const LoopPatchStruct&) = default;
LoopPatchStruct::LoopPatchStruct() :
      __fbthrift_field_clear() {
}


LoopPatchStruct::~LoopPatchStruct() {}

LoopPatchStruct::LoopPatchStruct([[maybe_unused]] LoopPatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)) {
}

LoopPatchStruct& LoopPatchStruct::operator=([[maybe_unused]] LoopPatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    return *this;
}


LoopPatchStruct::LoopPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::Loop> assign__arg, bool clear__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)) {
}


void LoopPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.reset();
  this->__fbthrift_field_clear = bool();
}

void LoopPatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
}

bool LoopPatchStruct::__fbthrift_is_empty() const {
  return !(this->__fbthrift_field_assign) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear);
}

bool LoopPatchStruct::operator==([[maybe_unused]] const LoopPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool LoopPatchStruct::operator<([[maybe_unused]] const LoopPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] LoopPatchStruct& a, [[maybe_unused]] LoopPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
}

template void LoopPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t LoopPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t LoopPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t LoopPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void LoopPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t LoopPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t LoopPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t LoopPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        LoopPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::Loop>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::RefFieldsPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::RefFieldsPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* RefFieldsPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/RefFieldsPatch";
}

const folly::StringPiece RefFieldsPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<RefFieldsPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece RefFieldsPatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<RefFieldsPatchStruct>::name;
}

RefFieldsPatchStruct::RefFieldsPatchStruct(const RefFieldsPatchStruct& srcObj) :
    __fbthrift_field_assign(srcObj.__fbthrift_field_assign),
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __fbthrift_field_remove(srcObj.__fbthrift_field_remove) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RefFieldsFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RefFieldsFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

static void __fbthrift_swap(RefFieldsPatchStruct& lhs, RefFieldsPatchStruct& rhs) { swap(lhs, rhs); }
RefFieldsPatchStruct& RefFieldsPatchStruct::operator=(const RefFieldsPatchStruct& other) {
  RefFieldsPatchStruct tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

RefFieldsPatchStruct::RefFieldsPatchStruct() :
      __fbthrift_field_clear() {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RefFieldsFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RefFieldsFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}


RefFieldsPatchStruct::~RefFieldsPatchStruct() {}

RefFieldsPatchStruct::RefFieldsPatchStruct([[maybe_unused]] RefFieldsPatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_remove(std::move(other.__fbthrift_field_remove)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RefFieldsFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RefFieldsFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

RefFieldsPatchStruct& RefFieldsPatchStruct::operator=([[maybe_unused]] RefFieldsPatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_remove = std::move(other.__fbthrift_field_remove);
    return *this;
}


RefFieldsPatchStruct::RefFieldsPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::RefFields> assign__arg, bool clear__arg, ::test::fixtures::patch::RefFieldsFieldPatch patchPrior__arg, ::test::fixtures::patch::RefFieldsEnsureStruct ensure__arg, ::test::fixtures::patch::RefFieldsFieldPatch patch__arg, ::apache::thrift::op::FieldIdList remove__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_remove(std::move(remove__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RefFieldsFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RefFieldsFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}


void RefFieldsPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.reset();
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RefFieldsFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::clear(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RefFieldsFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

void RefFieldsPatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RefFieldsFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::detail::st::clear_terse_fields(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RefFieldsFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

bool RefFieldsPatchStruct::__fbthrift_is_empty() const {
  return !(this->__fbthrift_field_assign) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RefFieldsFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RefFieldsFieldPatchStruct>>>(this->__fbthrift_field_patchPrior) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::struct_t<::test::fixtures::patch::RefFieldsEnsureStruct>>(this->__fbthrift_field_ensure) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RefFieldsFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RefFieldsFieldPatchStruct>>>(this->__fbthrift_field_patch) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldIdListToSetAdapter, ::apache::thrift::type::list<::apache::thrift::type::i16_t>>>(this->__fbthrift_field_remove);
}

bool RefFieldsPatchStruct::operator==([[maybe_unused]] const RefFieldsPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool RefFieldsPatchStruct::operator<([[maybe_unused]] const RefFieldsPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::test::fixtures::patch::RefFieldsEnsureStruct& RefFieldsPatchStruct::get_ensure() const& {
  return __fbthrift_field_ensure;
}

::test::fixtures::patch::RefFieldsEnsureStruct RefFieldsPatchStruct::get_ensure() && {
  return std::move(__fbthrift_field_ensure);
}


void swap([[maybe_unused]] RefFieldsPatchStruct& a, [[maybe_unused]] RefFieldsPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__fbthrift_field_remove, b.__fbthrift_field_remove);
}

template void RefFieldsPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t RefFieldsPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t RefFieldsPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t RefFieldsPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void RefFieldsPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t RefFieldsPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t RefFieldsPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t RefFieldsPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        RefFieldsPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::RefFields>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        RefFieldsPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::RefFieldsFieldPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        RefFieldsPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::RefFieldsEnsureStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        RefFieldsPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::RefFieldsFieldPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::RefFieldsField1PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::RefFieldsField1PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* RefFieldsField1PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/RefFieldsField1Patch";
}

const folly::StringPiece RefFieldsField1PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<RefFieldsField1PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece RefFieldsField1PatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<RefFieldsField1PatchStruct>::name;
}

RefFieldsField1PatchStruct::RefFieldsField1PatchStruct(const RefFieldsField1PatchStruct&) = default;
RefFieldsField1PatchStruct& RefFieldsField1PatchStruct::operator=(const RefFieldsField1PatchStruct&) = default;
RefFieldsField1PatchStruct::RefFieldsField1PatchStruct() :
      __fbthrift_field_clear() {
}


RefFieldsField1PatchStruct::~RefFieldsField1PatchStruct() {}

RefFieldsField1PatchStruct::RefFieldsField1PatchStruct([[maybe_unused]] RefFieldsField1PatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_prepend(std::move(other.__fbthrift_field_prepend)),
    __fbthrift_field_append(std::move(other.__fbthrift_field_append)),
    __isset(other.__isset) {
}

RefFieldsField1PatchStruct& RefFieldsField1PatchStruct::operator=([[maybe_unused]] RefFieldsField1PatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_prepend = std::move(other.__fbthrift_field_prepend);
    this->__fbthrift_field_append = std::move(other.__fbthrift_field_append);
    __isset = other.__isset;
    return *this;
}


RefFieldsField1PatchStruct::RefFieldsField1PatchStruct(apache::thrift::FragileConstructor, ::std::vector<::std::int32_t> assign__arg, bool clear__arg, ::std::vector<::std::int32_t> prepend__arg, ::std::vector<::std::int32_t> append__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_prepend(std::move(prepend__arg)),
    __fbthrift_field_append(std::move(append__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void RefFieldsField1PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_prepend.clear();
  this->__fbthrift_field_append.clear();
  __isset = {};
}

void RefFieldsField1PatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_prepend.clear();
  this->__fbthrift_field_append.clear();
}

bool RefFieldsField1PatchStruct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0)) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::list<::apache::thrift::type::i32_t>>(this->__fbthrift_field_prepend) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::list<::apache::thrift::type::i32_t>>(this->__fbthrift_field_append);
}

bool RefFieldsField1PatchStruct::operator==([[maybe_unused]] const RefFieldsField1PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool RefFieldsField1PatchStruct::operator<([[maybe_unused]] const RefFieldsField1PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::std::vector<::std::int32_t>* RefFieldsField1PatchStruct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::vector<::std::int32_t>* RefFieldsField1PatchStruct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

const ::std::vector<::std::int32_t>& RefFieldsField1PatchStruct::get_prepend() const& {
  return __fbthrift_field_prepend;
}

::std::vector<::std::int32_t> RefFieldsField1PatchStruct::get_prepend() && {
  return std::move(__fbthrift_field_prepend);
}

const ::std::vector<::std::int32_t>& RefFieldsField1PatchStruct::get_append() const& {
  return __fbthrift_field_append;
}

::std::vector<::std::int32_t> RefFieldsField1PatchStruct::get_append() && {
  return std::move(__fbthrift_field_append);
}


void swap([[maybe_unused]] RefFieldsField1PatchStruct& a, [[maybe_unused]] RefFieldsField1PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_prepend, b.__fbthrift_field_prepend);
  swap(a.__fbthrift_field_append, b.__fbthrift_field_append);
  swap(a.__isset, b.__isset);
}

template void RefFieldsField1PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t RefFieldsField1PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t RefFieldsField1PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t RefFieldsField1PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void RefFieldsField1PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t RefFieldsField1PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t RefFieldsField1PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t RefFieldsField1PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::RefFieldsField4PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::RefFieldsField4PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* RefFieldsField4PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/RefFieldsField4Patch";
}

const folly::StringPiece RefFieldsField4PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<RefFieldsField4PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece RefFieldsField4PatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<RefFieldsField4PatchStruct>::name;
}

RefFieldsField4PatchStruct::RefFieldsField4PatchStruct(const RefFieldsField4PatchStruct&) = default;
RefFieldsField4PatchStruct& RefFieldsField4PatchStruct::operator=(const RefFieldsField4PatchStruct&) = default;
RefFieldsField4PatchStruct::RefFieldsField4PatchStruct() :
      __fbthrift_field_clear() {
}


RefFieldsField4PatchStruct::~RefFieldsField4PatchStruct() {}

RefFieldsField4PatchStruct::RefFieldsField4PatchStruct([[maybe_unused]] RefFieldsField4PatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_prepend(std::move(other.__fbthrift_field_prepend)),
    __fbthrift_field_append(std::move(other.__fbthrift_field_append)),
    __isset(other.__isset) {
}

RefFieldsField4PatchStruct& RefFieldsField4PatchStruct::operator=([[maybe_unused]] RefFieldsField4PatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_prepend = std::move(other.__fbthrift_field_prepend);
    this->__fbthrift_field_append = std::move(other.__fbthrift_field_append);
    __isset = other.__isset;
    return *this;
}


RefFieldsField4PatchStruct::RefFieldsField4PatchStruct(apache::thrift::FragileConstructor, ::std::vector<::std::int32_t> assign__arg, bool clear__arg, ::std::vector<::std::int32_t> prepend__arg, ::std::vector<::std::int32_t> append__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_prepend(std::move(prepend__arg)),
    __fbthrift_field_append(std::move(append__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void RefFieldsField4PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_prepend.clear();
  this->__fbthrift_field_append.clear();
  __isset = {};
}

void RefFieldsField4PatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_prepend.clear();
  this->__fbthrift_field_append.clear();
}

bool RefFieldsField4PatchStruct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0)) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::list<::apache::thrift::type::i32_t>>(this->__fbthrift_field_prepend) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::list<::apache::thrift::type::i32_t>>(this->__fbthrift_field_append);
}

bool RefFieldsField4PatchStruct::operator==([[maybe_unused]] const RefFieldsField4PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool RefFieldsField4PatchStruct::operator<([[maybe_unused]] const RefFieldsField4PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::std::vector<::std::int32_t>* RefFieldsField4PatchStruct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::vector<::std::int32_t>* RefFieldsField4PatchStruct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

const ::std::vector<::std::int32_t>& RefFieldsField4PatchStruct::get_prepend() const& {
  return __fbthrift_field_prepend;
}

::std::vector<::std::int32_t> RefFieldsField4PatchStruct::get_prepend() && {
  return std::move(__fbthrift_field_prepend);
}

const ::std::vector<::std::int32_t>& RefFieldsField4PatchStruct::get_append() const& {
  return __fbthrift_field_append;
}

::std::vector<::std::int32_t> RefFieldsField4PatchStruct::get_append() && {
  return std::move(__fbthrift_field_append);
}


void swap([[maybe_unused]] RefFieldsField4PatchStruct& a, [[maybe_unused]] RefFieldsField4PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_prepend, b.__fbthrift_field_prepend);
  swap(a.__fbthrift_field_append, b.__fbthrift_field_append);
  swap(a.__isset, b.__isset);
}

template void RefFieldsField4PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t RefFieldsField4PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t RefFieldsField4PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t RefFieldsField4PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void RefFieldsField4PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t RefFieldsField4PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t RefFieldsField4PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t RefFieldsField4PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::RefFieldsField7PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::RefFieldsField7PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* RefFieldsField7PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/RefFieldsField7Patch";
}

const folly::StringPiece RefFieldsField7PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<RefFieldsField7PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece RefFieldsField7PatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<RefFieldsField7PatchStruct>::name;
}

RefFieldsField7PatchStruct::RefFieldsField7PatchStruct(const RefFieldsField7PatchStruct&) = default;
RefFieldsField7PatchStruct& RefFieldsField7PatchStruct::operator=(const RefFieldsField7PatchStruct&) = default;
RefFieldsField7PatchStruct::RefFieldsField7PatchStruct() :
      __fbthrift_field_clear() {
}


RefFieldsField7PatchStruct::~RefFieldsField7PatchStruct() {}

RefFieldsField7PatchStruct::RefFieldsField7PatchStruct([[maybe_unused]] RefFieldsField7PatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_prepend(std::move(other.__fbthrift_field_prepend)),
    __fbthrift_field_append(std::move(other.__fbthrift_field_append)),
    __isset(other.__isset) {
}

RefFieldsField7PatchStruct& RefFieldsField7PatchStruct::operator=([[maybe_unused]] RefFieldsField7PatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_prepend = std::move(other.__fbthrift_field_prepend);
    this->__fbthrift_field_append = std::move(other.__fbthrift_field_append);
    __isset = other.__isset;
    return *this;
}


RefFieldsField7PatchStruct::RefFieldsField7PatchStruct(apache::thrift::FragileConstructor, ::std::vector<::std::int32_t> assign__arg, bool clear__arg, ::std::vector<::std::int32_t> prepend__arg, ::std::vector<::std::int32_t> append__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_prepend(std::move(prepend__arg)),
    __fbthrift_field_append(std::move(append__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void RefFieldsField7PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_prepend.clear();
  this->__fbthrift_field_append.clear();
  __isset = {};
}

void RefFieldsField7PatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_prepend.clear();
  this->__fbthrift_field_append.clear();
}

bool RefFieldsField7PatchStruct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0)) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::list<::apache::thrift::type::i32_t>>(this->__fbthrift_field_prepend) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::list<::apache::thrift::type::i32_t>>(this->__fbthrift_field_append);
}

bool RefFieldsField7PatchStruct::operator==([[maybe_unused]] const RefFieldsField7PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool RefFieldsField7PatchStruct::operator<([[maybe_unused]] const RefFieldsField7PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::std::vector<::std::int32_t>* RefFieldsField7PatchStruct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::vector<::std::int32_t>* RefFieldsField7PatchStruct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

const ::std::vector<::std::int32_t>& RefFieldsField7PatchStruct::get_prepend() const& {
  return __fbthrift_field_prepend;
}

::std::vector<::std::int32_t> RefFieldsField7PatchStruct::get_prepend() && {
  return std::move(__fbthrift_field_prepend);
}

const ::std::vector<::std::int32_t>& RefFieldsField7PatchStruct::get_append() const& {
  return __fbthrift_field_append;
}

::std::vector<::std::int32_t> RefFieldsField7PatchStruct::get_append() && {
  return std::move(__fbthrift_field_append);
}


void swap([[maybe_unused]] RefFieldsField7PatchStruct& a, [[maybe_unused]] RefFieldsField7PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_prepend, b.__fbthrift_field_prepend);
  swap(a.__fbthrift_field_append, b.__fbthrift_field_append);
  swap(a.__isset, b.__isset);
}

template void RefFieldsField7PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t RefFieldsField7PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t RefFieldsField7PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t RefFieldsField7PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void RefFieldsField7PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t RefFieldsField7PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t RefFieldsField7PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t RefFieldsField7PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::RefFieldsFieldPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::RefFieldsFieldPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* RefFieldsFieldPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/RefFieldsFieldPatch";
}

const folly::StringPiece RefFieldsFieldPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<RefFieldsFieldPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece RefFieldsFieldPatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<RefFieldsFieldPatchStruct>::name;
}

RefFieldsFieldPatchStruct::RefFieldsFieldPatchStruct(const RefFieldsFieldPatchStruct& srcObj) :
    __fbthrift_field_unique(srcObj.__fbthrift_field_unique),
    __fbthrift_field_opt_unique(srcObj.__fbthrift_field_opt_unique),
    __fbthrift_field_opt_box(srcObj.__fbthrift_field_opt_box) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField1PatchStruct>, 1>(*__fbthrift_field_unique, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField4PatchStruct>, 4>(*__fbthrift_field_opt_unique, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField7PatchStruct>, 7>(*__fbthrift_field_opt_box, *this);
}

static void __fbthrift_swap(RefFieldsFieldPatchStruct& lhs, RefFieldsFieldPatchStruct& rhs) { swap(lhs, rhs); }
RefFieldsFieldPatchStruct& RefFieldsFieldPatchStruct::operator=(const RefFieldsFieldPatchStruct& other) {
  RefFieldsFieldPatchStruct tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

RefFieldsFieldPatchStruct::RefFieldsFieldPatchStruct() :
      __fbthrift_field_unique(::apache::thrift::detail::boxed_value<::test::fixtures::patch::RefFieldsField1Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField1PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RefFieldsField1PatchStruct>>>())),
      __fbthrift_field_opt_unique(::apache::thrift::detail::boxed_value<::test::fixtures::patch::RefFieldsField4Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField4PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RefFieldsField4PatchStruct>>>())),
      __fbthrift_field_opt_box(::apache::thrift::detail::boxed_value<::test::fixtures::patch::RefFieldsField7Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField7PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RefFieldsField7PatchStruct>>>())) {
}


RefFieldsFieldPatchStruct::~RefFieldsFieldPatchStruct() {}

RefFieldsFieldPatchStruct::RefFieldsFieldPatchStruct([[maybe_unused]] RefFieldsFieldPatchStruct&& other) noexcept :
    __fbthrift_field_unique(std::move(other.__fbthrift_field_unique)),
    __fbthrift_field_opt_unique(std::move(other.__fbthrift_field_opt_unique)),
    __fbthrift_field_opt_box(std::move(other.__fbthrift_field_opt_box)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField1PatchStruct>, 1>(*__fbthrift_field_unique, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField4PatchStruct>, 4>(*__fbthrift_field_opt_unique, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField7PatchStruct>, 7>(*__fbthrift_field_opt_box, *this);
}

RefFieldsFieldPatchStruct& RefFieldsFieldPatchStruct::operator=([[maybe_unused]] RefFieldsFieldPatchStruct&& other) noexcept {
    this->__fbthrift_field_unique = std::move(other.__fbthrift_field_unique);
    this->__fbthrift_field_opt_unique = std::move(other.__fbthrift_field_opt_unique);
    this->__fbthrift_field_opt_box = std::move(other.__fbthrift_field_opt_box);
    return *this;
}


RefFieldsFieldPatchStruct::RefFieldsFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::RefFieldsField1Patch> unique__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::RefFieldsField4Patch> opt_unique__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::patch::RefFieldsField7Patch> opt_box__arg) :
    __fbthrift_field_unique(std::move(unique__arg)),
    __fbthrift_field_opt_unique(std::move(opt_unique__arg)),
    __fbthrift_field_opt_box(std::move(opt_box__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField1PatchStruct>, 1>(*__fbthrift_field_unique, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField4PatchStruct>, 4>(*__fbthrift_field_opt_unique, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField7PatchStruct>, 7>(*__fbthrift_field_opt_box, *this);
}


void RefFieldsFieldPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_unique = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::RefFieldsField1Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField1PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RefFieldsField1PatchStruct>>>());
  this->__fbthrift_field_opt_unique = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::RefFieldsField4Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField4PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RefFieldsField4PatchStruct>>>());
  this->__fbthrift_field_opt_box = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::RefFieldsField7Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField7PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RefFieldsField7PatchStruct>>>());
}

void RefFieldsFieldPatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_unique = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::RefFieldsField1Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField1PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RefFieldsField1PatchStruct>>>());
  this->__fbthrift_field_opt_unique = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::RefFieldsField4Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField4PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RefFieldsField4PatchStruct>>>());
  this->__fbthrift_field_opt_box = ::apache::thrift::detail::boxed_value<::test::fixtures::patch::RefFieldsField7Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField7PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RefFieldsField7PatchStruct>>>());
}

bool RefFieldsFieldPatchStruct::__fbthrift_is_empty() const {
  return (this->__fbthrift_field_unique.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField1PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RefFieldsField1PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField1PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RefFieldsField1PatchStruct>>>(*this->__fbthrift_field_unique)) &&
 (this->__fbthrift_field_opt_unique.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField4PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RefFieldsField4PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField4PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RefFieldsField4PatchStruct>>>(*this->__fbthrift_field_opt_unique)) &&
 (this->__fbthrift_field_opt_box.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField7PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RefFieldsField7PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField7PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::patch::RefFieldsField7PatchStruct>>>(*this->__fbthrift_field_opt_box));
}

bool RefFieldsFieldPatchStruct::operator==([[maybe_unused]] const RefFieldsFieldPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool RefFieldsFieldPatchStruct::operator<([[maybe_unused]] const RefFieldsFieldPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] RefFieldsFieldPatchStruct& a, [[maybe_unused]] RefFieldsFieldPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_unique, b.__fbthrift_field_unique);
  swap(a.__fbthrift_field_opt_unique, b.__fbthrift_field_opt_unique);
  swap(a.__fbthrift_field_opt_box, b.__fbthrift_field_opt_box);
}

template void RefFieldsFieldPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t RefFieldsFieldPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t RefFieldsFieldPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t RefFieldsFieldPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void RefFieldsFieldPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t RefFieldsFieldPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t RefFieldsFieldPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t RefFieldsFieldPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        RefFieldsFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::RefFieldsField1Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        RefFieldsFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::RefFieldsField4Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        RefFieldsFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::RefFieldsField7Patch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::RefFieldsEnsureStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::RefFieldsEnsureStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* RefFieldsEnsureStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/RefFieldsEnsureStruct";
}

const folly::StringPiece RefFieldsEnsureStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<RefFieldsEnsureStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece RefFieldsEnsureStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<RefFieldsEnsureStruct>::name;
}

RefFieldsEnsureStruct::RefFieldsEnsureStruct(const RefFieldsEnsureStruct&) = default;
RefFieldsEnsureStruct& RefFieldsEnsureStruct::operator=(const RefFieldsEnsureStruct&) = default;
RefFieldsEnsureStruct::RefFieldsEnsureStruct() {
}


RefFieldsEnsureStruct::~RefFieldsEnsureStruct() {}

RefFieldsEnsureStruct::RefFieldsEnsureStruct([[maybe_unused]] RefFieldsEnsureStruct&& other) noexcept :
    __fbthrift_field_unique(std::move(other.__fbthrift_field_unique)),
    __fbthrift_field_shared_const(std::move(other.__fbthrift_field_shared_const)),
    __fbthrift_field_shared_mustable(std::move(other.__fbthrift_field_shared_mustable)),
    __fbthrift_field_opt_unique(std::move(other.__fbthrift_field_opt_unique)),
    __fbthrift_field_opt_shared_const(std::move(other.__fbthrift_field_opt_shared_const)),
    __fbthrift_field_opt_shared_mustable(std::move(other.__fbthrift_field_opt_shared_mustable)),
    __fbthrift_field_opt_box(std::move(other.__fbthrift_field_opt_box)),
    __isset(other.__isset) {
}

RefFieldsEnsureStruct& RefFieldsEnsureStruct::operator=([[maybe_unused]] RefFieldsEnsureStruct&& other) noexcept {
    this->__fbthrift_field_unique = std::move(other.__fbthrift_field_unique);
    this->__fbthrift_field_shared_const = std::move(other.__fbthrift_field_shared_const);
    this->__fbthrift_field_shared_mustable = std::move(other.__fbthrift_field_shared_mustable);
    this->__fbthrift_field_opt_unique = std::move(other.__fbthrift_field_opt_unique);
    this->__fbthrift_field_opt_shared_const = std::move(other.__fbthrift_field_opt_shared_const);
    this->__fbthrift_field_opt_shared_mustable = std::move(other.__fbthrift_field_opt_shared_mustable);
    this->__fbthrift_field_opt_box = std::move(other.__fbthrift_field_opt_box);
    __isset = other.__isset;
    return *this;
}


RefFieldsEnsureStruct::RefFieldsEnsureStruct(apache::thrift::FragileConstructor, ::std::vector<::std::int32_t> unique__arg, ::std::vector<::std::int32_t> shared_const__arg, ::std::vector<::std::int32_t> shared_mustable__arg, ::std::vector<::std::int32_t> opt_unique__arg, ::std::vector<::std::int32_t> opt_shared_const__arg, ::std::vector<::std::int32_t> opt_shared_mustable__arg, ::std::vector<::std::int32_t> opt_box__arg) :
    __fbthrift_field_unique(std::move(unique__arg)),
    __fbthrift_field_shared_const(std::move(shared_const__arg)),
    __fbthrift_field_shared_mustable(std::move(shared_mustable__arg)),
    __fbthrift_field_opt_unique(std::move(opt_unique__arg)),
    __fbthrift_field_opt_shared_const(std::move(opt_shared_const__arg)),
    __fbthrift_field_opt_shared_mustable(std::move(opt_shared_mustable__arg)),
    __fbthrift_field_opt_box(std::move(opt_box__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
}


void RefFieldsEnsureStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_unique.clear();
  this->__fbthrift_field_shared_const.clear();
  this->__fbthrift_field_shared_mustable.clear();
  this->__fbthrift_field_opt_unique.clear();
  this->__fbthrift_field_opt_shared_const.clear();
  this->__fbthrift_field_opt_shared_mustable.clear();
  this->__fbthrift_field_opt_box.clear();
  __isset = {};
}

void RefFieldsEnsureStruct::__fbthrift_clear_terse_fields() {
}

bool RefFieldsEnsureStruct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0)) &&
 !(this->__isset.get(1)) &&
 !(this->__isset.get(2)) &&
 !(this->__isset.get(3)) &&
 !(this->__isset.get(4)) &&
 !(this->__isset.get(5)) &&
 !(this->__isset.get(6));
}

bool RefFieldsEnsureStruct::operator==([[maybe_unused]] const RefFieldsEnsureStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool RefFieldsEnsureStruct::operator<([[maybe_unused]] const RefFieldsEnsureStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::std::vector<::std::int32_t>* RefFieldsEnsureStruct::get_unique() const& {
  return unique_ref().has_value() ? std::addressof(__fbthrift_field_unique) : nullptr;
}

::std::vector<::std::int32_t>* RefFieldsEnsureStruct::get_unique() & {
  return unique_ref().has_value() ? std::addressof(__fbthrift_field_unique) : nullptr;
}

const ::std::vector<::std::int32_t>* RefFieldsEnsureStruct::get_shared_const() const& {
  return shared_const_ref().has_value() ? std::addressof(__fbthrift_field_shared_const) : nullptr;
}

::std::vector<::std::int32_t>* RefFieldsEnsureStruct::get_shared_const() & {
  return shared_const_ref().has_value() ? std::addressof(__fbthrift_field_shared_const) : nullptr;
}

const ::std::vector<::std::int32_t>* RefFieldsEnsureStruct::get_shared_mustable() const& {
  return shared_mustable_ref().has_value() ? std::addressof(__fbthrift_field_shared_mustable) : nullptr;
}

::std::vector<::std::int32_t>* RefFieldsEnsureStruct::get_shared_mustable() & {
  return shared_mustable_ref().has_value() ? std::addressof(__fbthrift_field_shared_mustable) : nullptr;
}

const ::std::vector<::std::int32_t>* RefFieldsEnsureStruct::get_opt_unique() const& {
  return opt_unique_ref().has_value() ? std::addressof(__fbthrift_field_opt_unique) : nullptr;
}

::std::vector<::std::int32_t>* RefFieldsEnsureStruct::get_opt_unique() & {
  return opt_unique_ref().has_value() ? std::addressof(__fbthrift_field_opt_unique) : nullptr;
}

const ::std::vector<::std::int32_t>* RefFieldsEnsureStruct::get_opt_shared_const() const& {
  return opt_shared_const_ref().has_value() ? std::addressof(__fbthrift_field_opt_shared_const) : nullptr;
}

::std::vector<::std::int32_t>* RefFieldsEnsureStruct::get_opt_shared_const() & {
  return opt_shared_const_ref().has_value() ? std::addressof(__fbthrift_field_opt_shared_const) : nullptr;
}

const ::std::vector<::std::int32_t>* RefFieldsEnsureStruct::get_opt_shared_mustable() const& {
  return opt_shared_mustable_ref().has_value() ? std::addressof(__fbthrift_field_opt_shared_mustable) : nullptr;
}

::std::vector<::std::int32_t>* RefFieldsEnsureStruct::get_opt_shared_mustable() & {
  return opt_shared_mustable_ref().has_value() ? std::addressof(__fbthrift_field_opt_shared_mustable) : nullptr;
}

const ::std::vector<::std::int32_t>* RefFieldsEnsureStruct::get_opt_box() const& {
  return opt_box_ref().has_value() ? std::addressof(__fbthrift_field_opt_box) : nullptr;
}

::std::vector<::std::int32_t>* RefFieldsEnsureStruct::get_opt_box() & {
  return opt_box_ref().has_value() ? std::addressof(__fbthrift_field_opt_box) : nullptr;
}


void swap([[maybe_unused]] RefFieldsEnsureStruct& a, [[maybe_unused]] RefFieldsEnsureStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_unique, b.__fbthrift_field_unique);
  swap(a.__fbthrift_field_shared_const, b.__fbthrift_field_shared_const);
  swap(a.__fbthrift_field_shared_mustable, b.__fbthrift_field_shared_mustable);
  swap(a.__fbthrift_field_opt_unique, b.__fbthrift_field_opt_unique);
  swap(a.__fbthrift_field_opt_shared_const, b.__fbthrift_field_opt_shared_const);
  swap(a.__fbthrift_field_opt_shared_mustable, b.__fbthrift_field_opt_shared_mustable);
  swap(a.__fbthrift_field_opt_box, b.__fbthrift_field_opt_box);
  swap(a.__isset, b.__isset);
}

template void RefFieldsEnsureStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t RefFieldsEnsureStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t RefFieldsEnsureStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t RefFieldsEnsureStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void RefFieldsEnsureStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t RefFieldsEnsureStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t RefFieldsEnsureStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t RefFieldsEnsureStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace test { namespace fixtures { namespace patch { namespace {
[[maybe_unused]] FOLLY_ERASE void validateAdapters() {
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataFieldPatchStruct>, 3, ::test::fixtures::patch::MyDataFieldPatchStruct, ::test::fixtures::patch::MyDataPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataFieldPatchStruct>, 6, ::test::fixtures::patch::MyDataFieldPatchStruct, ::test::fixtures::patch::MyDataPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7, ::std::vector<::std::int16_t>, ::test::fixtures::patch::MyDataPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, 1, ::apache::thrift::op::StringPatchStruct, ::test::fixtures::patch::MyDataFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, 2, ::apache::thrift::op::I32PatchStruct, ::test::fixtures::patch::MyDataFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>, 3, ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct, ::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>, 6, ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct, ::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7, ::std::vector<::std::int16_t>, ::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, 1, ::apache::thrift::op::StringPatchStruct, ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, 2, ::apache::thrift::op::I32PatchStruct, ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::InnerUnionFieldPatchStruct>, 3, ::test::fixtures::patch::InnerUnionFieldPatchStruct, ::test::fixtures::patch::InnerUnionPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::InnerUnionFieldPatchStruct>, 6, ::test::fixtures::patch::InnerUnionFieldPatchStruct, ::test::fixtures::patch::InnerUnionPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, 1, ::apache::thrift::op::BinaryPatchStruct, ::test::fixtures::patch::InnerUnionFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyUnionFieldPatchStruct>, 3, ::test::fixtures::patch::MyUnionFieldPatchStruct, ::test::fixtures::patch::MyUnionPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyUnionFieldPatchStruct>, 6, ::test::fixtures::patch::MyUnionFieldPatchStruct, ::test::fixtures::patch::MyUnionPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, 1, ::apache::thrift::op::StringPatchStruct, ::test::fixtures::patch::MyUnionFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, 2, ::apache::thrift::op::I32PatchStruct, ::test::fixtures::patch::MyUnionFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::InnerUnionPatchStruct>, 3, ::test::fixtures::patch::InnerUnionPatchStruct, ::test::fixtures::patch::MyUnionFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyStructFieldPatchStruct>, 3, ::test::fixtures::patch::MyStructFieldPatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyStructFieldPatchStruct>, 6, ::test::fixtures::patch::MyStructFieldPatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7, ::std::vector<::std::int16_t>, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>, -32, ::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, -31, ::apache::thrift::op::I32PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30PatchStruct>, -30, ::test::fixtures::patch::MyStructField30PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField29PatchStruct>, -29, ::test::fixtures::patch::MyStructField29PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField28PatchStruct>, -28, ::test::fixtures::patch::MyStructField28PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::patch::MyStructField27PatchStruct>, -27, ::test::fixtures::patch::MyStructField27PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField26PatchStruct>, -26, ::test::fixtures::patch::MyStructField26PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, -25, ::test::fixtures::patch::LateDefStructPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, -24, ::test::fixtures::patch::MyDataPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField23PatchStruct>, -23, ::test::fixtures::patch::MyStructField23PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, -22, ::apache::thrift::op::BinaryPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, -21, ::apache::thrift::op::StringPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, -20, ::apache::thrift::op::DoublePatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, -19, ::apache::thrift::op::FloatPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, -18, ::apache::thrift::op::I64PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, -17, ::apache::thrift::op::I32PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, -16, ::apache::thrift::op::I16PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, -15, ::apache::thrift::op::BytePatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, -14, ::apache::thrift::op::BoolPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>, -13, ::test::fixtures::patch::LateDefStructPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::MyUnionPatchStruct>, -12, ::test::fixtures::patch::MyUnionPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, -11, ::test::fixtures::patch::MyDataPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField10PatchStruct>, -10, ::test::fixtures::patch::MyStructField10PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::BinaryPatchAdapter<::apache::thrift::op::BinaryPatchStruct>, -9, ::apache::thrift::op::BinaryPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, -8, ::apache::thrift::op::StringPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::DoublePatchStruct>, -7, ::apache::thrift::op::DoublePatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::FloatPatchStruct>, -6, ::apache::thrift::op::FloatPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, -5, ::apache::thrift::op::I64PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I32PatchStruct>, -4, ::apache::thrift::op::I32PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I16PatchStruct>, -3, ::apache::thrift::op::I16PatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::BytePatchStruct>, -2, ::apache::thrift::op::BytePatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, -1, ::apache::thrift::op::BoolPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>, 1, ::test::fixtures::patch::MyDataPatchStruct, ::test::fixtures::patch::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::LateDefStructFieldPatchStruct>, 3, ::test::fixtures::patch::LateDefStructFieldPatchStruct, ::test::fixtures::patch::LateDefStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::LateDefStructFieldPatchStruct>, 6, ::test::fixtures::patch::LateDefStructFieldPatchStruct, ::test::fixtures::patch::LateDefStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7, ::std::vector<::std::int16_t>, ::test::fixtures::patch::LateDefStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RecursiveFieldPatchStruct>, 3, ::test::fixtures::patch::RecursiveFieldPatchStruct, ::test::fixtures::patch::RecursivePatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RecursiveFieldPatchStruct>, 6, ::test::fixtures::patch::RecursiveFieldPatchStruct, ::test::fixtures::patch::RecursivePatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7, ::std::vector<::std::int16_t>, ::test::fixtures::patch::RecursivePatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::RecursiveField1PatchStruct>, -1, ::test::fixtures::patch::RecursiveField1PatchStruct, ::test::fixtures::patch::RecursiveFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::BarFieldPatchStruct>, 3, ::test::fixtures::patch::BarFieldPatchStruct, ::test::fixtures::patch::BarPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::BarFieldPatchStruct>, 6, ::test::fixtures::patch::BarFieldPatchStruct, ::test::fixtures::patch::BarPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7, ::std::vector<::std::int16_t>, ::test::fixtures::patch::BarPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::LoopPatchStruct>, -1, ::test::fixtures::patch::LoopPatchStruct, ::test::fixtures::patch::BarFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RefFieldsFieldPatchStruct>, 3, ::test::fixtures::patch::RefFieldsFieldPatchStruct, ::test::fixtures::patch::RefFieldsPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RefFieldsFieldPatchStruct>, 6, ::test::fixtures::patch::RefFieldsFieldPatchStruct, ::test::fixtures::patch::RefFieldsPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7, ::std::vector<::std::int16_t>, ::test::fixtures::patch::RefFieldsPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField1PatchStruct>, 1, ::test::fixtures::patch::RefFieldsField1PatchStruct, ::test::fixtures::patch::RefFieldsFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField4PatchStruct>, 4, ::test::fixtures::patch::RefFieldsField4PatchStruct, ::test::fixtures::patch::RefFieldsFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField7PatchStruct>, 7, ::test::fixtures::patch::RefFieldsField7PatchStruct, ::test::fixtures::patch::RefFieldsFieldPatchStruct>();
}
}}}} // test::fixtures::patch
namespace apache::thrift::detail::annotation {
}
