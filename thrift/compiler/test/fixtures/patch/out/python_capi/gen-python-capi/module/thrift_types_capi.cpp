
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#include <folly/python/import.h>
#include <thrift/lib/python/capi/iobuf.h>
#include <thrift/lib/python/types.h>

#include <thrift/compiler/test/fixtures/patch/gen-python-capi/module/thrift_types_api.h>
#include <thrift/compiler/test/fixtures/patch/gen-python-capi/module/thrift_types_capi.h>

#include "thrift/lib/thrift/gen-python-capi/patch/thrift_types_capi.h"
#include "thrift/lib/thrift/gen-python-capi/standard/thrift_types_capi.h"

namespace apache {
namespace thrift {
namespace python {
namespace capi {
namespace {
bool ensure_module_imported() {
  static ::folly::python::import_cache_nocapture import((
      ::import_test__fixtures__patch__module__thrift_types_capi));
  return import();
}
  static constexpr std::int16_t _fbthrift__MyData__tuple_pos[2] = {
    1, 2
  };
  static constexpr std::int16_t _fbthrift__MyDataWithCustomDefault__tuple_pos[2] = {
    1, 2
  };
  static constexpr std::int16_t _fbthrift__MyStruct__tuple_pos[33] = {
    32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 33
  };
  static constexpr std::int16_t _fbthrift__Recursive__tuple_pos[1] = {
    1
  };
  static constexpr std::int16_t _fbthrift__Bar__tuple_pos[1] = {
    1
  };
  static constexpr std::int16_t _fbthrift__Loop__tuple_pos[1] = {
    1
  };
  static constexpr std::int16_t _fbthrift__RefFields__tuple_pos[7] = {
    1, 2, 3, 4, 5, 6, 7
  };
} // namespace

ExtractorResult<::test::fixtures::patch::MyData>
Extractor<::test::fixtures::patch::MyData>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a MyData");
      }
      return extractorError<::test::fixtures::patch::MyData>(
          "Marshal error: MyData");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::patch::MyData>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::patch::MyData>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyData>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::patch::MyData cpp;
  std::optional<std::string_view> error;
  Extractor<Bytes>{}.extractInto(
      cpp.data1_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyData__tuple_pos[0]),
      error);
  Extractor<int32_t>{}.extractInto(
      cpp.data2_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyData__tuple_pos[1]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::patch::MyData>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyData(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyData");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyData>::operator()(
    const ::test::fixtures::patch::MyData& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyData>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__patch__module__MyData(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyData>>::operator()(
    [[maybe_unused]] const ::test::fixtures::patch::MyData& val) {
  StrongRef fbthrift_data(createStructTuple(2));
  StrongRef _fbthrift__data1(
    Constructor<Bytes>{}
    .constructFrom(val.data1_ref()));
  if (!_fbthrift__data1 ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyData__tuple_pos[0],
          *_fbthrift__data1) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__data2(
    Constructor<int32_t>{}
    .constructFrom(val.data2_ref()));
  if (!_fbthrift__data2 ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyData__tuple_pos[1],
          *_fbthrift__data2) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::patch::MyDataWithCustomDefault>
Extractor<::test::fixtures::patch::MyDataWithCustomDefault>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a MyDataWithCustomDefault");
      }
      return extractorError<::test::fixtures::patch::MyDataWithCustomDefault>(
          "Marshal error: MyDataWithCustomDefault");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::patch::MyDataWithCustomDefault>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::patch::MyDataWithCustomDefault>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyDataWithCustomDefault>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::patch::MyDataWithCustomDefault cpp;
  std::optional<std::string_view> error;
  Extractor<Bytes>{}.extractInto(
      cpp.data1_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyDataWithCustomDefault__tuple_pos[0]),
      error);
  Extractor<int32_t>{}.extractInto(
      cpp.data2_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyDataWithCustomDefault__tuple_pos[1]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::patch::MyDataWithCustomDefault>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyDataWithCustomDefault(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyDataWithCustomDefault");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyDataWithCustomDefault>::operator()(
    const ::test::fixtures::patch::MyDataWithCustomDefault& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefault>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__patch__module__MyDataWithCustomDefault(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefault>>::operator()(
    [[maybe_unused]] const ::test::fixtures::patch::MyDataWithCustomDefault& val) {
  StrongRef fbthrift_data(createStructTuple(2));
  StrongRef _fbthrift__data1(
    Constructor<Bytes>{}
    .constructFrom(val.data1_ref()));
  if (!_fbthrift__data1 ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyDataWithCustomDefault__tuple_pos[0],
          *_fbthrift__data1) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__data2(
    Constructor<int32_t>{}
    .constructFrom(val.data2_ref()));
  if (!_fbthrift__data2 ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyDataWithCustomDefault__tuple_pos[1],
          *_fbthrift__data2) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::patch::InnerUnion>
Extractor<::test::fixtures::patch::InnerUnion>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a InnerUnion");
      }
      return extractorError<::test::fixtures::patch::InnerUnion>(
          "Marshal error: InnerUnion");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::patch::InnerUnion>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::patch::InnerUnion>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::InnerUnion>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::patch::InnerUnion cpp;
  std::optional<std::string_view> error;
  auto type_tag = Extractor<int64_t>{}(PyTuple_GET_ITEM(fbThriftData, 0));
  if (type_tag.hasError()) {
    return folly::makeUnexpected(type_tag.error());
  }
  switch (*type_tag) {
    case 0:
      break; // union is unset
    case 1:
      Extractor<Bytes>{}.extractInto(
          cpp.innerOption_ref(), PyTuple_GET_ITEM(fbThriftData, 1), error);
      break;
  }
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::patch::InnerUnion>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__InnerUnion(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: InnerUnion");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::InnerUnion>::operator()(
    const ::test::fixtures::patch::InnerUnion& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnion>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__patch__module__InnerUnion(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnion>>::operator()(
    [[maybe_unused]] const ::test::fixtures::patch::InnerUnion& val) {
  int64_t type_key = static_cast<int64_t>(val.getType());
  StrongRef py_val;
  switch (type_key) {
    case 0:
      Py_INCREF(Py_None);
      py_val = StrongRef(Py_None);
      break;
    case 1:
      py_val = StrongRef(
          Constructor<Bytes>{}
          .constructFrom(val.innerOption_ref()));
      break;
  }
  if (!py_val) {
    return nullptr;
  }
  return unionTupleFromValue(type_key, *py_val);
}


ExtractorResult<::test::fixtures::patch::MyUnion>
Extractor<::test::fixtures::patch::MyUnion>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a MyUnion");
      }
      return extractorError<::test::fixtures::patch::MyUnion>(
          "Marshal error: MyUnion");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::patch::MyUnion>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::patch::MyUnion>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyUnion>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::patch::MyUnion cpp;
  std::optional<std::string_view> error;
  auto type_tag = Extractor<int64_t>{}(PyTuple_GET_ITEM(fbThriftData, 0));
  if (type_tag.hasError()) {
    return folly::makeUnexpected(type_tag.error());
  }
  switch (*type_tag) {
    case 0:
      break; // union is unset
    case 1:
      Extractor<Bytes>{}.extractInto(
          cpp.option1_ref(), PyTuple_GET_ITEM(fbThriftData, 1), error);
      break;
    case 2:
      Extractor<int32_t>{}.extractInto(
          cpp.option2_ref(), PyTuple_GET_ITEM(fbThriftData, 1), error);
      break;
    case 3:
      Extractor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::InnerUnion>>{}.extractInto(
          cpp.option3_ref(), PyTuple_GET_ITEM(fbThriftData, 1), error);
      break;
  }
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::patch::MyUnion>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyUnion(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyUnion");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyUnion>::operator()(
    const ::test::fixtures::patch::MyUnion& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnion>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__patch__module__MyUnion(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnion>>::operator()(
    [[maybe_unused]] const ::test::fixtures::patch::MyUnion& val) {
  int64_t type_key = static_cast<int64_t>(val.getType());
  StrongRef py_val;
  switch (type_key) {
    case 0:
      Py_INCREF(Py_None);
      py_val = StrongRef(Py_None);
      break;
    case 1:
      py_val = StrongRef(
          Constructor<Bytes>{}
          .constructFrom(val.option1_ref()));
      break;
    case 2:
      py_val = StrongRef(
          Constructor<int32_t>{}
          .constructFrom(val.option2_ref()));
      break;
    case 3:
      py_val = StrongRef(
          Constructor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::InnerUnion>>{}
          .constructFrom(val.option3_ref()));
      break;
  }
  if (!py_val) {
    return nullptr;
  }
  return unionTupleFromValue(type_key, *py_val);
}


ExtractorResult<::test::fixtures::patch::MyStruct>
Extractor<::test::fixtures::patch::MyStruct>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a MyStruct");
      }
      return extractorError<::test::fixtures::patch::MyStruct>(
          "Marshal error: MyStruct");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::patch::MyStruct>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::patch::MyStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyStruct>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::patch::MyStruct cpp;
  std::optional<std::string_view> error;
  Extractor<bool>{}.extractInto(
      cpp.boolVal_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[0]),
      error);
  Extractor<int8_t>{}.extractInto(
      cpp.byteVal_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[1]),
      error);
  Extractor<int16_t>{}.extractInto(
      cpp.i16Val_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[2]),
      error);
  Extractor<int32_t>{}.extractInto(
      cpp.i32Val_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[3]),
      error);
  Extractor<int64_t>{}.extractInto(
      cpp.i64Val_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[4]),
      error);
  Extractor<float>{}.extractInto(
      cpp.floatVal_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[5]),
      error);
  Extractor<double>{}.extractInto(
      cpp.doubleVal_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[6]),
      error);
  Extractor<Bytes>{}.extractInto(
      cpp.stringVal_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[7]),
      error);
  Extractor<folly::IOBuf>{}.extractInto(
      cpp.binaryVal_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[8]),
      error);
  Extractor<::apache::thrift::python::capi::ComposedEnum<::test::fixtures::patch::MyEnum>>{}.extractInto(
      cpp.enumVal_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[9]),
      error);
  Extractor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::MyData>>{}.extractInto(
      cpp.structVal_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[10]),
      error);
  Extractor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::MyUnion>>{}.extractInto(
      cpp.unionVal_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[11]),
      error);
  Extractor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::LateDefStruct>>{}.extractInto(
      cpp.lateStructVal_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[12]),
      error);
  Extractor<bool>{}.extractInto(
      cpp.optBoolVal_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[13]),
      error);
  Extractor<int8_t>{}.extractInto(
      cpp.optByteVal_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[14]),
      error);
  Extractor<int16_t>{}.extractInto(
      cpp.optI16Val_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[15]),
      error);
  Extractor<int32_t>{}.extractInto(
      cpp.optI32Val_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[16]),
      error);
  Extractor<int64_t>{}.extractInto(
      cpp.optI64Val_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[17]),
      error);
  Extractor<float>{}.extractInto(
      cpp.optFloatVal_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[18]),
      error);
  Extractor<double>{}.extractInto(
      cpp.optDoubleVal_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[19]),
      error);
  Extractor<Bytes>{}.extractInto(
      cpp.optStringVal_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[20]),
      error);
  Extractor<folly::IOBuf>{}.extractInto(
      cpp.optBinaryVal_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[21]),
      error);
  Extractor<::apache::thrift::python::capi::ComposedEnum<::test::fixtures::patch::MyEnum>>{}.extractInto(
      cpp.optEnumVal_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[22]),
      error);
  Extractor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::MyData>>{}.extractInto(
      cpp.optStructVal_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[23]),
      error);
  Extractor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::LateDefStruct>>{}.extractInto(
      cpp.optLateStructVal_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[24]),
      error);
  Extractor<list<int16_t>>{}.extractInto(
      cpp.optListVal_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[25]),
      error);
  Extractor<set<Bytes>>{}.extractInto(
      cpp.optSetVal_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[26]),
      error);
  Extractor<map<Bytes, Bytes>>{}.extractInto(
      cpp.optMapVal_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[27]),
      error);
  Extractor<list<map<Bytes, int32_t>>>{}.extractInto(
      cpp.listMap_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[28]),
      error);
  Extractor<map<Bytes, map<Bytes, int32_t>>>{}.extractInto(
      cpp.mapMap_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[29]),
      error);
  Extractor<int32_t>{}.extractInto(
      cpp.i32WithCustomDefault_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[30]),
      error);
  Extractor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::MyDataWithCustomDefault>>{}.extractInto(
      cpp.structWithCustomDefault_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[31]),
      error);
  Extractor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::MyData>>{}.extractInto(
      cpp.structWithFieldCustomDefault_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[32]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::patch::MyStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyStruct>::operator()(
    const ::test::fixtures::patch::MyStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStruct>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__patch__module__MyStruct(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStruct>>::operator()(
    [[maybe_unused]] const ::test::fixtures::patch::MyStruct& val) {
  StrongRef fbthrift_data(createStructTuple(33));
  StrongRef _fbthrift__boolVal(
    Constructor<bool>{}
    .constructFrom(val.boolVal_ref()));
  if (!_fbthrift__boolVal ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[0],
          *_fbthrift__boolVal) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__byteVal(
    Constructor<int8_t>{}
    .constructFrom(val.byteVal_ref()));
  if (!_fbthrift__byteVal ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[1],
          *_fbthrift__byteVal) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__i16Val(
    Constructor<int16_t>{}
    .constructFrom(val.i16Val_ref()));
  if (!_fbthrift__i16Val ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[2],
          *_fbthrift__i16Val) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__i32Val(
    Constructor<int32_t>{}
    .constructFrom(val.i32Val_ref()));
  if (!_fbthrift__i32Val ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[3],
          *_fbthrift__i32Val) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__i64Val(
    Constructor<int64_t>{}
    .constructFrom(val.i64Val_ref()));
  if (!_fbthrift__i64Val ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[4],
          *_fbthrift__i64Val) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__floatVal(
    Constructor<float>{}
    .constructFrom(val.floatVal_ref()));
  if (!_fbthrift__floatVal ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[5],
          *_fbthrift__floatVal) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__doubleVal(
    Constructor<double>{}
    .constructFrom(val.doubleVal_ref()));
  if (!_fbthrift__doubleVal ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[6],
          *_fbthrift__doubleVal) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__stringVal(
    Constructor<Bytes>{}
    .constructFrom(val.stringVal_ref()));
  if (!_fbthrift__stringVal ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[7],
          *_fbthrift__stringVal) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__binaryVal(
    Constructor<folly::IOBuf>{}
    .constructFrom(val.binaryVal_ref()));
  if (!_fbthrift__binaryVal ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[8],
          *_fbthrift__binaryVal) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__enumVal(
    Constructor<::apache::thrift::python::capi::ComposedEnum<::test::fixtures::patch::MyEnum>>{}
    .constructFrom(val.enumVal_ref()));
  if (!_fbthrift__enumVal ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[9],
          *_fbthrift__enumVal) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__structVal(
    Constructor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::MyData>>{}
    .constructFrom(val.structVal_ref()));
  if (!_fbthrift__structVal ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[10],
          *_fbthrift__structVal) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__unionVal(
    Constructor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::MyUnion>>{}
    .constructFrom(val.unionVal_ref()));
  if (!_fbthrift__unionVal ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[11],
          *_fbthrift__unionVal) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__lateStructVal(
    Constructor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::LateDefStruct>>{}
    .constructFrom(val.lateStructVal_ref()));
  if (!_fbthrift__lateStructVal ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[12],
          *_fbthrift__lateStructVal) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__optBoolVal(
    Constructor<bool>{}
    .constructFrom(val.optBoolVal_ref()));
  if (_fbthrift__optBoolVal.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__MyStruct__tuple_pos[13],
      Py_None);
  } else
  if (!_fbthrift__optBoolVal ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[13],
          *_fbthrift__optBoolVal) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__optByteVal(
    Constructor<int8_t>{}
    .constructFrom(val.optByteVal_ref()));
  if (_fbthrift__optByteVal.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__MyStruct__tuple_pos[14],
      Py_None);
  } else
  if (!_fbthrift__optByteVal ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[14],
          *_fbthrift__optByteVal) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__optI16Val(
    Constructor<int16_t>{}
    .constructFrom(val.optI16Val_ref()));
  if (_fbthrift__optI16Val.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__MyStruct__tuple_pos[15],
      Py_None);
  } else
  if (!_fbthrift__optI16Val ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[15],
          *_fbthrift__optI16Val) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__optI32Val(
    Constructor<int32_t>{}
    .constructFrom(val.optI32Val_ref()));
  if (_fbthrift__optI32Val.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__MyStruct__tuple_pos[16],
      Py_None);
  } else
  if (!_fbthrift__optI32Val ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[16],
          *_fbthrift__optI32Val) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__optI64Val(
    Constructor<int64_t>{}
    .constructFrom(val.optI64Val_ref()));
  if (_fbthrift__optI64Val.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__MyStruct__tuple_pos[17],
      Py_None);
  } else
  if (!_fbthrift__optI64Val ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[17],
          *_fbthrift__optI64Val) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__optFloatVal(
    Constructor<float>{}
    .constructFrom(val.optFloatVal_ref()));
  if (_fbthrift__optFloatVal.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__MyStruct__tuple_pos[18],
      Py_None);
  } else
  if (!_fbthrift__optFloatVal ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[18],
          *_fbthrift__optFloatVal) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__optDoubleVal(
    Constructor<double>{}
    .constructFrom(val.optDoubleVal_ref()));
  if (_fbthrift__optDoubleVal.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__MyStruct__tuple_pos[19],
      Py_None);
  } else
  if (!_fbthrift__optDoubleVal ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[19],
          *_fbthrift__optDoubleVal) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__optStringVal(
    Constructor<Bytes>{}
    .constructFrom(val.optStringVal_ref()));
  if (_fbthrift__optStringVal.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__MyStruct__tuple_pos[20],
      Py_None);
  } else
  if (!_fbthrift__optStringVal ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[20],
          *_fbthrift__optStringVal) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__optBinaryVal(
    Constructor<folly::IOBuf>{}
    .constructFrom(val.optBinaryVal_ref()));
  if (_fbthrift__optBinaryVal.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__MyStruct__tuple_pos[21],
      Py_None);
  } else
  if (!_fbthrift__optBinaryVal ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[21],
          *_fbthrift__optBinaryVal) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__optEnumVal(
    Constructor<::apache::thrift::python::capi::ComposedEnum<::test::fixtures::patch::MyEnum>>{}
    .constructFrom(val.optEnumVal_ref()));
  if (_fbthrift__optEnumVal.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__MyStruct__tuple_pos[22],
      Py_None);
  } else
  if (!_fbthrift__optEnumVal ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[22],
          *_fbthrift__optEnumVal) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__optStructVal(
    Constructor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::MyData>>{}
    .constructFrom(val.optStructVal_ref()));
  if (_fbthrift__optStructVal.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__MyStruct__tuple_pos[23],
      Py_None);
  } else
  if (!_fbthrift__optStructVal ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[23],
          *_fbthrift__optStructVal) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__optLateStructVal(
    Constructor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::LateDefStruct>>{}
    .constructFrom(val.optLateStructVal_ref()));
  if (_fbthrift__optLateStructVal.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__MyStruct__tuple_pos[24],
      Py_None);
  } else
  if (!_fbthrift__optLateStructVal ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[24],
          *_fbthrift__optLateStructVal) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__optListVal(
    Constructor<list<int16_t>>{}
    .constructFrom(val.optListVal_ref()));
  if (_fbthrift__optListVal.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__MyStruct__tuple_pos[25],
      Py_None);
  } else
  if (!_fbthrift__optListVal ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[25],
          *_fbthrift__optListVal) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__optSetVal(
    Constructor<set<Bytes>>{}
    .constructFrom(val.optSetVal_ref()));
  if (_fbthrift__optSetVal.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__MyStruct__tuple_pos[26],
      Py_None);
  } else
  if (!_fbthrift__optSetVal ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[26],
          *_fbthrift__optSetVal) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__optMapVal(
    Constructor<map<Bytes, Bytes>>{}
    .constructFrom(val.optMapVal_ref()));
  if (_fbthrift__optMapVal.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__MyStruct__tuple_pos[27],
      Py_None);
  } else
  if (!_fbthrift__optMapVal ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[27],
          *_fbthrift__optMapVal) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__listMap(
    Constructor<list<map<Bytes, int32_t>>>{}
    .constructFrom(val.listMap_ref()));
  if (!_fbthrift__listMap ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[28],
          *_fbthrift__listMap) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__mapMap(
    Constructor<map<Bytes, map<Bytes, int32_t>>>{}
    .constructFrom(val.mapMap_ref()));
  if (!_fbthrift__mapMap ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[29],
          *_fbthrift__mapMap) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__i32WithCustomDefault(
    Constructor<int32_t>{}
    .constructFrom(val.i32WithCustomDefault_ref()));
  if (!_fbthrift__i32WithCustomDefault ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[30],
          *_fbthrift__i32WithCustomDefault) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__structWithCustomDefault(
    Constructor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::MyDataWithCustomDefault>>{}
    .constructFrom(val.structWithCustomDefault_ref()));
  if (!_fbthrift__structWithCustomDefault ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[31],
          *_fbthrift__structWithCustomDefault) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__structWithFieldCustomDefault(
    Constructor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::MyData>>{}
    .constructFrom(val.structWithFieldCustomDefault_ref()));
  if (!_fbthrift__structWithFieldCustomDefault ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[32],
          *_fbthrift__structWithFieldCustomDefault) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::patch::LateDefStruct>
Extractor<::test::fixtures::patch::LateDefStruct>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a LateDefStruct");
      }
      return extractorError<::test::fixtures::patch::LateDefStruct>(
          "Marshal error: LateDefStruct");
  }
  return ::test::fixtures::patch::LateDefStruct{};
}

ExtractorResult<::test::fixtures::patch::LateDefStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::LateDefStruct>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::patch::LateDefStruct cpp;
  (void)fbThriftData;
  return cpp;
}


int Extractor<::test::fixtures::patch::LateDefStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__LateDefStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: LateDefStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::LateDefStruct>::operator()(
    const ::test::fixtures::patch::LateDefStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStruct>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__patch__module__LateDefStruct(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStruct>>::operator()(
    [[maybe_unused]] const ::test::fixtures::patch::LateDefStruct& val) {
  StrongRef fbthrift_data(createStructTuple(0));
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::patch::Recursive>
Extractor<::test::fixtures::patch::Recursive>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a Recursive");
      }
      return extractorError<::test::fixtures::patch::Recursive>(
          "Marshal error: Recursive");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::patch::Recursive>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::patch::Recursive>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::Recursive>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::patch::Recursive cpp;
  std::optional<std::string_view> error;
  Extractor<map<Bytes, ::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::Recursive>>>{}.extractInto(
      cpp.nodes_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__Recursive__tuple_pos[0]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::patch::Recursive>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__Recursive(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: Recursive");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::Recursive>::operator()(
    const ::test::fixtures::patch::Recursive& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Recursive>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__patch__module__Recursive(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Recursive>>::operator()(
    [[maybe_unused]] const ::test::fixtures::patch::Recursive& val) {
  StrongRef fbthrift_data(createStructTuple(1));
  StrongRef _fbthrift__nodes(
    Constructor<map<Bytes, ::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::Recursive>>>{}
    .constructFrom(val.nodes_ref()));
  if (!_fbthrift__nodes ||
      setStructField(
          *fbthrift_data,
          _fbthrift__Recursive__tuple_pos[0],
          *_fbthrift__nodes) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::patch::Bar>
Extractor<::test::fixtures::patch::Bar>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a Bar");
      }
      return extractorError<::test::fixtures::patch::Bar>(
          "Marshal error: Bar");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::patch::Bar>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::patch::Bar>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::Bar>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::patch::Bar cpp;
  std::optional<std::string_view> error;
  Extractor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::Loop>>{}.extractInto(
      cpp.loop_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__Bar__tuple_pos[0]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::patch::Bar>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__Bar(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: Bar");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::Bar>::operator()(
    const ::test::fixtures::patch::Bar& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Bar>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__patch__module__Bar(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Bar>>::operator()(
    [[maybe_unused]] const ::test::fixtures::patch::Bar& val) {
  StrongRef fbthrift_data(createStructTuple(1));
  StrongRef _fbthrift__loop(
    Constructor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::Loop>>{}
    .constructFrom(val.loop_ref()));
  if (!_fbthrift__loop ||
      setStructField(
          *fbthrift_data,
          _fbthrift__Bar__tuple_pos[0],
          *_fbthrift__loop) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::patch::Loop>
Extractor<::test::fixtures::patch::Loop>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a Loop");
      }
      return extractorError<::test::fixtures::patch::Loop>(
          "Marshal error: Loop");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::patch::Loop>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::patch::Loop>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::Loop>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::patch::Loop cpp;
  std::optional<std::string_view> error;
  Extractor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::Bar>>{}.extractInto(
      cpp.bar_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__Loop__tuple_pos[0]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::patch::Loop>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__Loop(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: Loop");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::Loop>::operator()(
    const ::test::fixtures::patch::Loop& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Loop>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__patch__module__Loop(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Loop>>::operator()(
    [[maybe_unused]] const ::test::fixtures::patch::Loop& val) {
  StrongRef fbthrift_data(createStructTuple(1));
  StrongRef _fbthrift__bar(
    Constructor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::Bar>>{}
    .constructFrom(val.bar_ref()));
  if (!_fbthrift__bar ||
      setStructField(
          *fbthrift_data,
          _fbthrift__Loop__tuple_pos[0],
          *_fbthrift__bar) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::patch::RefFields>
Extractor<::test::fixtures::patch::RefFields>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a RefFields");
      }
      return extractorError<::test::fixtures::patch::RefFields>(
          "Marshal error: RefFields");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::patch::RefFields>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::patch::RefFields>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::RefFields>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::patch::RefFields cpp;
  std::optional<std::string_view> error;
  Extractor<list<int32_t>>{}.extractInto(
      cpp.unique_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__RefFields__tuple_pos[0]),
      error);
  Extractor<list<int32_t>>{}.extractInto(
      cpp.shared_const_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__RefFields__tuple_pos[1]),
      error);
  Extractor<list<int32_t>>{}.extractInto(
      cpp.shared_mustable_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__RefFields__tuple_pos[2]),
      error);
  Extractor<list<int32_t>>{}.extractInto(
      cpp.opt_unique_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__RefFields__tuple_pos[3]),
      error);
  Extractor<list<int32_t>>{}.extractInto(
      cpp.opt_shared_const_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__RefFields__tuple_pos[4]),
      error);
  Extractor<list<int32_t>>{}.extractInto(
      cpp.opt_shared_mustable_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__RefFields__tuple_pos[5]),
      error);
  Extractor<list<int32_t>>{}.extractInto(
      cpp.opt_box_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__RefFields__tuple_pos[6]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::patch::RefFields>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__RefFields(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: RefFields");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::RefFields>::operator()(
    const ::test::fixtures::patch::RefFields& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFields>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__patch__module__RefFields(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFields>>::operator()(
    [[maybe_unused]] const ::test::fixtures::patch::RefFields& val) {
  StrongRef fbthrift_data(createStructTuple(7));
  StrongRef _fbthrift__unique(
    Constructor<list<int32_t>>{}
    .constructFrom(val.unique_ref()));
  if (!_fbthrift__unique ||
      setStructField(
          *fbthrift_data,
          _fbthrift__RefFields__tuple_pos[0],
          *_fbthrift__unique) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__shared_const(
    Constructor<list<int32_t>>{}
    .constructFrom(val.shared_const_ref()));
  if (!_fbthrift__shared_const ||
      setStructField(
          *fbthrift_data,
          _fbthrift__RefFields__tuple_pos[1],
          *_fbthrift__shared_const) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__shared_mustable(
    Constructor<list<int32_t>>{}
    .constructFrom(val.shared_mustable_ref()));
  if (!_fbthrift__shared_mustable ||
      setStructField(
          *fbthrift_data,
          _fbthrift__RefFields__tuple_pos[2],
          *_fbthrift__shared_mustable) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__opt_unique(
    Constructor<list<int32_t>>{}
    .constructFrom(val.opt_unique_ref()));
  if (_fbthrift__opt_unique.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__RefFields__tuple_pos[3],
      Py_None);
  } else
  if (!_fbthrift__opt_unique ||
      setStructField(
          *fbthrift_data,
          _fbthrift__RefFields__tuple_pos[3],
          *_fbthrift__opt_unique) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__opt_shared_const(
    Constructor<list<int32_t>>{}
    .constructFrom(val.opt_shared_const_ref()));
  if (_fbthrift__opt_shared_const.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__RefFields__tuple_pos[4],
      Py_None);
  } else
  if (!_fbthrift__opt_shared_const ||
      setStructField(
          *fbthrift_data,
          _fbthrift__RefFields__tuple_pos[4],
          *_fbthrift__opt_shared_const) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__opt_shared_mustable(
    Constructor<list<int32_t>>{}
    .constructFrom(val.opt_shared_mustable_ref()));
  if (_fbthrift__opt_shared_mustable.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__RefFields__tuple_pos[5],
      Py_None);
  } else
  if (!_fbthrift__opt_shared_mustable ||
      setStructField(
          *fbthrift_data,
          _fbthrift__RefFields__tuple_pos[5],
          *_fbthrift__opt_shared_mustable) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__opt_box(
    Constructor<list<int32_t>>{}
    .constructFrom(val.opt_box_ref()));
  if (_fbthrift__opt_box.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__RefFields__tuple_pos[6],
      Py_None);
  } else
  if (!_fbthrift__opt_box ||
      setStructField(
          *fbthrift_data,
          _fbthrift__RefFields__tuple_pos[6],
          *_fbthrift__opt_box) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::patch::MyEnum>
Extractor<::test::fixtures::patch::MyEnum>::operator()(PyObject* obj) {
  long val = PyLong_AsLong(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::test::fixtures::patch::MyEnum>(
        "Error getting python int value: MyEnum");
  }
  return static_cast<::test::fixtures::patch::MyEnum>(val);
}

int Extractor<::test::fixtures::patch::MyEnum>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyEnum(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyEnum");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyEnum>::operator()(
    ::test::fixtures::patch::MyEnum val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__MyEnum(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

} // namespace capi
} // namespace python
} // namespace thrift
} // namespace apache
