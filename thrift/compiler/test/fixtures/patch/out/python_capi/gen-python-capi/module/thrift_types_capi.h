
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#pragma once

#include <thrift/lib/python/capi/constructor.h>
#include <thrift/lib/python/capi/extractor.h>

#include <thrift/compiler/test/fixtures/patch/gen-cpp2/module_types.h>

namespace apache {
namespace thrift {
namespace python {
namespace capi {
template <>
struct Extractor<::test::fixtures::patch::MyData>
    : public BaseExtractor<::test::fixtures::patch::MyData> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::patch::MyData> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyData>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyData>> {
  ExtractorResult<::test::fixtures::patch::MyData> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyData>
    : public BaseConstructor<::test::fixtures::patch::MyData> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::patch::MyData& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyData>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyData>> {
  PyObject* operator()(const ::test::fixtures::patch::MyData& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyDataWithCustomDefault>
    : public BaseExtractor<::test::fixtures::patch::MyDataWithCustomDefault> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::patch::MyDataWithCustomDefault> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefault>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefault>> {
  ExtractorResult<::test::fixtures::patch::MyDataWithCustomDefault> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyDataWithCustomDefault>
    : public BaseConstructor<::test::fixtures::patch::MyDataWithCustomDefault> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::patch::MyDataWithCustomDefault& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefault>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefault>> {
  PyObject* operator()(const ::test::fixtures::patch::MyDataWithCustomDefault& val);
};

template <>
struct Extractor<::test::fixtures::patch::InnerUnion>
    : public BaseExtractor<::test::fixtures::patch::InnerUnion> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::patch::InnerUnion> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnion>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnion>> {
  ExtractorResult<::test::fixtures::patch::InnerUnion> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::InnerUnion>
    : public BaseConstructor<::test::fixtures::patch::InnerUnion> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::patch::InnerUnion& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnion>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnion>> {
  PyObject* operator()(const ::test::fixtures::patch::InnerUnion& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyUnion>
    : public BaseExtractor<::test::fixtures::patch::MyUnion> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::patch::MyUnion> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnion>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnion>> {
  ExtractorResult<::test::fixtures::patch::MyUnion> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyUnion>
    : public BaseConstructor<::test::fixtures::patch::MyUnion> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::patch::MyUnion& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnion>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnion>> {
  PyObject* operator()(const ::test::fixtures::patch::MyUnion& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyStruct>
    : public BaseExtractor<::test::fixtures::patch::MyStruct> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::patch::MyStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStruct>> {
  ExtractorResult<::test::fixtures::patch::MyStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyStruct>
    : public BaseConstructor<::test::fixtures::patch::MyStruct> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::patch::MyStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::MyStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::LateDefStruct>
    : public BaseExtractor<::test::fixtures::patch::LateDefStruct> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::patch::LateDefStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStruct>> {
  ExtractorResult<::test::fixtures::patch::LateDefStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::LateDefStruct>
    : public BaseConstructor<::test::fixtures::patch::LateDefStruct> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::patch::LateDefStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::LateDefStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::Recursive>
    : public BaseExtractor<::test::fixtures::patch::Recursive> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::patch::Recursive> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Recursive>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Recursive>> {
  ExtractorResult<::test::fixtures::patch::Recursive> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::Recursive>
    : public BaseConstructor<::test::fixtures::patch::Recursive> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::patch::Recursive& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Recursive>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Recursive>> {
  PyObject* operator()(const ::test::fixtures::patch::Recursive& val);
};

template <>
struct Extractor<::test::fixtures::patch::Bar>
    : public BaseExtractor<::test::fixtures::patch::Bar> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::patch::Bar> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Bar>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Bar>> {
  ExtractorResult<::test::fixtures::patch::Bar> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::Bar>
    : public BaseConstructor<::test::fixtures::patch::Bar> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::patch::Bar& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Bar>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Bar>> {
  PyObject* operator()(const ::test::fixtures::patch::Bar& val);
};

template <>
struct Extractor<::test::fixtures::patch::Loop>
    : public BaseExtractor<::test::fixtures::patch::Loop> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::patch::Loop> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Loop>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Loop>> {
  ExtractorResult<::test::fixtures::patch::Loop> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::Loop>
    : public BaseConstructor<::test::fixtures::patch::Loop> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::patch::Loop& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Loop>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Loop>> {
  PyObject* operator()(const ::test::fixtures::patch::Loop& val);
};

template <>
struct Extractor<::test::fixtures::patch::RefFields>
    : public BaseExtractor<::test::fixtures::patch::RefFields> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::patch::RefFields> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFields>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFields>> {
  ExtractorResult<::test::fixtures::patch::RefFields> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::RefFields>
    : public BaseConstructor<::test::fixtures::patch::RefFields> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::patch::RefFields& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFields>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFields>> {
  PyObject* operator()(const ::test::fixtures::patch::RefFields& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyEnum>
    : public BaseExtractor<::test::fixtures::patch::MyEnum> {
  ExtractorResult<::test::fixtures::patch::MyEnum> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyEnum> {
  PyObject* operator()(::test::fixtures::patch::MyEnum val);
};

} // namespace capi
} // namespace python
} // namespace thrift
} // namespace apache
