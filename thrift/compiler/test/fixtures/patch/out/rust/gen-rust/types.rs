// @generated by Thrift for thrift/compiler/test/fixtures/patch/src/module.thrift
// This file is probably not the place you want to edit!


#![recursion_limit = "100000000"]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals, unused_crate_dependencies, clippy::redundant_closure, clippy::type_complexity)]

#[allow(unused_imports)]
pub(crate) use crate as types;

#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct MyData {
    pub data1: ::std::string::String,
    pub data2: ::std::primitive::i32,
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `@rust.Exhaustive` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct MyDataWithCustomDefault {
    pub data1: ::std::string::String,
    pub data2: ::std::primitive::i32,
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `@rust.Exhaustive` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum InnerUnion {
    innerOption(::std::vec::Vec<::std::primitive::u8>),
    UnknownField(::std::primitive::i32),
}

#[derive(Clone, PartialEq, Debug)]
pub enum MyUnion {
    option1(::std::string::String),
    option2(::std::primitive::i32),
    option3(crate::types::InnerUnion),
    UnknownField(::std::primitive::i32),
}

#[derive(Clone, PartialEq)]
pub struct MyStruct {
    pub boolVal: ::std::primitive::bool,
    pub byteVal: ::std::primitive::i8,
    pub i16Val: ::std::primitive::i16,
    pub i32Val: ::std::primitive::i32,
    pub i64Val: ::std::primitive::i64,
    pub floatVal: ::std::primitive::f32,
    pub doubleVal: ::std::primitive::f64,
    pub stringVal: ::std::string::String,
    pub binaryVal: ::std::vec::Vec<::std::primitive::u8>,
    pub enumVal: crate::types::MyEnum,
    pub structVal: crate::types::MyData,
    pub unionVal: crate::types::MyUnion,
    pub lateStructVal: crate::types::LateDefStruct,
    pub optBoolVal: ::std::option::Option<::std::primitive::bool>,
    pub optByteVal: ::std::option::Option<::std::primitive::i8>,
    pub optI16Val: ::std::option::Option<::std::primitive::i16>,
    pub optI32Val: ::std::option::Option<::std::primitive::i32>,
    pub optI64Val: ::std::option::Option<::std::primitive::i64>,
    pub optFloatVal: ::std::option::Option<::std::primitive::f32>,
    pub optDoubleVal: ::std::option::Option<::std::primitive::f64>,
    pub optStringVal: ::std::option::Option<::std::string::String>,
    pub optBinaryVal: ::std::option::Option<::std::vec::Vec<::std::primitive::u8>>,
    pub optEnumVal: ::std::option::Option<crate::types::MyEnum>,
    pub optStructVal: ::std::option::Option<crate::types::MyData>,
    pub optLateStructVal: ::std::option::Option<crate::types::LateDefStruct>,
    pub optListVal: ::std::option::Option<::std::vec::Vec<::std::primitive::i16>>,
    pub optSetVal: ::std::option::Option<::std::collections::BTreeSet<::std::string::String>>,
    pub optMapVal: ::std::option::Option<::std::collections::BTreeMap<::std::string::String, ::std::string::String>>,
    pub listMap: ::std::vec::Vec<::std::collections::BTreeMap<::std::string::String, ::std::primitive::i32>>,
    pub mapMap: ::std::collections::BTreeMap<::std::string::String, ::std::collections::BTreeMap<::std::string::String, ::std::primitive::i32>>,
    pub i32WithCustomDefault: ::std::primitive::i32,
    pub structWithCustomDefault: crate::types::MyDataWithCustomDefault,
    pub structWithFieldCustomDefault: crate::types::MyData,
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `@rust.Exhaustive` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct LateDefStruct {
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `@rust.Exhaustive` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Clone, PartialEq)]
pub struct Recursive {
    pub nodes: ::std::collections::BTreeMap<::std::string::String, crate::types::Recursive>,
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `@rust.Exhaustive` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Clone, PartialEq)]
pub struct Bar {
    pub r#loop: crate::types::Loop,
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `@rust.Exhaustive` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Clone, PartialEq)]
pub struct Loop {
    pub bar: crate::types::Bar,
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `@rust.Exhaustive` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct RefFields {
    pub unique: ::std::vec::Vec<::std::primitive::i32>,
    pub shared_const: ::std::vec::Vec<::std::primitive::i32>,
    pub shared_mustable: ::std::vec::Vec<::std::primitive::i32>,
    pub opt_unique: ::std::option::Option<::std::vec::Vec<::std::primitive::i32>>,
    pub opt_shared_const: ::std::option::Option<::std::vec::Vec<::std::primitive::i32>>,
    pub opt_shared_mustable: ::std::option::Option<::std::vec::Vec<::std::primitive::i32>>,
    pub opt_box: ::std::option::Option<::std::boxed::Box<::std::vec::Vec<::std::primitive::i32>>>,
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `@rust.Exhaustive` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct MyEnum(pub ::std::primitive::i32);

impl MyEnum {
    pub const MyValue0: Self = MyEnum(0i32);
}

impl ::fbthrift::ThriftEnum for MyEnum {
    fn enumerate() -> &'static [(Self, &'static str)] {
        &[
            (Self::MyValue0, "MyValue0"),
        ]
    }

    fn variants() -> &'static [&'static str] {
        &[
            "MyValue0",
        ]
    }

    fn variant_values() -> &'static [Self] {
        &[
            Self::MyValue0,
        ]
    }
}

#[allow(clippy::derivable_impls)]
impl ::std::default::Default for MyEnum {
    fn default() -> Self {
        Self(0)
    }
}

impl<'a> ::std::convert::From<&'a MyEnum> for ::std::primitive::i32 {
    #[inline]
    fn from(x: &'a MyEnum) -> Self {
        x.0
    }
}

impl ::std::convert::From<MyEnum> for ::std::primitive::i32 {
    #[inline]
    fn from(x: MyEnum) -> Self {
        x.0
    }
}

impl ::std::convert::From<::std::primitive::i32> for MyEnum {
    #[inline]
    fn from(x: ::std::primitive::i32) -> Self {
        Self(x)
    }
}

impl ::std::fmt::Display for MyEnum {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        static VARIANTS_BY_NUMBER: &[(&::std::primitive::str, ::std::primitive::i32)] = &[
            ("MyValue0", 0),
        ];
        ::fbthrift::help::enum_display(VARIANTS_BY_NUMBER, fmt, self.0)
    }
}

impl ::std::fmt::Debug for MyEnum {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(fmt, "MyEnum::{}", self)
    }
}

impl ::std::str::FromStr for MyEnum {
    type Err = ::anyhow::Error;

    fn from_str(string: &::std::primitive::str) -> ::std::result::Result<Self, Self::Err> {
        static VARIANTS_BY_NAME: &[(&::std::primitive::str, ::std::primitive::i32)] = &[
            ("MyValue0", 0),
        ];
        ::fbthrift::help::enum_from_str(VARIANTS_BY_NAME, string, "MyEnum").map(Self)
    }
}

impl ::fbthrift::GetTType for MyEnum {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::I32;
}

impl ::fbthrift::GetUri for self::MyEnum {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/MyEnum"
    }
}

impl<P> ::fbthrift::Serialize<P> for MyEnum
where
    P: ::fbthrift::ProtocolWriter,
{
    #[inline]
    fn write(&self, p: &mut P) {
        p.write_i32(self.into())
    }
}

impl<P> ::fbthrift::Deserialize<P> for MyEnum
where
    P: ::fbthrift::ProtocolReader,
{
    #[inline]
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        ::std::result::Result::Ok(Self::from(::anyhow::Context::context(p.read_i32(), "Expected a number indicating enum variant")?))
    }
}

#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::MyData {
    fn default() -> Self {
        Self {
            data1: ::std::default::Default::default(),
            data2: ::std::default::Default::default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::MyData {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("MyData")
            .field("data1", &self.data1)
            .field("data2", &self.data2)
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::MyData {}
unsafe impl ::std::marker::Sync for self::MyData {}
impl ::std::marker::Unpin for self::MyData {}
impl ::std::panic::RefUnwindSafe for self::MyData {}
impl ::std::panic::UnwindSafe for self::MyData {}

impl ::fbthrift::GetTType for self::MyData {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::MyData {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/MyData"
    }
}

impl ::fbthrift::GetTypeNameType for self::MyData {
    fn type_name_type() -> fbthrift::TypeNameType {
        ::fbthrift::TypeNameType::StructType
    }
}

impl<P> ::fbthrift::Serialize<P> for self::MyData
where
    P: ::fbthrift::ProtocolWriter,
{
    #[inline]
    fn write(&self, p: &mut P) {
        p.write_struct_begin("MyData");
        p.write_field_begin("data1", ::fbthrift::TType::String, 1);
        ::fbthrift::Serialize::write(&self.data1, p);
        p.write_field_end();
        p.write_field_begin("data2", ::fbthrift::TType::I32, 2);
        ::fbthrift::Serialize::write(&self.data2, p);
        p.write_field_end();
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::MyData
where
    P: ::fbthrift::ProtocolReader,
{
    #[inline]
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("data1", ::fbthrift::TType::String, 1),
            ::fbthrift::Field::new("data2", ::fbthrift::TType::I32, 2),
        ];
        let mut field_data1 = ::std::option::Option::None;
        let mut field_data2 = ::std::option::Option::None;
        let _ = ::anyhow::Context::context(p.read_struct_begin(|_| ()), "Expected a MyData")?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (::fbthrift::TType::String, 1) => field_data1 = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::I32, 2) => field_data2 = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            data1: field_data1.unwrap_or_default(),
            data2: field_data2.unwrap_or_default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


impl ::fbthrift::metadata::ThriftAnnotations for MyData {
    fn get_structured_annotation<T: Sized + 'static>() -> ::std::option::Option<T> {
        #[allow(unused_variables)]
        let type_id = ::std::any::TypeId::of::<T>();

        None
    }

    fn get_field_structured_annotation<T: Sized + 'static>(field_id: i16) -> ::std::option::Option<T> {
        #[allow(unused_variables)]
        let type_id = ::std::any::TypeId::of::<T>();

        #[allow(clippy::match_single_binding)]
        match field_id {
            1 => {
            },
            2 => {
            },
            _ => {}
        }

        None
    }
}


#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::MyDataWithCustomDefault {
    fn default() -> Self {
        Self {
            data1: "1".to_owned(),
            data2: 2,
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::MyDataWithCustomDefault {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("MyDataWithCustomDefault")
            .field("data1", &self.data1)
            .field("data2", &self.data2)
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::MyDataWithCustomDefault {}
unsafe impl ::std::marker::Sync for self::MyDataWithCustomDefault {}
impl ::std::marker::Unpin for self::MyDataWithCustomDefault {}
impl ::std::panic::RefUnwindSafe for self::MyDataWithCustomDefault {}
impl ::std::panic::UnwindSafe for self::MyDataWithCustomDefault {}

impl ::fbthrift::GetTType for self::MyDataWithCustomDefault {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::MyDataWithCustomDefault {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/MyDataWithCustomDefault"
    }
}

impl ::fbthrift::GetTypeNameType for self::MyDataWithCustomDefault {
    fn type_name_type() -> fbthrift::TypeNameType {
        ::fbthrift::TypeNameType::StructType
    }
}

impl<P> ::fbthrift::Serialize<P> for self::MyDataWithCustomDefault
where
    P: ::fbthrift::ProtocolWriter,
{
    #[inline]
    fn write(&self, p: &mut P) {
        p.write_struct_begin("MyDataWithCustomDefault");
        p.write_field_begin("data1", ::fbthrift::TType::String, 1);
        ::fbthrift::Serialize::write(&self.data1, p);
        p.write_field_end();
        p.write_field_begin("data2", ::fbthrift::TType::I32, 2);
        ::fbthrift::Serialize::write(&self.data2, p);
        p.write_field_end();
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::MyDataWithCustomDefault
where
    P: ::fbthrift::ProtocolReader,
{
    #[inline]
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("data1", ::fbthrift::TType::String, 1),
            ::fbthrift::Field::new("data2", ::fbthrift::TType::I32, 2),
        ];
        let mut field_data1 = ::std::option::Option::None;
        let mut field_data2 = ::std::option::Option::None;
        let _ = ::anyhow::Context::context(p.read_struct_begin(|_| ()), "Expected a MyDataWithCustomDefault")?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (::fbthrift::TType::String, 1) => field_data1 = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::I32, 2) => field_data2 = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            data1: field_data1.unwrap_or_else(|| "1".to_owned()),
            data2: field_data2.unwrap_or(2),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


impl ::fbthrift::metadata::ThriftAnnotations for MyDataWithCustomDefault {
    fn get_structured_annotation<T: Sized + 'static>() -> ::std::option::Option<T> {
        #[allow(unused_variables)]
        let type_id = ::std::any::TypeId::of::<T>();

        None
    }

    fn get_field_structured_annotation<T: Sized + 'static>(field_id: i16) -> ::std::option::Option<T> {
        #[allow(unused_variables)]
        let type_id = ::std::any::TypeId::of::<T>();

        #[allow(clippy::match_single_binding)]
        match field_id {
            1 => {
            },
            2 => {
            },
            _ => {}
        }

        None
    }
}



impl ::std::default::Default for InnerUnion {
    fn default() -> Self {
        Self::UnknownField(-1)
    }
}

impl ::fbthrift::GetTType for InnerUnion {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::InnerUnion {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/InnerUnion"
    }
}

impl ::fbthrift::GetTypeNameType for self::InnerUnion {
    fn type_name_type() -> fbthrift::TypeNameType {
        ::fbthrift::TypeNameType::UnionType
    }
}

impl<P> ::fbthrift::Serialize<P> for InnerUnion
where
    P: ::fbthrift::ProtocolWriter,
{
    #[inline]
    fn write(&self, p: &mut P) {
        p.write_struct_begin("InnerUnion");
        match self {
            Self::innerOption(inner) => {
                p.write_field_begin("innerOption", ::fbthrift::TType::String, 1);
                ::fbthrift::Serialize::write(inner, p);
                p.write_field_end();
            }
            Self::UnknownField(_) => {}
        }
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for InnerUnion
where
    P: ::fbthrift::ProtocolReader,
{
    #[inline]
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("innerOption", ::fbthrift::TType::String, 1),
        ];
        let _ = ::anyhow::Context::context(p.read_struct_begin(|_| ()), "Expected a InnerUnion")?;
        let mut once = false;
        let mut alt = ::std::option::Option::None;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32, once) {
                (::fbthrift::TType::Stop, _, _) => break,
                (::fbthrift::TType::String, 1, false) => {
                    once = true;
                    alt = ::std::option::Option::Some(Self::innerOption(::fbthrift::Deserialize::read(p)?));
                }
                (fty, _, false) => p.skip(fty)?,
                (badty, badid, true) => return ::std::result::Result::Err(::std::convert::From::from(::fbthrift::ProtocolError::UnwantedExtraUnionField(
                    "InnerUnion".to_string(),
                    badty,
                    badid,
                ))),
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(alt.unwrap_or_default())
    }
}

impl InnerUnion {
    /// Return current union variant name as a tuple of (Rust name, original name).
    pub fn variant_name(&self) -> Option<(&'static str, &'static str)> {
        match self {
            Self::innerOption(_) => Some(("innerOption", "innerOption")),
            Self::UnknownField(_) => None,
        }
    }
}

impl ::fbthrift::metadata::ThriftAnnotations for InnerUnion {
    fn get_structured_annotation<T: Sized + 'static>() -> ::std::option::Option<T> {
        #[allow(unused_variables)]
        let type_id = ::std::any::TypeId::of::<T>();

        None
    }

    fn get_field_structured_annotation<T: Sized + 'static>(field_id: i16) -> ::std::option::Option<T> {
        #[allow(unused_variables)]
        let type_id = ::std::any::TypeId::of::<T>();

        #[allow(clippy::match_single_binding)]
        match field_id {
            1 => {
            },
            _ => {}
        }

        None
    }
}


impl ::std::default::Default for MyUnion {
    fn default() -> Self {
        Self::UnknownField(-1)
    }
}

impl ::fbthrift::GetTType for MyUnion {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::MyUnion {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/MyUnion"
    }
}

impl ::fbthrift::GetTypeNameType for self::MyUnion {
    fn type_name_type() -> fbthrift::TypeNameType {
        ::fbthrift::TypeNameType::UnionType
    }
}

impl<P> ::fbthrift::Serialize<P> for MyUnion
where
    P: ::fbthrift::ProtocolWriter,
{
    #[inline]
    fn write(&self, p: &mut P) {
        p.write_struct_begin("MyUnion");
        match self {
            Self::option1(inner) => {
                p.write_field_begin("option1", ::fbthrift::TType::String, 1);
                ::fbthrift::Serialize::write(inner, p);
                p.write_field_end();
            }
            Self::option2(inner) => {
                p.write_field_begin("option2", ::fbthrift::TType::I32, 2);
                ::fbthrift::Serialize::write(inner, p);
                p.write_field_end();
            }
            Self::option3(inner) => {
                p.write_field_begin("option3", ::fbthrift::TType::Struct, 3);
                ::fbthrift::Serialize::write(inner, p);
                p.write_field_end();
            }
            Self::UnknownField(_) => {}
        }
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for MyUnion
where
    P: ::fbthrift::ProtocolReader,
{
    #[inline]
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("option1", ::fbthrift::TType::String, 1),
            ::fbthrift::Field::new("option2", ::fbthrift::TType::I32, 2),
            ::fbthrift::Field::new("option3", ::fbthrift::TType::Struct, 3),
        ];
        let _ = ::anyhow::Context::context(p.read_struct_begin(|_| ()), "Expected a MyUnion")?;
        let mut once = false;
        let mut alt = ::std::option::Option::None;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32, once) {
                (::fbthrift::TType::Stop, _, _) => break,
                (::fbthrift::TType::String, 1, false) => {
                    once = true;
                    alt = ::std::option::Option::Some(Self::option1(::fbthrift::Deserialize::read(p)?));
                }
                (::fbthrift::TType::I32, 2, false) => {
                    once = true;
                    alt = ::std::option::Option::Some(Self::option2(::fbthrift::Deserialize::read(p)?));
                }
                (::fbthrift::TType::Struct, 3, false) => {
                    once = true;
                    alt = ::std::option::Option::Some(Self::option3(::fbthrift::Deserialize::read(p)?));
                }
                (fty, _, false) => p.skip(fty)?,
                (badty, badid, true) => return ::std::result::Result::Err(::std::convert::From::from(::fbthrift::ProtocolError::UnwantedExtraUnionField(
                    "MyUnion".to_string(),
                    badty,
                    badid,
                ))),
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(alt.unwrap_or_default())
    }
}

impl MyUnion {
    /// Return current union variant name as a tuple of (Rust name, original name).
    pub fn variant_name(&self) -> Option<(&'static str, &'static str)> {
        match self {
            Self::option1(_) => Some(("option1", "option1")),
            Self::option2(_) => Some(("option2", "option2")),
            Self::option3(_) => Some(("option3", "option3")),
            Self::UnknownField(_) => None,
        }
    }
}

impl ::fbthrift::metadata::ThriftAnnotations for MyUnion {
    fn get_structured_annotation<T: Sized + 'static>() -> ::std::option::Option<T> {
        #[allow(unused_variables)]
        let type_id = ::std::any::TypeId::of::<T>();

        None
    }

    fn get_field_structured_annotation<T: Sized + 'static>(field_id: i16) -> ::std::option::Option<T> {
        #[allow(unused_variables)]
        let type_id = ::std::any::TypeId::of::<T>();

        #[allow(clippy::match_single_binding)]
        match field_id {
            1 => {
            },
            2 => {
            },
            3 => {
            },
            _ => {}
        }

        None
    }
}

#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::MyStruct {
    fn default() -> Self {
        Self {
            boolVal: ::std::default::Default::default(),
            byteVal: ::std::default::Default::default(),
            i16Val: ::std::default::Default::default(),
            i32Val: ::std::default::Default::default(),
            i64Val: ::std::default::Default::default(),
            floatVal: ::std::default::Default::default(),
            doubleVal: ::std::default::Default::default(),
            stringVal: ::std::default::Default::default(),
            binaryVal: ::std::default::Default::default(),
            enumVal: ::std::default::Default::default(),
            structVal: ::std::default::Default::default(),
            unionVal: ::std::default::Default::default(),
            lateStructVal: ::std::default::Default::default(),
            optBoolVal: ::std::option::Option::None,
            optByteVal: ::std::option::Option::None,
            optI16Val: ::std::option::Option::None,
            optI32Val: ::std::option::Option::None,
            optI64Val: ::std::option::Option::None,
            optFloatVal: ::std::option::Option::None,
            optDoubleVal: ::std::option::Option::None,
            optStringVal: ::std::option::Option::None,
            optBinaryVal: ::std::option::Option::None,
            optEnumVal: ::std::option::Option::None,
            optStructVal: ::std::option::Option::None,
            optLateStructVal: ::std::option::Option::None,
            optListVal: ::std::option::Option::None,
            optSetVal: ::std::option::Option::None,
            optMapVal: ::std::option::Option::None,
            listMap: ::std::default::Default::default(),
            mapMap: ::std::default::Default::default(),
            i32WithCustomDefault: 1,
            structWithCustomDefault: ::std::default::Default::default(),
            structWithFieldCustomDefault: crate::types::MyData {
                    data1: "1".to_owned(),
                    data2: 2,
                    ..::std::default::Default::default()
                },
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::MyStruct {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("MyStruct")
            .field("boolVal", &self.boolVal)
            .field("byteVal", &self.byteVal)
            .field("i16Val", &self.i16Val)
            .field("i32Val", &self.i32Val)
            .field("i64Val", &self.i64Val)
            .field("floatVal", &self.floatVal)
            .field("doubleVal", &self.doubleVal)
            .field("stringVal", &self.stringVal)
            .field("binaryVal", &self.binaryVal)
            .field("enumVal", &self.enumVal)
            .field("structVal", &self.structVal)
            .field("unionVal", &self.unionVal)
            .field("lateStructVal", &self.lateStructVal)
            .field("optBoolVal", &self.optBoolVal)
            .field("optByteVal", &self.optByteVal)
            .field("optI16Val", &self.optI16Val)
            .field("optI32Val", &self.optI32Val)
            .field("optI64Val", &self.optI64Val)
            .field("optFloatVal", &self.optFloatVal)
            .field("optDoubleVal", &self.optDoubleVal)
            .field("optStringVal", &self.optStringVal)
            .field("optBinaryVal", &self.optBinaryVal)
            .field("optEnumVal", &self.optEnumVal)
            .field("optStructVal", &self.optStructVal)
            .field("optLateStructVal", &self.optLateStructVal)
            .field("optListVal", &self.optListVal)
            .field("optSetVal", &self.optSetVal)
            .field("optMapVal", &self.optMapVal)
            .field("listMap", &self.listMap)
            .field("mapMap", &self.mapMap)
            .field("i32WithCustomDefault", &self.i32WithCustomDefault)
            .field("structWithCustomDefault", &self.structWithCustomDefault)
            .field("structWithFieldCustomDefault", &self.structWithFieldCustomDefault)
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::MyStruct {}
unsafe impl ::std::marker::Sync for self::MyStruct {}
impl ::std::marker::Unpin for self::MyStruct {}
impl ::std::panic::RefUnwindSafe for self::MyStruct {}
impl ::std::panic::UnwindSafe for self::MyStruct {}

impl ::fbthrift::GetTType for self::MyStruct {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::MyStruct {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/MyStruct"
    }
}

impl ::fbthrift::GetTypeNameType for self::MyStruct {
    fn type_name_type() -> fbthrift::TypeNameType {
        ::fbthrift::TypeNameType::StructType
    }
}

impl<P> ::fbthrift::Serialize<P> for self::MyStruct
where
    P: ::fbthrift::ProtocolWriter,
{
    #[inline]
    fn write(&self, p: &mut P) {
        p.write_struct_begin("MyStruct");
        p.write_field_begin("boolVal", ::fbthrift::TType::Bool, -1);
        ::fbthrift::Serialize::write(&self.boolVal, p);
        p.write_field_end();
        p.write_field_begin("byteVal", ::fbthrift::TType::Byte, -2);
        ::fbthrift::Serialize::write(&self.byteVal, p);
        p.write_field_end();
        p.write_field_begin("i16Val", ::fbthrift::TType::I16, -3);
        ::fbthrift::Serialize::write(&self.i16Val, p);
        p.write_field_end();
        p.write_field_begin("i32Val", ::fbthrift::TType::I32, -4);
        ::fbthrift::Serialize::write(&self.i32Val, p);
        p.write_field_end();
        p.write_field_begin("i64Val", ::fbthrift::TType::I64, -5);
        ::fbthrift::Serialize::write(&self.i64Val, p);
        p.write_field_end();
        p.write_field_begin("floatVal", ::fbthrift::TType::Float, -6);
        ::fbthrift::Serialize::write(&self.floatVal, p);
        p.write_field_end();
        p.write_field_begin("doubleVal", ::fbthrift::TType::Double, -7);
        ::fbthrift::Serialize::write(&self.doubleVal, p);
        p.write_field_end();
        p.write_field_begin("stringVal", ::fbthrift::TType::String, -8);
        ::fbthrift::Serialize::write(&self.stringVal, p);
        p.write_field_end();
        p.write_field_begin("binaryVal", ::fbthrift::TType::String, -9);
        ::fbthrift::Serialize::write(&self.binaryVal, p);
        p.write_field_end();
        p.write_field_begin("enumVal", ::fbthrift::TType::I32, -10);
        ::fbthrift::Serialize::write(&self.enumVal, p);
        p.write_field_end();
        p.write_field_begin("structVal", ::fbthrift::TType::Struct, -11);
        ::fbthrift::Serialize::write(&self.structVal, p);
        p.write_field_end();
        p.write_field_begin("unionVal", ::fbthrift::TType::Struct, -12);
        ::fbthrift::Serialize::write(&self.unionVal, p);
        p.write_field_end();
        p.write_field_begin("lateStructVal", ::fbthrift::TType::Struct, -13);
        ::fbthrift::Serialize::write(&self.lateStructVal, p);
        p.write_field_end();
        if let ::std::option::Option::Some(some) = &self.optBoolVal {
            p.write_field_begin("optBoolVal", ::fbthrift::TType::Bool, -14);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optByteVal {
            p.write_field_begin("optByteVal", ::fbthrift::TType::Byte, -15);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optI16Val {
            p.write_field_begin("optI16Val", ::fbthrift::TType::I16, -16);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optI32Val {
            p.write_field_begin("optI32Val", ::fbthrift::TType::I32, -17);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optI64Val {
            p.write_field_begin("optI64Val", ::fbthrift::TType::I64, -18);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optFloatVal {
            p.write_field_begin("optFloatVal", ::fbthrift::TType::Float, -19);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optDoubleVal {
            p.write_field_begin("optDoubleVal", ::fbthrift::TType::Double, -20);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optStringVal {
            p.write_field_begin("optStringVal", ::fbthrift::TType::String, -21);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optBinaryVal {
            p.write_field_begin("optBinaryVal", ::fbthrift::TType::String, -22);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optEnumVal {
            p.write_field_begin("optEnumVal", ::fbthrift::TType::I32, -23);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optStructVal {
            p.write_field_begin("optStructVal", ::fbthrift::TType::Struct, -24);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optLateStructVal {
            p.write_field_begin("optLateStructVal", ::fbthrift::TType::Struct, -25);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optListVal {
            p.write_field_begin("optListVal", ::fbthrift::TType::List, -26);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optSetVal {
            p.write_field_begin("optSetVal", ::fbthrift::TType::Set, -27);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.optMapVal {
            p.write_field_begin("optMapVal", ::fbthrift::TType::Map, -28);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        p.write_field_begin("listMap", ::fbthrift::TType::List, -29);
        ::fbthrift::Serialize::write(&self.listMap, p);
        p.write_field_end();
        p.write_field_begin("mapMap", ::fbthrift::TType::Map, -30);
        ::fbthrift::Serialize::write(&self.mapMap, p);
        p.write_field_end();
        p.write_field_begin("i32WithCustomDefault", ::fbthrift::TType::I32, -31);
        ::fbthrift::Serialize::write(&self.i32WithCustomDefault, p);
        p.write_field_end();
        p.write_field_begin("structWithCustomDefault", ::fbthrift::TType::Struct, -32);
        ::fbthrift::Serialize::write(&self.structWithCustomDefault, p);
        p.write_field_end();
        p.write_field_begin("structWithFieldCustomDefault", ::fbthrift::TType::Struct, 1);
        ::fbthrift::Serialize::write(&self.structWithFieldCustomDefault, p);
        p.write_field_end();
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::MyStruct
where
    P: ::fbthrift::ProtocolReader,
{
    #[inline]
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("binaryVal", ::fbthrift::TType::String, -9),
            ::fbthrift::Field::new("boolVal", ::fbthrift::TType::Bool, -1),
            ::fbthrift::Field::new("byteVal", ::fbthrift::TType::Byte, -2),
            ::fbthrift::Field::new("doubleVal", ::fbthrift::TType::Double, -7),
            ::fbthrift::Field::new("enumVal", ::fbthrift::TType::I32, -10),
            ::fbthrift::Field::new("floatVal", ::fbthrift::TType::Float, -6),
            ::fbthrift::Field::new("i16Val", ::fbthrift::TType::I16, -3),
            ::fbthrift::Field::new("i32Val", ::fbthrift::TType::I32, -4),
            ::fbthrift::Field::new("i32WithCustomDefault", ::fbthrift::TType::I32, -31),
            ::fbthrift::Field::new("i64Val", ::fbthrift::TType::I64, -5),
            ::fbthrift::Field::new("lateStructVal", ::fbthrift::TType::Struct, -13),
            ::fbthrift::Field::new("listMap", ::fbthrift::TType::List, -29),
            ::fbthrift::Field::new("mapMap", ::fbthrift::TType::Map, -30),
            ::fbthrift::Field::new("optBinaryVal", ::fbthrift::TType::String, -22),
            ::fbthrift::Field::new("optBoolVal", ::fbthrift::TType::Bool, -14),
            ::fbthrift::Field::new("optByteVal", ::fbthrift::TType::Byte, -15),
            ::fbthrift::Field::new("optDoubleVal", ::fbthrift::TType::Double, -20),
            ::fbthrift::Field::new("optEnumVal", ::fbthrift::TType::I32, -23),
            ::fbthrift::Field::new("optFloatVal", ::fbthrift::TType::Float, -19),
            ::fbthrift::Field::new("optI16Val", ::fbthrift::TType::I16, -16),
            ::fbthrift::Field::new("optI32Val", ::fbthrift::TType::I32, -17),
            ::fbthrift::Field::new("optI64Val", ::fbthrift::TType::I64, -18),
            ::fbthrift::Field::new("optLateStructVal", ::fbthrift::TType::Struct, -25),
            ::fbthrift::Field::new("optListVal", ::fbthrift::TType::List, -26),
            ::fbthrift::Field::new("optMapVal", ::fbthrift::TType::Map, -28),
            ::fbthrift::Field::new("optSetVal", ::fbthrift::TType::Set, -27),
            ::fbthrift::Field::new("optStringVal", ::fbthrift::TType::String, -21),
            ::fbthrift::Field::new("optStructVal", ::fbthrift::TType::Struct, -24),
            ::fbthrift::Field::new("stringVal", ::fbthrift::TType::String, -8),
            ::fbthrift::Field::new("structVal", ::fbthrift::TType::Struct, -11),
            ::fbthrift::Field::new("structWithCustomDefault", ::fbthrift::TType::Struct, -32),
            ::fbthrift::Field::new("structWithFieldCustomDefault", ::fbthrift::TType::Struct, 1),
            ::fbthrift::Field::new("unionVal", ::fbthrift::TType::Struct, -12),
        ];
        let mut field_boolVal = ::std::option::Option::None;
        let mut field_byteVal = ::std::option::Option::None;
        let mut field_i16Val = ::std::option::Option::None;
        let mut field_i32Val = ::std::option::Option::None;
        let mut field_i64Val = ::std::option::Option::None;
        let mut field_floatVal = ::std::option::Option::None;
        let mut field_doubleVal = ::std::option::Option::None;
        let mut field_stringVal = ::std::option::Option::None;
        let mut field_binaryVal = ::std::option::Option::None;
        let mut field_enumVal = ::std::option::Option::None;
        let mut field_structVal = ::std::option::Option::None;
        let mut field_unionVal = ::std::option::Option::None;
        let mut field_lateStructVal = ::std::option::Option::None;
        let mut field_optBoolVal = ::std::option::Option::None;
        let mut field_optByteVal = ::std::option::Option::None;
        let mut field_optI16Val = ::std::option::Option::None;
        let mut field_optI32Val = ::std::option::Option::None;
        let mut field_optI64Val = ::std::option::Option::None;
        let mut field_optFloatVal = ::std::option::Option::None;
        let mut field_optDoubleVal = ::std::option::Option::None;
        let mut field_optStringVal = ::std::option::Option::None;
        let mut field_optBinaryVal = ::std::option::Option::None;
        let mut field_optEnumVal = ::std::option::Option::None;
        let mut field_optStructVal = ::std::option::Option::None;
        let mut field_optLateStructVal = ::std::option::Option::None;
        let mut field_optListVal = ::std::option::Option::None;
        let mut field_optSetVal = ::std::option::Option::None;
        let mut field_optMapVal = ::std::option::Option::None;
        let mut field_listMap = ::std::option::Option::None;
        let mut field_mapMap = ::std::option::Option::None;
        let mut field_i32WithCustomDefault = ::std::option::Option::None;
        let mut field_structWithCustomDefault = ::std::option::Option::None;
        let mut field_structWithFieldCustomDefault = ::std::option::Option::None;
        let _ = ::anyhow::Context::context(p.read_struct_begin(|_| ()), "Expected a MyStruct")?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (::fbthrift::TType::Bool, -1) => field_boolVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Byte, -2) => field_byteVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::I16, -3) => field_i16Val = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::I32, -4) => field_i32Val = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::I64, -5) => field_i64Val = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Float, -6) => field_floatVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Double, -7) => field_doubleVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::String, -8) => field_stringVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::String, -9) => field_binaryVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::I32, -10) => field_enumVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -11) => field_structVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -12) => field_unionVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -13) => field_lateStructVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Bool, -14) => field_optBoolVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Byte, -15) => field_optByteVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::I16, -16) => field_optI16Val = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::I32, -17) => field_optI32Val = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::I64, -18) => field_optI64Val = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Float, -19) => field_optFloatVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Double, -20) => field_optDoubleVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::String, -21) => field_optStringVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::String, -22) => field_optBinaryVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::I32, -23) => field_optEnumVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -24) => field_optStructVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -25) => field_optLateStructVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::List, -26) => field_optListVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Set, -27) => field_optSetVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Map, -28) => field_optMapVal = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::List, -29) => field_listMap = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Map, -30) => field_mapMap = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::I32, -31) => field_i32WithCustomDefault = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, -32) => field_structWithCustomDefault = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Struct, 1) => field_structWithFieldCustomDefault = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            boolVal: field_boolVal.unwrap_or_default(),
            byteVal: field_byteVal.unwrap_or_default(),
            i16Val: field_i16Val.unwrap_or_default(),
            i32Val: field_i32Val.unwrap_or_default(),
            i64Val: field_i64Val.unwrap_or_default(),
            floatVal: field_floatVal.unwrap_or_default(),
            doubleVal: field_doubleVal.unwrap_or_default(),
            stringVal: field_stringVal.unwrap_or_default(),
            binaryVal: field_binaryVal.unwrap_or_default(),
            enumVal: field_enumVal.unwrap_or_default(),
            structVal: field_structVal.unwrap_or_default(),
            unionVal: field_unionVal.unwrap_or_default(),
            lateStructVal: field_lateStructVal.unwrap_or_default(),
            optBoolVal: field_optBoolVal,
            optByteVal: field_optByteVal,
            optI16Val: field_optI16Val,
            optI32Val: field_optI32Val,
            optI64Val: field_optI64Val,
            optFloatVal: field_optFloatVal,
            optDoubleVal: field_optDoubleVal,
            optStringVal: field_optStringVal,
            optBinaryVal: field_optBinaryVal,
            optEnumVal: field_optEnumVal,
            optStructVal: field_optStructVal,
            optLateStructVal: field_optLateStructVal,
            optListVal: field_optListVal,
            optSetVal: field_optSetVal,
            optMapVal: field_optMapVal,
            listMap: field_listMap.unwrap_or_default(),
            mapMap: field_mapMap.unwrap_or_default(),
            i32WithCustomDefault: field_i32WithCustomDefault.unwrap_or(1),
            structWithCustomDefault: field_structWithCustomDefault.unwrap_or_default(),
            structWithFieldCustomDefault: field_structWithFieldCustomDefault.unwrap_or_else(|| crate::types::MyData {
                    data1: "1".to_owned(),
                    data2: 2,
                    ..::std::default::Default::default()
                }),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


impl ::fbthrift::metadata::ThriftAnnotations for MyStruct {
    fn get_structured_annotation<T: Sized + 'static>() -> ::std::option::Option<T> {
        #[allow(unused_variables)]
        let type_id = ::std::any::TypeId::of::<T>();

        None
    }

    fn get_field_structured_annotation<T: Sized + 'static>(field_id: i16) -> ::std::option::Option<T> {
        #[allow(unused_variables)]
        let type_id = ::std::any::TypeId::of::<T>();

        #[allow(clippy::match_single_binding)]
        match field_id {
            -1 => {
            },
            -2 => {
            },
            -3 => {
            },
            -4 => {
            },
            -5 => {
            },
            -6 => {
            },
            -7 => {
            },
            -8 => {
            },
            -9 => {

                if type_id == ::std::any::TypeId::of::<cpp__types::Type>() {
                    let mut tmp = Some(cpp__types::Type {
                        name: "folly::IOBuf".to_owned(),
                        template: ::std::default::Default::default(),
                        ..::std::default::Default::default()
                    });
                    let r: &mut dyn ::std::any::Any = &mut tmp;
                    let r: &mut Option<T> = r.downcast_mut().unwrap();
                    return r.take();
                }
            },
            -10 => {
            },
            -11 => {
            },
            -12 => {
            },
            -13 => {
            },
            -14 => {
            },
            -15 => {
            },
            -16 => {
            },
            -17 => {
            },
            -18 => {
            },
            -19 => {
            },
            -20 => {
            },
            -21 => {
            },
            -22 => {

                if type_id == ::std::any::TypeId::of::<cpp__types::Type>() {
                    let mut tmp = Some(cpp__types::Type {
                        name: "folly::IOBuf".to_owned(),
                        template: ::std::default::Default::default(),
                        ..::std::default::Default::default()
                    });
                    let r: &mut dyn ::std::any::Any = &mut tmp;
                    let r: &mut Option<T> = r.downcast_mut().unwrap();
                    return r.take();
                }
            },
            -23 => {
            },
            -24 => {
            },
            -25 => {
            },
            -26 => {
            },
            -27 => {
            },
            -28 => {
            },
            -29 => {
            },
            -30 => {
            },
            -31 => {
            },
            -32 => {
            },
            1 => {
            },
            _ => {}
        }

        None
    }
}


#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::LateDefStruct {
    fn default() -> Self {
        Self {
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::LateDefStruct {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("LateDefStruct")
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::LateDefStruct {}
unsafe impl ::std::marker::Sync for self::LateDefStruct {}
impl ::std::marker::Unpin for self::LateDefStruct {}
impl ::std::panic::RefUnwindSafe for self::LateDefStruct {}
impl ::std::panic::UnwindSafe for self::LateDefStruct {}

impl ::fbthrift::GetTType for self::LateDefStruct {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::LateDefStruct {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/LateDefStruct"
    }
}

impl ::fbthrift::GetTypeNameType for self::LateDefStruct {
    fn type_name_type() -> fbthrift::TypeNameType {
        ::fbthrift::TypeNameType::StructType
    }
}

impl<P> ::fbthrift::Serialize<P> for self::LateDefStruct
where
    P: ::fbthrift::ProtocolWriter,
{
    #[inline]
    fn write(&self, p: &mut P) {
        p.write_struct_begin("LateDefStruct");
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::LateDefStruct
where
    P: ::fbthrift::ProtocolReader,
{
    #[inline]
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
        ];
        let _ = ::anyhow::Context::context(p.read_struct_begin(|_| ()), "Expected a LateDefStruct")?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


impl ::fbthrift::metadata::ThriftAnnotations for LateDefStruct {
    fn get_structured_annotation<T: Sized + 'static>() -> ::std::option::Option<T> {
        #[allow(unused_variables)]
        let type_id = ::std::any::TypeId::of::<T>();

        None
    }

    fn get_field_structured_annotation<T: Sized + 'static>(field_id: i16) -> ::std::option::Option<T> {
        #[allow(unused_variables)]
        let type_id = ::std::any::TypeId::of::<T>();

        #[allow(clippy::match_single_binding)]
        match field_id {
            _ => {}
        }

        None
    }
}


#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::Recursive {
    fn default() -> Self {
        Self {
            nodes: ::std::default::Default::default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::Recursive {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("Recursive")
            .field("nodes", &self.nodes)
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::Recursive {}
unsafe impl ::std::marker::Sync for self::Recursive {}
impl ::std::marker::Unpin for self::Recursive {}
impl ::std::panic::RefUnwindSafe for self::Recursive {}
impl ::std::panic::UnwindSafe for self::Recursive {}

impl ::fbthrift::GetTType for self::Recursive {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::Recursive {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/Recursive"
    }
}

impl ::fbthrift::GetTypeNameType for self::Recursive {
    fn type_name_type() -> fbthrift::TypeNameType {
        ::fbthrift::TypeNameType::StructType
    }
}

impl<P> ::fbthrift::Serialize<P> for self::Recursive
where
    P: ::fbthrift::ProtocolWriter,
{
    #[inline]
    fn write(&self, p: &mut P) {
        p.write_struct_begin("Recursive");
        p.write_field_begin("nodes", ::fbthrift::TType::Map, -1);
        ::fbthrift::Serialize::write(&self.nodes, p);
        p.write_field_end();
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::Recursive
where
    P: ::fbthrift::ProtocolReader,
{
    #[inline]
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("nodes", ::fbthrift::TType::Map, -1),
        ];
        let mut field_nodes = ::std::option::Option::None;
        let _ = ::anyhow::Context::context(p.read_struct_begin(|_| ()), "Expected a Recursive")?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (::fbthrift::TType::Map, -1) => field_nodes = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            nodes: field_nodes.unwrap_or_default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


impl ::fbthrift::metadata::ThriftAnnotations for Recursive {
    fn get_structured_annotation<T: Sized + 'static>() -> ::std::option::Option<T> {
        #[allow(unused_variables)]
        let type_id = ::std::any::TypeId::of::<T>();

        None
    }

    fn get_field_structured_annotation<T: Sized + 'static>(field_id: i16) -> ::std::option::Option<T> {
        #[allow(unused_variables)]
        let type_id = ::std::any::TypeId::of::<T>();

        #[allow(clippy::match_single_binding)]
        match field_id {
            -1 => {

                if type_id == ::std::any::TypeId::of::<patch__types::AssignOnlyPatch>() {
                    let mut tmp = Some(patch__types::AssignOnlyPatch {
                        ..::std::default::Default::default()
                    });
                    let r: &mut dyn ::std::any::Any = &mut tmp;
                    let r: &mut Option<T> = r.downcast_mut().unwrap();
                    return r.take();
                }

                if let Some(r) = <patch__types::AssignOnlyPatch as ::fbthrift::metadata::ThriftAnnotations>::get_structured_annotation::<T>() {
                    return Some(r);
                }
            },
            _ => {}
        }

        None
    }
}


#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::Bar {
    fn default() -> Self {
        Self {
            r#loop: ::std::default::Default::default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::Bar {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("Bar")
            .field("r#loop", &self.r#loop)
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::Bar {}
unsafe impl ::std::marker::Sync for self::Bar {}
impl ::std::marker::Unpin for self::Bar {}
impl ::std::panic::RefUnwindSafe for self::Bar {}
impl ::std::panic::UnwindSafe for self::Bar {}

impl ::fbthrift::GetTType for self::Bar {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::Bar {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/Bar"
    }
}

impl ::fbthrift::GetTypeNameType for self::Bar {
    fn type_name_type() -> fbthrift::TypeNameType {
        ::fbthrift::TypeNameType::StructType
    }
}

impl<P> ::fbthrift::Serialize<P> for self::Bar
where
    P: ::fbthrift::ProtocolWriter,
{
    #[inline]
    fn write(&self, p: &mut P) {
        p.write_struct_begin("Bar");
        p.write_field_begin("loop", ::fbthrift::TType::Struct, -1);
        ::fbthrift::Serialize::write(&self.r#loop, p);
        p.write_field_end();
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::Bar
where
    P: ::fbthrift::ProtocolReader,
{
    #[inline]
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("loop", ::fbthrift::TType::Struct, -1),
        ];
        let mut field_loop = ::std::option::Option::None;
        let _ = ::anyhow::Context::context(p.read_struct_begin(|_| ()), "Expected a Bar")?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (::fbthrift::TType::Struct, -1) => field_loop = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            r#loop: field_loop.unwrap_or_default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


impl ::fbthrift::metadata::ThriftAnnotations for Bar {
    fn get_structured_annotation<T: Sized + 'static>() -> ::std::option::Option<T> {
        #[allow(unused_variables)]
        let type_id = ::std::any::TypeId::of::<T>();

        None
    }

    fn get_field_structured_annotation<T: Sized + 'static>(field_id: i16) -> ::std::option::Option<T> {
        #[allow(unused_variables)]
        let type_id = ::std::any::TypeId::of::<T>();

        #[allow(clippy::match_single_binding)]
        match field_id {
            -1 => {

                if type_id == ::std::any::TypeId::of::<cpp__types::Ref>() {
                    let mut tmp = Some(cpp__types::Ref {
                        r#type: cpp__types::RefType::Unique,
                        ..::std::default::Default::default()
                    });
                    let r: &mut dyn ::std::any::Any = &mut tmp;
                    let r: &mut Option<T> = r.downcast_mut().unwrap();
                    return r.take();
                }
            },
            _ => {}
        }

        None
    }
}


#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::Loop {
    fn default() -> Self {
        Self {
            bar: ::std::default::Default::default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::Loop {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("Loop")
            .field("bar", &self.bar)
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::Loop {}
unsafe impl ::std::marker::Sync for self::Loop {}
impl ::std::marker::Unpin for self::Loop {}
impl ::std::panic::RefUnwindSafe for self::Loop {}
impl ::std::panic::UnwindSafe for self::Loop {}

impl ::fbthrift::GetTType for self::Loop {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::Loop {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/Loop"
    }
}

impl ::fbthrift::GetTypeNameType for self::Loop {
    fn type_name_type() -> fbthrift::TypeNameType {
        ::fbthrift::TypeNameType::StructType
    }
}

impl<P> ::fbthrift::Serialize<P> for self::Loop
where
    P: ::fbthrift::ProtocolWriter,
{
    #[inline]
    fn write(&self, p: &mut P) {
        p.write_struct_begin("Loop");
        p.write_field_begin("bar", ::fbthrift::TType::Struct, -1);
        ::fbthrift::Serialize::write(&self.bar, p);
        p.write_field_end();
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::Loop
where
    P: ::fbthrift::ProtocolReader,
{
    #[inline]
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("bar", ::fbthrift::TType::Struct, -1),
        ];
        let mut field_bar = ::std::option::Option::None;
        let _ = ::anyhow::Context::context(p.read_struct_begin(|_| ()), "Expected a Loop")?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (::fbthrift::TType::Struct, -1) => field_bar = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            bar: field_bar.unwrap_or_default(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


impl ::fbthrift::metadata::ThriftAnnotations for Loop {
    fn get_structured_annotation<T: Sized + 'static>() -> ::std::option::Option<T> {
        #[allow(unused_variables)]
        let type_id = ::std::any::TypeId::of::<T>();

        if type_id == ::std::any::TypeId::of::<patch__types::AssignOnlyPatch>() {
            let mut tmp = Some(patch__types::AssignOnlyPatch {
                ..::std::default::Default::default()
            });
            let r: &mut dyn ::std::any::Any = &mut tmp;
            let r: &mut Option<T> = r.downcast_mut().unwrap();
            return r.take();
        }

        if let Some(r) = <patch__types::AssignOnlyPatch as ::fbthrift::metadata::ThriftAnnotations>::get_structured_annotation::<T>() {
            return Some(r);
        }

        None
    }

    fn get_field_structured_annotation<T: Sized + 'static>(field_id: i16) -> ::std::option::Option<T> {
        #[allow(unused_variables)]
        let type_id = ::std::any::TypeId::of::<T>();

        #[allow(clippy::match_single_binding)]
        match field_id {
            -1 => {

                if type_id == ::std::any::TypeId::of::<patch__types::AssignOnlyPatch>() {
                    let mut tmp = Some(patch__types::AssignOnlyPatch {
                        ..::std::default::Default::default()
                    });
                    let r: &mut dyn ::std::any::Any = &mut tmp;
                    let r: &mut Option<T> = r.downcast_mut().unwrap();
                    return r.take();
                }

                if let Some(r) = <patch__types::AssignOnlyPatch as ::fbthrift::metadata::ThriftAnnotations>::get_structured_annotation::<T>() {
                    return Some(r);
                }
            },
            _ => {}
        }

        None
    }
}


#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::RefFields {
    fn default() -> Self {
        Self {
            unique: ::std::default::Default::default(),
            shared_const: ::std::default::Default::default(),
            shared_mustable: ::std::default::Default::default(),
            opt_unique: ::std::option::Option::None,
            opt_shared_const: ::std::option::Option::None,
            opt_shared_mustable: ::std::option::Option::None,
            opt_box: ::std::option::Option::None,
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::RefFields {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("RefFields")
            .field("unique", &self.unique)
            .field("shared_const", &self.shared_const)
            .field("shared_mustable", &self.shared_mustable)
            .field("opt_unique", &self.opt_unique)
            .field("opt_shared_const", &self.opt_shared_const)
            .field("opt_shared_mustable", &self.opt_shared_mustable)
            .field("opt_box", &self.opt_box)
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::RefFields {}
unsafe impl ::std::marker::Sync for self::RefFields {}
impl ::std::marker::Unpin for self::RefFields {}
impl ::std::panic::RefUnwindSafe for self::RefFields {}
impl ::std::panic::UnwindSafe for self::RefFields {}

impl ::fbthrift::GetTType for self::RefFields {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl ::fbthrift::GetUri for self::RefFields {
    fn uri() -> &'static str {
        "test.dev/fixtures/patch/RefFields"
    }
}

impl ::fbthrift::GetTypeNameType for self::RefFields {
    fn type_name_type() -> fbthrift::TypeNameType {
        ::fbthrift::TypeNameType::StructType
    }
}

impl<P> ::fbthrift::Serialize<P> for self::RefFields
where
    P: ::fbthrift::ProtocolWriter,
{
    #[inline]
    fn write(&self, p: &mut P) {
        p.write_struct_begin("RefFields");
        p.write_field_begin("unique", ::fbthrift::TType::List, 1);
        ::fbthrift::Serialize::write(&self.unique, p);
        p.write_field_end();
        p.write_field_begin("shared_const", ::fbthrift::TType::List, 2);
        ::fbthrift::Serialize::write(&self.shared_const, p);
        p.write_field_end();
        p.write_field_begin("shared_mustable", ::fbthrift::TType::List, 3);
        ::fbthrift::Serialize::write(&self.shared_mustable, p);
        p.write_field_end();
        if let ::std::option::Option::Some(some) = &self.opt_unique {
            p.write_field_begin("opt_unique", ::fbthrift::TType::List, 4);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.opt_shared_const {
            p.write_field_begin("opt_shared_const", ::fbthrift::TType::List, 5);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.opt_shared_mustable {
            p.write_field_begin("opt_shared_mustable", ::fbthrift::TType::List, 6);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        if let ::std::option::Option::Some(some) = &self.opt_box {
            p.write_field_begin("opt_box", ::fbthrift::TType::List, 7);
            ::fbthrift::Serialize::write(some, p);
            p.write_field_end();
        }
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::RefFields
where
    P: ::fbthrift::ProtocolReader,
{
    #[inline]
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("opt_box", ::fbthrift::TType::List, 7),
            ::fbthrift::Field::new("opt_shared_const", ::fbthrift::TType::List, 5),
            ::fbthrift::Field::new("opt_shared_mustable", ::fbthrift::TType::List, 6),
            ::fbthrift::Field::new("opt_unique", ::fbthrift::TType::List, 4),
            ::fbthrift::Field::new("shared_const", ::fbthrift::TType::List, 2),
            ::fbthrift::Field::new("shared_mustable", ::fbthrift::TType::List, 3),
            ::fbthrift::Field::new("unique", ::fbthrift::TType::List, 1),
        ];
        let mut field_unique = ::std::option::Option::None;
        let mut field_shared_const = ::std::option::Option::None;
        let mut field_shared_mustable = ::std::option::Option::None;
        let mut field_opt_unique = ::std::option::Option::None;
        let mut field_opt_shared_const = ::std::option::Option::None;
        let mut field_opt_shared_mustable = ::std::option::Option::None;
        let mut field_opt_box = ::std::option::Option::None;
        let _ = ::anyhow::Context::context(p.read_struct_begin(|_| ()), "Expected a RefFields")?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (::fbthrift::TType::List, 1) => field_unique = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::List, 2) => field_shared_const = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::List, 3) => field_shared_mustable = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::List, 4) => field_opt_unique = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::List, 5) => field_opt_shared_const = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::List, 6) => field_opt_shared_mustable = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::List, 7) => field_opt_box = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            unique: field_unique.unwrap_or_default(),
            shared_const: field_shared_const.unwrap_or_default(),
            shared_mustable: field_shared_mustable.unwrap_or_default(),
            opt_unique: field_opt_unique,
            opt_shared_const: field_opt_shared_const,
            opt_shared_mustable: field_opt_shared_mustable,
            opt_box: field_opt_box,
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


impl ::fbthrift::metadata::ThriftAnnotations for RefFields {
    fn get_structured_annotation<T: Sized + 'static>() -> ::std::option::Option<T> {
        #[allow(unused_variables)]
        let type_id = ::std::any::TypeId::of::<T>();

        None
    }

    fn get_field_structured_annotation<T: Sized + 'static>(field_id: i16) -> ::std::option::Option<T> {
        #[allow(unused_variables)]
        let type_id = ::std::any::TypeId::of::<T>();

        #[allow(clippy::match_single_binding)]
        match field_id {
            1 => {

                if type_id == ::std::any::TypeId::of::<cpp__types::Ref>() {
                    let mut tmp = Some(cpp__types::Ref {
                        r#type: cpp__types::RefType::Unique,
                        ..::std::default::Default::default()
                    });
                    let r: &mut dyn ::std::any::Any = &mut tmp;
                    let r: &mut Option<T> = r.downcast_mut().unwrap();
                    return r.take();
                }
            },
            2 => {

                if type_id == ::std::any::TypeId::of::<cpp__types::Ref>() {
                    let mut tmp = Some(cpp__types::Ref {
                        r#type: cpp__types::RefType::Shared,
                        ..::std::default::Default::default()
                    });
                    let r: &mut dyn ::std::any::Any = &mut tmp;
                    let r: &mut Option<T> = r.downcast_mut().unwrap();
                    return r.take();
                }
            },
            3 => {

                if type_id == ::std::any::TypeId::of::<cpp__types::Ref>() {
                    let mut tmp = Some(cpp__types::Ref {
                        r#type: cpp__types::RefType::SharedMutable,
                        ..::std::default::Default::default()
                    });
                    let r: &mut dyn ::std::any::Any = &mut tmp;
                    let r: &mut Option<T> = r.downcast_mut().unwrap();
                    return r.take();
                }
            },
            4 => {

                if type_id == ::std::any::TypeId::of::<cpp__types::Ref>() {
                    let mut tmp = Some(cpp__types::Ref {
                        r#type: cpp__types::RefType::Unique,
                        ..::std::default::Default::default()
                    });
                    let r: &mut dyn ::std::any::Any = &mut tmp;
                    let r: &mut Option<T> = r.downcast_mut().unwrap();
                    return r.take();
                }
            },
            5 => {

                if type_id == ::std::any::TypeId::of::<cpp__types::Ref>() {
                    let mut tmp = Some(cpp__types::Ref {
                        r#type: cpp__types::RefType::Shared,
                        ..::std::default::Default::default()
                    });
                    let r: &mut dyn ::std::any::Any = &mut tmp;
                    let r: &mut Option<T> = r.downcast_mut().unwrap();
                    return r.take();
                }
            },
            6 => {

                if type_id == ::std::any::TypeId::of::<cpp__types::Ref>() {
                    let mut tmp = Some(cpp__types::Ref {
                        r#type: cpp__types::RefType::SharedMutable,
                        ..::std::default::Default::default()
                    });
                    let r: &mut dyn ::std::any::Any = &mut tmp;
                    let r: &mut Option<T> = r.downcast_mut().unwrap();
                    return r.take();
                }
            },
            7 => {

                if type_id == ::std::any::TypeId::of::<thrift__types::Box>() {
                    let mut tmp = Some(thrift__types::Box {
                        ..::std::default::Default::default()
                    });
                    let r: &mut dyn ::std::any::Any = &mut tmp;
                    let r: &mut Option<T> = r.downcast_mut().unwrap();
                    return r.take();
                }
            },
            _ => {}
        }

        None
    }
}


mod dot_dot {
    #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct OtherFields(pub(crate) ());

    #[allow(dead_code)] // if serde isn't being used
    pub(super) fn default_for_serde_deserialize() -> OtherFields {
        OtherFields(())
    }
}

pub(crate) mod r#impl {
    use ref_cast::RefCast;

    #[derive(RefCast)]
    #[repr(transparent)]
    pub(crate) struct LocalImpl<T>(T);

    #[allow(unused)]
    pub(crate) fn write<T, P>(value: &T, p: &mut P)
    where
        LocalImpl<T>: ::fbthrift::Serialize<P>,
        P: ::fbthrift::ProtocolWriter,
    {
        ::fbthrift::Serialize::write(LocalImpl::ref_cast(value), p);
    }

    #[allow(unused)]
    pub(crate) fn read<T, P>(p: &mut P) -> ::anyhow::Result<T>
    where
        LocalImpl<T>: ::fbthrift::Deserialize<P>,
        P: ::fbthrift::ProtocolReader,
    {
        let value: LocalImpl<T> = ::fbthrift::Deserialize::read(p)?;
        ::std::result::Result::Ok(value.0)
    }
}
