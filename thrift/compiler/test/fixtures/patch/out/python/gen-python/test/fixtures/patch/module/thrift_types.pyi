#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations


import typing as _typing

import enum

import folly.iobuf as _fbthrift_iobuf
import thrift.python.types as _fbthrift_python_types
import thrift.python.exceptions as _fbthrift_python_exceptions

import apache.thrift.op.patch.thrift_types

import apache.thrift.type.standard.thrift_types

class _fbthrift_compatible_with_MyEnum:
    pass


class MyEnum(_fbthrift_python_types.Enum, int, _fbthrift_compatible_with_MyEnum):
    MyValue0: MyEnum = ...
    def _to_python(self) -> MyEnum: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.MyEnum": ...  # type: ignore
    def _to_py_deprecated(self) -> int: ...


class _fbthrift_compatible_with_MyData:
    pass


class MyData(_fbthrift_python_types.Struct, _fbthrift_compatible_with_MyData):
    data1: _typing.Final[str] = ...
    data2: _typing.Final[int] = ...
    def __init__(
        self, *,
        data1: _typing.Optional[str]=...,
        data2: _typing.Optional[int]=...
    ) -> None: ...

    def __call__(
        self, *,
        data1: _typing.Optional[str]=...,
        data2: _typing.Optional[int]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[str, int]]]: ...
    def _to_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.MyData": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyData": ...  # type: ignore


class _fbthrift_compatible_with_MyDataWithCustomDefault:
    pass


class MyDataWithCustomDefault(_fbthrift_python_types.Struct, _fbthrift_compatible_with_MyDataWithCustomDefault):
    data1: _typing.Final[str] = ...
    data2: _typing.Final[int] = ...
    def __init__(
        self, *,
        data1: _typing.Optional[str]=...,
        data2: _typing.Optional[int]=...
    ) -> None: ...

    def __call__(
        self, *,
        data1: _typing.Optional[str]=...,
        data2: _typing.Optional[int]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[str, int]]]: ...
    def _to_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.MyDataWithCustomDefault": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyDataWithCustomDefault": ...  # type: ignore


class _fbthrift_compatible_with_InnerUnion:
    pass


class InnerUnion(_fbthrift_python_types.Union, _fbthrift_compatible_with_InnerUnion):
    innerOption: _typing.Final[bytes] = ...
    def __init__(
        self, *,
        innerOption: _typing.Optional[bytes]=...
    ) -> None: ...


    class Type(enum.Enum):
        EMPTY: InnerUnion.Type = ...
        innerOption: InnerUnion.Type = ...

    @classmethod
    def fromValue(cls, value: _typing.Union[None, bytes]) -> InnerUnion: ...
    value: _typing.Final[_typing.Union[None, bytes]]
    type: Type
    def get_type(self) -> Type:...
    def _to_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.InnerUnion": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.InnerUnion": ...  # type: ignore


class _fbthrift_compatible_with_MyUnion:
    pass


class MyUnion(_fbthrift_python_types.Union, _fbthrift_compatible_with_MyUnion):
    option1: _typing.Final[str] = ...
    option2: _typing.Final[int] = ...
    option3: _typing.Final[InnerUnion] = ...
    def __init__(
        self, *,
        option1: _typing.Optional[str]=...,
        option2: _typing.Optional[int]=...,
        option3: _typing.Optional[_fbthrift_compatible_with_InnerUnion]=...
    ) -> None: ...


    class Type(enum.Enum):
        EMPTY: MyUnion.Type = ...
        option1: MyUnion.Type = ...
        option2: MyUnion.Type = ...
        option3: MyUnion.Type = ...

    @classmethod
    def fromValue(cls, value: _typing.Union[None, str, int, InnerUnion]) -> MyUnion: ...
    value: _typing.Final[_typing.Union[None, str, int, InnerUnion]]
    type: Type
    def get_type(self) -> Type:...
    def _to_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.MyUnion": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyUnion": ...  # type: ignore


class _fbthrift_compatible_with_MyStruct:
    pass


class MyStruct(_fbthrift_python_types.Struct, _fbthrift_compatible_with_MyStruct):
    structWithCustomDefault: _typing.Final[MyDataWithCustomDefault] = ...
    i32WithCustomDefault: _typing.Final[int] = ...
    mapMap: _typing.Final[_typing.Mapping[str, _typing.Mapping[str, int]]] = ...
    listMap: _typing.Final[_typing.Sequence[_typing.Mapping[str, int]]] = ...
    optMapVal: _typing.Final[_typing.Optional[_typing.Mapping[str, str]]] = ...
    optSetVal: _typing.Final[_typing.Optional[_typing.AbstractSet[str]]] = ...
    optListVal: _typing.Final[_typing.Optional[_typing.Sequence[int]]] = ...
    optLateStructVal: _typing.Final[_typing.Optional[LateDefStruct]] = ...
    optStructVal: _typing.Final[_typing.Optional[MyData]] = ...
    optEnumVal: _typing.Final[_typing.Optional[MyEnum]] = ...
    optBinaryVal: _typing.Final[_typing.Optional[_fbthrift_iobuf.IOBuf]] = ...
    optStringVal: _typing.Final[_typing.Optional[str]] = ...
    optDoubleVal: _typing.Final[_typing.Optional[float]] = ...
    optFloatVal: _typing.Final[_typing.Optional[float]] = ...
    optI64Val: _typing.Final[_typing.Optional[int]] = ...
    optI32Val: _typing.Final[_typing.Optional[int]] = ...
    optI16Val: _typing.Final[_typing.Optional[int]] = ...
    optByteVal: _typing.Final[_typing.Optional[int]] = ...
    optBoolVal: _typing.Final[_typing.Optional[bool]] = ...
    lateStructVal: _typing.Final[LateDefStruct] = ...
    unionVal: _typing.Final[MyUnion] = ...
    structVal: _typing.Final[MyData] = ...
    enumVal: _typing.Final[MyEnum] = ...
    binaryVal: _typing.Final[_fbthrift_iobuf.IOBuf] = ...
    stringVal: _typing.Final[str] = ...
    doubleVal: _typing.Final[float] = ...
    floatVal: _typing.Final[float] = ...
    i64Val: _typing.Final[int] = ...
    i32Val: _typing.Final[int] = ...
    i16Val: _typing.Final[int] = ...
    byteVal: _typing.Final[int] = ...
    boolVal: _typing.Final[bool] = ...
    structWithFieldCustomDefault: _typing.Final[MyData] = ...
    def __init__(
        self, *,
        structWithCustomDefault: _typing.Optional[_fbthrift_compatible_with_MyDataWithCustomDefault]=...,
        i32WithCustomDefault: _typing.Optional[int]=...,
        mapMap: _typing.Optional[_typing.Mapping[str, _typing.Mapping[str, int]]]=...,
        listMap: _typing.Optional[_typing.Sequence[_typing.Mapping[str, int]]]=...,
        optMapVal: _typing.Optional[_typing.Mapping[str, str]]=...,
        optSetVal: _typing.Optional[_typing.AbstractSet[str]]=...,
        optListVal: _typing.Optional[_typing.Sequence[int]]=...,
        optLateStructVal: _typing.Optional[_fbthrift_compatible_with_LateDefStruct]=...,
        optStructVal: _typing.Optional[_fbthrift_compatible_with_MyData]=...,
        optEnumVal: _typing.Optional[_fbthrift_compatible_with_MyEnum]=...,
        optBinaryVal: _typing.Optional[_fbthrift_iobuf.IOBuf]=...,
        optStringVal: _typing.Optional[str]=...,
        optDoubleVal: _typing.Optional[float]=...,
        optFloatVal: _typing.Optional[float]=...,
        optI64Val: _typing.Optional[int]=...,
        optI32Val: _typing.Optional[int]=...,
        optI16Val: _typing.Optional[int]=...,
        optByteVal: _typing.Optional[int]=...,
        optBoolVal: _typing.Optional[bool]=...,
        lateStructVal: _typing.Optional[_fbthrift_compatible_with_LateDefStruct]=...,
        unionVal: _typing.Optional[_fbthrift_compatible_with_MyUnion]=...,
        structVal: _typing.Optional[_fbthrift_compatible_with_MyData]=...,
        enumVal: _typing.Optional[_fbthrift_compatible_with_MyEnum]=...,
        binaryVal: _typing.Optional[_fbthrift_iobuf.IOBuf]=...,
        stringVal: _typing.Optional[str]=...,
        doubleVal: _typing.Optional[float]=...,
        floatVal: _typing.Optional[float]=...,
        i64Val: _typing.Optional[int]=...,
        i32Val: _typing.Optional[int]=...,
        i16Val: _typing.Optional[int]=...,
        byteVal: _typing.Optional[int]=...,
        boolVal: _typing.Optional[bool]=...,
        structWithFieldCustomDefault: _typing.Optional[_fbthrift_compatible_with_MyData]=...
    ) -> None: ...

    def __call__(
        self, *,
        structWithCustomDefault: _typing.Optional[_fbthrift_compatible_with_MyDataWithCustomDefault]=...,
        i32WithCustomDefault: _typing.Optional[int]=...,
        mapMap: _typing.Optional[_typing.Mapping[str, _typing.Mapping[str, int]]]=...,
        listMap: _typing.Optional[_typing.Sequence[_typing.Mapping[str, int]]]=...,
        optMapVal: _typing.Optional[_typing.Mapping[str, str]]=...,
        optSetVal: _typing.Optional[_typing.AbstractSet[str]]=...,
        optListVal: _typing.Optional[_typing.Sequence[int]]=...,
        optLateStructVal: _typing.Optional[_fbthrift_compatible_with_LateDefStruct]=...,
        optStructVal: _typing.Optional[_fbthrift_compatible_with_MyData]=...,
        optEnumVal: _typing.Optional[_fbthrift_compatible_with_MyEnum]=...,
        optBinaryVal: _typing.Optional[_fbthrift_iobuf.IOBuf]=...,
        optStringVal: _typing.Optional[str]=...,
        optDoubleVal: _typing.Optional[float]=...,
        optFloatVal: _typing.Optional[float]=...,
        optI64Val: _typing.Optional[int]=...,
        optI32Val: _typing.Optional[int]=...,
        optI16Val: _typing.Optional[int]=...,
        optByteVal: _typing.Optional[int]=...,
        optBoolVal: _typing.Optional[bool]=...,
        lateStructVal: _typing.Optional[_fbthrift_compatible_with_LateDefStruct]=...,
        unionVal: _typing.Optional[_fbthrift_compatible_with_MyUnion]=...,
        structVal: _typing.Optional[_fbthrift_compatible_with_MyData]=...,
        enumVal: _typing.Optional[_fbthrift_compatible_with_MyEnum]=...,
        binaryVal: _typing.Optional[_fbthrift_iobuf.IOBuf]=...,
        stringVal: _typing.Optional[str]=...,
        doubleVal: _typing.Optional[float]=...,
        floatVal: _typing.Optional[float]=...,
        i64Val: _typing.Optional[int]=...,
        i32Val: _typing.Optional[int]=...,
        i16Val: _typing.Optional[int]=...,
        byteVal: _typing.Optional[int]=...,
        boolVal: _typing.Optional[bool]=...,
        structWithFieldCustomDefault: _typing.Optional[_fbthrift_compatible_with_MyData]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[MyDataWithCustomDefault, int, _typing.Mapping[str, _typing.Mapping[str, int]], _typing.Sequence[_typing.Mapping[str, int]], _typing.Mapping[str, str], _typing.AbstractSet[str], _typing.Sequence[int], LateDefStruct, MyData, MyEnum, _fbthrift_iobuf.IOBuf, str, float, float, int, int, int, int, bool, LateDefStruct, MyUnion, MyData, MyEnum, _fbthrift_iobuf.IOBuf, str, float, float, int, int, int, int, bool, MyData]]]: ...
    def _to_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.MyStruct": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.MyStruct": ...  # type: ignore


class _fbthrift_compatible_with_LateDefStruct:
    pass


class LateDefStruct(_fbthrift_python_types.Struct, _fbthrift_compatible_with_LateDefStruct):
    def __init__(
        self,
    ) -> None: ...

    def __call__(
        self,
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[None]]]: ...
    def _to_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.LateDefStruct": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.LateDefStruct": ...  # type: ignore


class _fbthrift_compatible_with_Recursive:
    pass


class Recursive(_fbthrift_python_types.Struct, _fbthrift_compatible_with_Recursive):
    nodes: _typing.Final[_typing.Mapping[str, Recursive]] = ...
    def __init__(
        self, *,
        nodes: _typing.Optional[_typing.Mapping[str, _fbthrift_compatible_with_Recursive]]=...
    ) -> None: ...

    def __call__(
        self, *,
        nodes: _typing.Optional[_typing.Mapping[str, _fbthrift_compatible_with_Recursive]]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[_typing.Mapping[str, Recursive]]]]: ...
    def _to_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.Recursive": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.Recursive": ...  # type: ignore


class _fbthrift_compatible_with_Bar:
    pass


class Bar(_fbthrift_python_types.Struct, _fbthrift_compatible_with_Bar):
    loop: _typing.Final[Loop] = ...
    def __init__(
        self, *,
        loop: _typing.Optional[_fbthrift_compatible_with_Loop]=...
    ) -> None: ...

    def __call__(
        self, *,
        loop: _typing.Optional[_fbthrift_compatible_with_Loop]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[Loop]]]: ...
    def _to_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.Bar": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.Bar": ...  # type: ignore


class _fbthrift_compatible_with_Loop:
    pass


class Loop(_fbthrift_python_types.Struct, _fbthrift_compatible_with_Loop):
    bar: _typing.Final[Bar] = ...
    def __init__(
        self, *,
        bar: _typing.Optional[_fbthrift_compatible_with_Bar]=...
    ) -> None: ...

    def __call__(
        self, *,
        bar: _typing.Optional[_fbthrift_compatible_with_Bar]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[Bar]]]: ...
    def _to_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.Loop": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.Loop": ...  # type: ignore


class _fbthrift_compatible_with_RefFields:
    pass


class RefFields(_fbthrift_python_types.Struct, _fbthrift_compatible_with_RefFields):
    unique: _typing.Final[_typing.Sequence[int]] = ...
    shared_const: _typing.Final[_typing.Sequence[int]] = ...
    shared_mustable: _typing.Final[_typing.Sequence[int]] = ...
    opt_unique: _typing.Final[_typing.Optional[_typing.Sequence[int]]] = ...
    opt_shared_const: _typing.Final[_typing.Optional[_typing.Sequence[int]]] = ...
    opt_shared_mustable: _typing.Final[_typing.Optional[_typing.Sequence[int]]] = ...
    opt_box: _typing.Final[_typing.Optional[_typing.Sequence[int]]] = ...
    def __init__(
        self, *,
        unique: _typing.Optional[_typing.Sequence[int]]=...,
        shared_const: _typing.Optional[_typing.Sequence[int]]=...,
        shared_mustable: _typing.Optional[_typing.Sequence[int]]=...,
        opt_unique: _typing.Optional[_typing.Sequence[int]]=...,
        opt_shared_const: _typing.Optional[_typing.Sequence[int]]=...,
        opt_shared_mustable: _typing.Optional[_typing.Sequence[int]]=...,
        opt_box: _typing.Optional[_typing.Sequence[int]]=...
    ) -> None: ...

    def __call__(
        self, *,
        unique: _typing.Optional[_typing.Sequence[int]]=...,
        shared_const: _typing.Optional[_typing.Sequence[int]]=...,
        shared_mustable: _typing.Optional[_typing.Sequence[int]]=...,
        opt_unique: _typing.Optional[_typing.Sequence[int]]=...,
        opt_shared_const: _typing.Optional[_typing.Sequence[int]]=...,
        opt_shared_mustable: _typing.Optional[_typing.Sequence[int]]=...,
        opt_box: _typing.Optional[_typing.Sequence[int]]=...
    ) -> _typing.Self: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[_typing.Sequence[int], _typing.Sequence[int], _typing.Sequence[int], _typing.Sequence[int], _typing.Sequence[int], _typing.Sequence[int], _typing.Sequence[int]]]]: ...
    def _to_python(self) -> _typing.Self: ...
    def _to_py3(self) -> "test.fixtures.patch.module.types.RefFields": ...  # type: ignore
    def _to_py_deprecated(self) -> "module.ttypes.RefFields": ...  # type: ignore
