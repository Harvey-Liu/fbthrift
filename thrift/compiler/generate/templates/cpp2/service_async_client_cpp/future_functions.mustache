{{!

  Copyright (c) Meta Platforms, Inc. and affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

}}
{{^service:reduced_client?}}{{^function:creates_interaction?}}
{{^function:stream?}}
folly::Future<{{ > types/return_type_client_lift_unit}}> {{ > service_common/client_class_name}}::future_{{function:cpp_name}}({{ > service_common/function_param_list_client}}) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_{{function:cpp_name}}(rpcOptions{{function:comma}}{{ > service_common/param_list}});
}
{{/function:stream?}}

{{/function:creates_interaction?}}{{/service:reduced_client?}}
folly::SemiFuture<{{ > types/return_type_client_lift_unit}}> {{ > service_common/client_class_name}}::semifuture_{{function:cpp_name}}({{ > service_common/function_param_list_client}}) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_{{function:cpp_name}}(rpcOptions{{function:comma}}{{ > service_common/param_list}});
}
{{^service:reduced_client?}}{{^function:creates_interaction?}}

{{^function:stream?}}
folly::Future<{{ > types/return_type_client_lift_unit}}> {{ > service_common/client_class_name}}::future_{{function:cpp_name}}(apache::thrift::RpcOptions& rpcOptions{{function:comma}}{{ > service_common/function_param_list_client}}) {
  using CallbackHelper = apache::thrift::detail::FutureCallbackHelper<{{ > types/return_type_client_lift_unit}}>;
  folly::Promise<CallbackHelper::PromiseResult> promise;
  auto future = promise.getFuture();
  auto ctxAndHeader = {{function:cpp_name}}Ctx(&rpcOptions);
{{#function:oneway?}}
  auto wrappedCallbackAndContextStack = apache::thrift::GeneratedAsyncClient::template prepareRequestClientCallback<true /* kIsOneWay */>(
    std::make_unique<apache::thrift::OneWayFutureCallback>(std::move(promise), channel_),
    std::move(ctxAndHeader.first));
{{/function:oneway?}}
{{^function:oneway?}}
  auto wrappedCallbackAndContextStack = apache::thrift::GeneratedAsyncClient::template prepareRequestClientCallback<false /* kIsOneWay */>(
    std::make_unique<apache::thrift::FutureCallback<{{ > types/return_type_client_lift_unit}}>>(std::move(promise), recv_wrapped_{{function:cpp_name}}, channel_),
    std::move(ctxAndHeader.first));
{{/function:oneway?}}
  auto header = std::move(ctxAndHeader.second);
  auto wrappedCallback = std::move(wrappedCallbackAndContextStack.first);
  auto* contextStack = wrappedCallbackAndContextStack.second;
  const auto serializeAndPrepareSend = [&] {
    apache::thrift::SerializedRequest request = apache::thrift::detail::ac::withProtocolWriter(apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId(), [&](auto&& writer) {
      return fbthrift_serialize_{{function:cpp_name}}(&writer, rpcOptions, *header, contextStack{{function:comma}}{{ > service_common/param_list}});
    });
    return [this, request = std::move(request), header = std::move(header), wrappedCallback = std::move(wrappedCallback){{#function:creates_interaction?}}, handle{{/function:creates_interaction?}}](apache::thrift::RpcOptions& rpcOptions) mutable {
      fbthrift_send_{{function:cpp_name}}(std::move(request), rpcOptions, std::move(header), std::move(wrappedCallback){{#function:creates_interaction?}}, handle{{/function:creates_interaction?}});
    };
  };
#if FOLLY_HAS_COROUTINES
  const bool shouldProcessClientInterceptors = contextStack && contextStack->shouldProcessClientInterceptors();
  if (!shouldProcessClientInterceptors) {
    serializeAndPrepareSend()(rpcOptions);
    return std::move(future).thenValue(CallbackHelper::extractResult);
  }
  return contextStack->processClientInterceptorsOnRequest()
      .semi()
      .defer([future = std::move(future), rpcOptions, send = serializeAndPrepareSend()](folly::Try<void> onRequestResult) mutable {
        onRequestResult.throwUnlessValue();
        send(rpcOptions);
        return std::move(future);
      })
      .deferValue([](CallbackHelper::PromiseResult&& result) {
        apache::thrift::ClientReceiveState clientReceiveState = CallbackHelper::extractClientReceiveState(result);
        auto* contextStack = clientReceiveState.ctx();
        return contextStack->processClientInterceptorsOnResponse()
          .semi()
          .defer([result = std::move(result), keepAlive = std::move(clientReceiveState)](folly::Try<void> onResponseRequest) mutable {
            onResponseRequest.throwUnlessValue();
            return CallbackHelper::extractResult(std::move(result));
          });
      })
      .toUnsafeFuture();
#else
  serializeAndPrepareSend()(rpcOptions);
  return std::move(future).thenValue(CallbackHelper::extractResult);
#endif // FOLLY_HAS_COROUTINES
}
{{/function:stream?}}
{{/function:creates_interaction?}}{{/service:reduced_client?}}

folly::SemiFuture<{{ > types/return_type_client_lift_unit}}> {{ > service_common/client_class_name}}::semifuture_{{function:cpp_name}}(apache::thrift::RpcOptions& rpcOptions{{function:comma}}{{ > service_common/function_param_list_client}}) {
{{#function:oneway?}}
  auto callbackAndFuture = makeOneWaySemiFutureCallback(channel_);
{{/function:oneway?}}
{{^function:oneway?}}
  auto callbackAndFuture = makeSemiFutureCallback(recv_wrapped_{{function:cpp_name}}, channel_);
{{/function:oneway?}}
{{#function:creates_interaction?}}
  {{function:created_interaction}} handle(channel_, "{{function:created_interaction}}");
{{/function:creates_interaction?}}
  auto callback = std::move(callbackAndFuture.first);
  {{function:cpp_name}}(rpcOptions, std::move(callback){{#function:creates_interaction?}}, handle{{/function:creates_interaction?}}{{function:comma}}{{ > service_common/param_list}});
{{^function:creates_interaction?}}
  return std::move(callbackAndFuture.second);
{{/function:creates_interaction?}}
{{#function:creates_interaction?}}
  return std::move(callbackAndFuture.second).deferValue([handle = std::move(handle)](auto&&{{^type:void?}} val{{/type:void?}}) mutable {
  {{^type:void?}}
    return std::make_pair(std::move(handle), std::move(val));
  {{/type:void?}}
  {{#type:void?}}
    return std::move(handle);
  {{/type:void?}}
  });
{{/function:creates_interaction?}}
}

{{#function:creates_interaction?}}
std::pair<
  apache::thrift::Client<{{service:parent_service_qualified_name}}>::{{function:created_interaction}},
  folly::SemiFuture<{{^type:void?}}{{ > types/return_type_client_no_handle}}{{/type:void?}}{{#type:void?}}folly::Unit{{/type:void?}}>
> {{ > service_common/client_class_name}}::eager_semifuture_{{function:cpp_name}}(apache::thrift::RpcOptions& rpcOptions{{function:comma}}{{ > service_common/function_param_list_client}}) {
  auto callbackAndFuture = makeSemiFutureCallback(recv_wrapped_{{function:cpp_name}}, channel_);
  {{function:created_interaction}} handle(channel_, "{{function:created_interaction}}");
  auto callback = std::move(callbackAndFuture.first);
  {{function:cpp_name}}(rpcOptions, std::move(callback){{#function:creates_interaction?}}, handle{{/function:creates_interaction?}}{{function:comma}}{{ > service_common/param_list}});
  return std::make_pair(std::move(handle), std::move(callbackAndFuture.second));
}

{{/function:creates_interaction?}}
{{^function:oneway?}}{{^service:reduced_client?}}{{^function:creates_interaction?}}
{{^function:stream?}}
folly::Future<std::pair<{{ > types/return_type_client_lift_unit}}, std::unique_ptr<apache::thrift::transport::THeader>>> {{ > service_common/client_class_name}}::header_future_{{function:cpp_name}}(apache::thrift::RpcOptions& rpcOptions{{function:comma}}{{ > service_common/function_param_list_client}}) {
  using CallbackHelper = apache::thrift::detail::FutureCallbackHelper<std::pair<{{ > types/return_type_client_lift_unit}}, std::unique_ptr<apache::thrift::transport::THeader>>>;
  folly::Promise<CallbackHelper::PromiseResult> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<{{ > types/return_type_client_lift_unit}}>>(std::move(promise), recv_wrapped_{{function:cpp_name}}, channel_);
  {{function:cpp_name}}(rpcOptions, std::move(callback){{function:comma}}{{ > service_common/param_list}});
  return std::move(future).thenValue(CallbackHelper::extractResult);
}
{{/function:stream?}}

folly::SemiFuture<std::pair<{{ > types/return_type_client_lift_unit}}, std::unique_ptr<apache::thrift::transport::THeader>>> {{ > service_common/client_class_name}}::header_semifuture_{{function:cpp_name}}(apache::thrift::RpcOptions& rpcOptions{{function:comma}}{{ > service_common/function_param_list_client}}) {
  auto callbackAndFuture = makeHeaderSemiFutureCallback(recv_wrapped_{{function:cpp_name}}, channel_);
  auto callback = std::move(callbackAndFuture.first);
  {{function:cpp_name}}(rpcOptions, std::move(callback){{function:comma}}{{ > service_common/param_list}});
  return std::move(callbackAndFuture.second);
}
{{/function:creates_interaction?}}{{/service:reduced_client?}}{{/function:oneway?}}
